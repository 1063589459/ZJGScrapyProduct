<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Server.Core</name>
    </assembly>
    <members>
        <member name="T:Server.Core.BizExeption">
            <summary>
            表示一个业务预定义错误。
            </summary>
        </member>
        <member name="M:Server.Core.BizExeption.#ctor(System.Int32)">
            <summary>
            初始化<see cref="T:Server.Core.BizExeption"/>的新实例。
            </summary>
            <param name="code">描述此异常的状态码。</param>
        </member>
        <member name="M:Server.Core.BizExeption.#ctor(System.String)">
            <summary>
            初始化<see cref="T:Server.Core.BizExeption"/>的新实例。
            </summary>
            <param name="message">描述此异常的消息。</param>
        </member>
        <member name="M:Server.Core.BizExeption.#ctor(System.Int32,System.String)">
            <summary>
            初始化<see cref="T:Server.Core.BizExeption"/>的新实例。
            </summary>
            <param name="code">描述此异常的状态码。</param>
            <param name="message">描述此异常的消息。</param>
        </member>
        <member name="M:Server.Core.BizExeption.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            初始化<see cref="T:Server.Core.BizExeption"/>的新实例。
            </summary>
            <param name="code">描述此异常的状态码。</param>
            <param name="message">描述此异常的消息。</param>
            <param name="innerException">指定引起此异常的异常。</param>
        </member>
        <member name="P:Server.Core.BizExeption.Code">
            <summary>
            获取描述此异常的状态码。
            </summary>
        </member>
        <member name="P:Server.Core.BizExeption.Message">
            <summary>
            获取此异常的描述，包含状态码和消息。
            </summary>
        </member>
        <member name="P:Server.Core.BizExeption.RawMessage">
            <summary>
            获取描述此异常的消息，不包含状态码。
            </summary>
        </member>
        <member name="T:Server.Core.ArgAssert">
            <summary>
            包含参数验证的有关方法。
            </summary>
        </member>
        <member name="M:Server.Core.ArgAssert.NotNull(System.Object,System.String)">
            <summary>
            断言参数非空引用。
            </summary>
            <param name="arg">参数实例。</param>
            <param name="name">参数名称。</param>
        </member>
        <member name="M:Server.Core.ArgAssert.NotNullOrEmpty(System.String,System.String)">
            <summary>
            断言字符串类型的参数非空引用或空字符串。
            </summary>
            <param name="value">字符串实例。</param>
            <param name="parameterName">参数名称。</param>
        </member>
        <member name="M:Server.Core.ArgAssert.NotNullOrEmptyOrWhitespace(System.String,System.String)">
            <summary>
            断言字符串类型的参数非空引用或空字符串或只包含空白字符。
            </summary>
            <param name="value">字符串实例。</param>
            <param name="parameterName">参数名称。</param>
        </member>
        <member name="M:Server.Core.ArgAssert.NotNullOrEmpty``1(System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            断言集合类型的参数非空切至少包含一个元素。
            </summary>
            <typeparam name="T">集合内元素的类型。</typeparam>
            <param name="collection">集合参数的实例。</param>
            <param name="parameterName">参数名称。</param>
        </member>
        <member name="M:Server.Core.ArgAssert.NotNullOrEmpty(System.Collections.IEnumerable,System.String)">
            <summary>
            断言集合类型的参数非空切至少包含一个元素。
            </summary>
            <param name="collection">集合参数的实例。</param>
            <param name="parameterName">参数名称。</param>
        </member>
        <member name="M:Server.Core.ArgAssert.NotNegative(System.Double,System.String)">
            <summary>
            断言数值类型的参数不小于0。
            </summary>
            <param name="value">值。</param>
            <param name="parameterName">参数名称。</param>
        </member>
        <member name="M:Server.Core.ArgAssert.NotNegative(System.Double,System.String,System.String)">
            <summary>
            断言数值类型的参数不小于0。
            </summary>
            <param name="value">值。</param>
            <param name="parameterName">参数名称。</param>
            <param name="errorMsg">当断言不成立时的提示消息。</param>
        </member>
        <member name="M:Server.Core.ArgAssert.NotNegative(System.Int32,System.String)">
            <summary>
            断言数值类型的参数不小于0。
            </summary>
            <param name="value">值。</param>
            <param name="parameterName">参数名称。</param>
        </member>
        <member name="M:Server.Core.ArgAssert.NotNegative(System.Int32,System.String,System.String)">
            <summary>
            断言数值类型的参数不小于0。
            </summary>
            <param name="value">值。</param>
            <param name="parameterName">参数名称。</param>
            <param name="errorMsg">当断言不成立时的提示消息。</param>
        </member>
        <member name="M:Server.Core.ArgAssert.NotNegative(System.Decimal,System.String)">
            <summary>
            断言数值类型的参数不小于0。
            </summary>
            <param name="value">值。</param>
            <param name="parameterName">参数名称。</param>
        </member>
        <member name="M:Server.Core.ArgAssert.NotNegative(System.Decimal,System.String,System.String)">
            <summary>
            断言数值类型的参数不小于0。
            </summary>
            <param name="value">值。</param>
            <param name="parameterName">参数名称。</param>
            <param name="errorMsg">当断言不成立时的提示消息。</param>
        </member>
        <member name="M:Server.Core.ArgAssert.NotZero(System.Double,System.String)">
            <summary>
            断言数值类型的参数不等于0。
            </summary>
            <param name="value">值。</param>
            <param name="parameterName">参数名称。</param>
        </member>
        <member name="M:Server.Core.ArgAssert.NotZero(System.Double,System.String,System.String)">
            <summary>
            断言数值类型的参数不等于0。
            </summary>
            <param name="value">值。</param>
            <param name="parameterName">参数名称。</param>
            <param name="errorMsg">当断言不成立时的提示消息。</param>
        </member>
        <member name="M:Server.Core.ArgAssert.NotZero(System.Int32,System.String)">
            <summary>
            断言数值类型的参数不等于0。
            </summary>
            <param name="value">值。</param>
            <param name="parameterName">参数名称。</param>
        </member>
        <member name="M:Server.Core.ArgAssert.NotZero(System.Int32,System.String,System.String)">
            <summary>
            断言数值类型的参数不等于0。
            </summary>
            <param name="value">值。</param>
            <param name="parameterName">参数名称。</param>
            <param name="errorMsg">当断言不成立时的提示消息。</param>
        </member>
        <member name="M:Server.Core.ArgAssert.NotZero(System.Decimal,System.String)">
            <summary>
            断言数值类型的参数不等于0。
            </summary>
            <param name="value">值。</param>
            <param name="parameterName">参数名称。</param>
        </member>
        <member name="M:Server.Core.ArgAssert.NotZero(System.Decimal,System.String,System.String)">
            <summary>
            断言数值类型的参数不等于0。
            </summary>
            <param name="value">值。</param>
            <param name="parameterName">参数名称。</param>
            <param name="errorMsg">当断言不成立时的提示消息。</param>
        </member>
        <member name="M:Server.Core.ArgAssert.IsPositive(System.Double,System.String)">
            <summary>
            断言数值类型的参数大于0。
            </summary>
            <param name="value">值。</param>
            <param name="parameterName">参数名称。</param>
        </member>
        <member name="M:Server.Core.ArgAssert.IsPositive(System.Double,System.String,System.String)">
            <summary>
            断言数值类型的参数大于0。
            </summary>
            <param name="value">值。</param>
            <param name="parameterName">参数名称。</param>
            <param name="errorMsg">当断言不成立时的提示消息。</param>
        </member>
        <member name="M:Server.Core.ArgAssert.IsPositive(System.Int32,System.String)">
            <summary>
            断言数值类型的参数大于0。
            </summary>
            <param name="value">值。</param>
            <param name="parameterName">参数名称。</param>
        </member>
        <member name="M:Server.Core.ArgAssert.IsPositive(System.Int32,System.String,System.String)">
            <summary>
            断言数值类型的参数大于0。
            </summary>
            <param name="value">值。</param>
            <param name="parameterName">参数名称。</param>
            <param name="errorMsg">当断言不成立时的提示消息。</param>
        </member>
        <member name="M:Server.Core.ArgAssert.IsPositive(System.Decimal,System.String)">
            <summary>
            断言数值类型的参数大于0。
            </summary>
            <param name="value">值。</param>
            <param name="parameterName">参数名称。</param>
        </member>
        <member name="M:Server.Core.ArgAssert.IsPositive(System.Decimal,System.String,System.String)">
            <summary>
            断言数值类型的参数大于0。
            </summary>
            <param name="value">值。</param>
            <param name="parameterName">参数名称。</param>
            <param name="errorMsg">当断言不成立时的提示消息。</param>
        </member>
        <member name="M:Server.Core.ArgAssert.Between(System.Double,System.String,System.Double,System.Double)">
            <summary>
            断言数值类型的参数介于给定的值范围的闭区间内。
            </summary>
            <param name="value">值。</param>
            <param name="parameterName">参数名称。</param>
            <param name="min">数值允许的最小值。</param>
            <param name="max">数值允许的最大值。</param>
        </member>
        <member name="M:Server.Core.ArgAssert.Between(System.Double,System.String,System.Double,System.Double,System.String)">
            <summary>
            断言数值类型的参数介于给定的值范围的闭区间内。
            </summary>
            <param name="value">值。</param>
            <param name="parameterName">参数名称。</param>
            <param name="min">数值允许的最小值。</param>
            <param name="max">数值允许的最大值。</param>
            <param name="errorMsg">当断言不成立时的提示消息。</param>
        </member>
        <member name="M:Server.Core.ArgAssert.Between(System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            断言数值类型的参数介于给定的值范围的闭区间内。
            </summary>
            <param name="value">值。</param>
            <param name="parameterName">参数名称。</param>
            <param name="min">数值允许的最小值。</param>
            <param name="max">数值允许的最大值。</param>
        </member>
        <member name="M:Server.Core.ArgAssert.Between(System.Int32,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            断言数值类型的参数介于给定的值范围的闭区间内。
            </summary>
            <param name="value">值。</param>
            <param name="parameterName">参数名称。</param>
            <param name="min">数值允许的最小值。</param>
            <param name="max">数值允许的最大值。</param>
            <param name="errorMsg">当断言不成立时的提示消息。</param>
        </member>
        <member name="M:Server.Core.ArgAssert.Between(System.Decimal,System.String,System.Int32,System.Int32)">
            <summary>
            断言数值类型的参数介于给定的值范围的闭区间内。
            </summary>
            <param name="value">值。</param>
            <param name="parameterName">参数名称。</param>
            <param name="min">数值允许的最小值。</param>
            <param name="max">数值允许的最大值。</param>
        </member>
        <member name="M:Server.Core.ArgAssert.Between(System.Decimal,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            断言数值类型的参数介于给定的值范围的闭区间内。
            </summary>
            <param name="value">值。</param>
            <param name="parameterName">参数名称。</param>
            <param name="min">数值允许的最小值。</param>
            <param name="max">数值允许的最大值。</param>
            <param name="errorMsg">当断言不成立时的提示消息。</param>
        </member>
        <member name="M:Server.Core.ArgAssert.IsType(System.Object,System.Type,System.String,System.Boolean)">
            <summary>
            断言参数类型匹配给定的类型。
            注意<c>null</c>可以匹配任意类新，若<paramref name="arg"/>为<c>null</c>，则此方法不会抛出任何异常。
            </summary>
            <param name="arg">参数值。</param>
            <param name="type">参数需匹配的类型。</param>
            <param name="parameterName">参数名称。</param>
            <param name="canBeInheritted">
            指定是否可使用参数类型的基类匹配给定类型。若设置为<c>false</c>，则参数类型与给定类型必须严格相等。
            默认值为<c>true</c>。
            </param>
        </member>
        <member name="T:Server.Core.Caching.CacheEnv">
            <summary>
            包含在缓存体系中使用的基础信息定义。
            </summary>
        </member>
        <member name="F:Server.Core.Caching.CacheEnv.NullValueString">
            <summary>
            用于表示<c>null</c>在缓存中作为字符串存储时的替代。
            </summary>
        </member>
        <member name="F:Server.Core.Caching.CacheEnv.CacheKeyMaxLength">
            <summary>
            定义缓存的键的最大长度。
            </summary>
        </member>
        <member name="F:Server.Core.Caching.CacheEnv.NullValue">
            <summary>
            用于在本地内存缓存中表示<c>null</c>。
            </summary>
            <remarks>
            例如<see cref="P:System.Web.HttpRuntime.Cache"/>不支持缓存null，为了能使null被缓存下来，
            需用一个特殊的对象类表示null。
            </remarks>
        </member>
        <member name="T:Server.Core.Caching.CacheExpiration">
            <summary>
            表示一个缓存过期时间。
            </summary>
        </member>
        <member name="F:Server.Core.Caching.CacheExpiration.Zero">
            <summary>
            表示缓存不会过期。
            </summary>
        </member>
        <member name="M:Server.Core.Caching.CacheExpiration.FromSeconds(System.Int32,System.Int32)">
            <summary>
            以秒为单位，创建一个新的<see cref="T:Server.Core.Caching.CacheExpiration"/>实例。
            </summary>
            <param name="baseExpirationSeconds">缓存的基本过期时间（秒）。</param>
            <param name="randomRangeSeconds">过期时间的随机量（秒），使用0表示不添加随机量。</param>
            <returns><see cref="T:Server.Core.Caching.CacheExpiration"/>实例。</returns>
        </member>
        <member name="M:Server.Core.Caching.CacheExpiration.FromMinutes(System.Int32,System.Int32)">
            <summary>
            以分钟为单位，创建一个新的<see cref="T:Server.Core.Caching.CacheExpiration"/>实例。
            </summary>
            <param name="baseExpirationMinutes">缓存的基本过期时间（分钟）。</param>
            <param name="randomRangeMinutes">过期时间的随机量（分钟），使用0表示不添加随机量。</param>
            <returns><see cref="T:Server.Core.Caching.CacheExpiration"/>实例。</returns>
        </member>
        <member name="M:Server.Core.Caching.CacheExpiration.FromTimeSpan(System.TimeSpan,System.Nullable{System.TimeSpan})">
            <summary>
            以<see cref="T:System.TimeSpan"/>为参照值，创建一个新的<see cref="T:Server.Core.Caching.CacheExpiration"/>实例。
            时间精确到秒。
            </summary>
            <param name="baseExpiration">缓存的基本过期时间。</param>
            <param name="randomRange">过期时间的随机量。</param>
            <returns><see cref="T:Server.Core.Caching.CacheExpiration"/>实例。</returns>
        </member>
        <member name="M:Server.Core.Caching.CacheExpiration.#ctor(System.Int32,System.Int32)">
            <summary>
            初始化类型的新实例。
            </summary>
            <param name="baseExpirationSeconds">缓存的基本过期时间（秒）。</param>
            <param name="randomRangeSeconds">过期时间的随机量（秒）。</param>
        </member>
        <member name="M:Server.Core.Caching.CacheExpiration.NewExpirationSeconds">
            <summary>
            得到一个新的过期时间，单位为秒。若过期时间包含有随机量，该时间已经经过随机量的计算。
            </summary>
            <returns>过期时间。</returns>
        </member>
        <member name="P:Server.Core.Caching.CacheExpiration.BaseExpirationSeconds">
            <summary>
            获取缓存的基本过期时间（秒）。
            </summary>
        </member>
        <member name="P:Server.Core.Caching.CacheExpiration.RandomRangeSeconds">
            <summary>
            获取缓存过期时间的随机量（秒）。
            </summary>
        </member>
        <member name="T:Server.Core.Caching.CacheKeyTooLongException">
            <summary>
            表示缓存的键过长时的错误。
            </summary>
        </member>
        <member name="T:Server.Core.Caching.CacheOperationBase">
            <summary>
            包含缓存的操作的封装。这是一个抽象类。
            </summary>
        </member>
        <member name="M:Server.Core.Caching.CacheOperationBase.#ctor(System.String,System.String,Server.Core.Caching.ICacheProvider,Server.Core.Caching.CacheExpiration)">
            <summary>
            初始化类型的新实例。
            </summary>
            <param name="cacheNamespace">指定缓存键所在的命名空间。</param>
            <param name="keyRoot">指定用于构建缓存键的前缀。</param>
            <param name="provider">缓存提供器。</param>
            <param name="expiration">设定缓存的超时时间。</param>
        </member>
        <member name="P:Server.Core.Caching.CacheOperationBase.Expiration">
            <summary>
            获取当前实例绑定的缓存过期设置。
            </summary>
        </member>
        <member name="P:Server.Core.Caching.CacheOperationBase.CacheProvider">
            <summary>
            获取当前实例所使用的缓存提供器。
            </summary>
        </member>
        <member name="T:Server.Core.Caching.HttpRuntimeCacheProvider">
            <summary>
            基于<see cref="T:System.Web.HttpRuntime"/>的缓存提供器实现。
            </summary>
        </member>
        <member name="T:Server.Core.Caching.ICacheProvider">
            <summary>
            定义基本的缓存提供器。
            </summary>
        </member>
        <member name="M:Server.Core.Caching.ICacheProvider.Get``1(System.String)">
            <summary>
            获取具有指定键的缓存值。
            </summary>
            <param name="key">缓存的键。</param>
            <returns>缓存的值。若缓存不存在，返回<typeparamref name="T"/>的默认值。</returns>
            <remarks>
            对于缓存值也可以为null的情况，使用此方法不能分辨缓存是否存在。
            此时可使用<see cref="M:Server.Core.Caching.ICacheProvider.TryGet``1(System.String,``0@)"/>方法替代。
            </remarks>
        </member>
        <member name="M:Server.Core.Caching.ICacheProvider.TryGet``1(System.String,``0@)">
            <summary>
            获取具有指定键的缓存值。
            </summary>
            <param name="key">缓存的键。</param>
            <param name="value">当缓存存在时，存放缓存的值。</param>
            <returns>true若缓存存在；否则为false。</returns>
        </member>
        <member name="M:Server.Core.Caching.ICacheProvider.Set``1(System.String,``0,System.TimeSpan)">
            <summary>
            设置一个缓存。
            </summary>
            <param name="key">缓存的键。</param>
            <param name="value">缓存的值。</param>
            <param name="expiration">指定缓存在多长时间后过期。使用<see cref="F:System.TimeSpan.Zero"/>表示缓存不会过期。</param>
        </member>
        <member name="M:Server.Core.Caching.ICacheProvider.Remove(System.String)">
            <summary>
            移除具有指定键的缓存。
            </summary>
            <param name="key">缓存的键。</param>
        </member>
        <member name="F:Server.Core.Caching.HttpRuntimeCacheProvider.Instance">
            <summary>
            获取<see cref="T:Server.Core.Caching.HttpRuntimeCacheProvider"/>的唯一实例。
            </summary>
        </member>
        <member name="T:Server.Core.Caching.KeyOperation`1">
            <summary>
            包含对缓存提供器上的一个特定的缓存键的操作。
            </summary>
        </member>
        <member name="M:Server.Core.Caching.KeyOperation`1.Get">
            <summary>
            获取缓存值。
            </summary>
            <returns>缓存的值。若缓存不存在，返回null。</returns>
            <remarks>
            对于缓存值也可以为null的情况，使用此方法不能分辨缓存是否存在。
            此时可使用<see cref="M:Server.Core.Caching.KeyOperation`1.TryGet(`0@)"/>方法替代。
            </remarks>
        </member>
        <member name="M:Server.Core.Caching.KeyOperation`1.TryGet(`0@)">
            <summary>
            获取缓存值。
            </summary>
            <param name="value">当缓存存在时，存放缓存的值。</param>
            <returns>true若缓存存在；否则为false。</returns>
        </member>
        <member name="M:Server.Core.Caching.KeyOperation`1.Set(`0)">
            <summary>
            设置一个缓存，并自动设置其超时。
            </summary>
            <param name="value">缓存的值。</param>
        </member>
        <member name="M:Server.Core.Caching.KeyOperation`1.Set(`0,System.Int32)">
            <summary>
            设置一个缓存，并指定其超时时间。
            </summary>
            <param name="value">缓存的值。</param>
            <param name="expirationSeconds">超时时间，单位为秒。</param>
        </member>
        <member name="M:Server.Core.Caching.KeyOperation`1.Remove">
            <summary>
            移除具有指定键的缓存。
            </summary>
        </member>
        <member name="P:Server.Core.Caching.KeyOperation`1.Key">
            <summary>
            获取当前使用的缓存键。
            </summary>
        </member>
        <member name="P:Server.Core.Caching.KeyOperation`1.BaseExpirationSeconds">
            <summary>
            获取当前绑定的基本缓存超时时间，单位为秒。
            </summary>
        </member>
        <member name="T:Server.Core.Caching.L2CacheProvider">
            <summary>
            实现简单的两级缓存。
            </summary>
            <remarks>
            注意：两个不同层次的缓存将使用相同的缓存键。
            两级缓存需由不同的缓存提供器提供，使用诸如<see cref="T:Server.Core.Caching.HttpRuntimeCacheProvider"/>
            等底层实现为单例的缓存提供器，将导致一级和二级缓存间互相覆盖从而导致预期外的结果。
            </remarks>
        </member>
        <member name="M:Server.Core.Caching.L2CacheProvider.#ctor(Server.Core.Caching.ICacheProvider,Server.Core.Caching.ICacheProvider,Server.Core.Caching.CacheExpiration)">
            <summary>
            初始化类型的新实例。
            </summary>
            <param name="level2">指定作为第二级缓存的缓存提供器。</param>
            <param name="level1">
            指定作为第一级缓存的缓存提供器。一级缓存通常快于二级缓存的，并且回收间隔更短。
            </param>
            <param name="level1Expiration">指定一级缓存的内置超时时间。</param>
        </member>
        <member name="T:Server.Core.Caching.MemoryCacheProvider">
            <summary>
            基于<see cref="T:System.Runtime.Caching.MemoryCache"/>的缓存提供器实现。
            </summary>
        </member>
        <member name="M:Server.Core.Caching.MemoryCacheProvider.#ctor(System.String)">
            <summary>
            初始化类型的新实例。
            </summary>
            <param name="name">对应<see cref="P:System.Runtime.Caching.MemoryCache.Name"/>。</param>
        </member>
        <member name="M:Server.Core.Caching.CacheUtils.BuildCacheKey(System.String,System.Object)">
            <summary>
            获取缓存的键。
            </summary>
            <param name="keyBase">缓存键的前缀部分。</param>
            <param name="element">用于构建缓存键的数据。</param>
            <returns>缓存的键。</returns>
        </member>
        <member name="M:Server.Core.Caching.CacheUtils.BuildCacheKey(System.String,System.Object,System.Object)">
            <summary>
            获取缓存的键。
            </summary>
            <param name="keyBase">缓存键的前缀部分。</param>
            <param name="element1">用于构建缓存键的第1个数据。</param>
            <param name="element2">用于构建缓存键的第2个数据。</param>
            <returns>缓存的键。</returns>
        </member>
        <member name="M:Server.Core.Caching.CacheUtils.BuildCacheKey(System.String,System.Object,System.Object,System.Object)">
            <summary>
            获取缓存的键。
            </summary>
            <param name="keyBase">缓存键的前缀部分。</param>
            <param name="element1">用于构建缓存键的第1个数据。</param>
            <param name="element2">用于构建缓存键的第2个数据。</param>
            <param name="element3">用于构建缓存键的第3个数据。</param>
            <returns>缓存的键。</returns>
        </member>
        <member name="M:Server.Core.Caching.CacheUtils.BuildCacheKey(System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            获取缓存的键。
            </summary>
            <param name="keyBase">缓存键的前缀部分。</param>
            <param name="element1">用于构建缓存键的第1个数据。</param>
            <param name="element2">用于构建缓存键的第2个数据。</param>
            <param name="element3">用于构建缓存键的第3个数据。</param>
            <param name="element4">用于构建缓存键的第4个数据。</param>
            <returns>缓存的键。</returns>
        </member>
        <member name="M:Server.Core.Caching.CacheUtils.BuildCacheKey(System.String,System.Object[])">
            <summary>
            获取缓存的键。
            </summary>
            <param name="keyBase">缓存键的前缀部分。</param>
            <param name="elements">用于构建缓存键的数据的集合。</param>
            <returns>缓存的键。</returns>
        </member>
        <member name="T:Server.Core.Caching.CacheOperation`1">
            <summary>
            包含缓存的操作的封装，并提供强类型的缓存键值的管理。
            </summary>
            <typeparam name="TRes">缓存的值的类型。</typeparam>
        </member>
        <member name="M:Server.Core.Caching.CacheOperation`1.#ctor(System.String,System.String,Server.Core.Caching.ICacheProvider,Server.Core.Caching.CacheExpiration)">
            <summary>
            初始化类型的新实例。
            </summary>
            <param name="cacheNamespace">指定缓存键所在的命名空间。</param>
            <param name="keyRoot">指定用于构建缓存键的前缀。</param>
            <param name="provider">缓存提供器。</param>
            <param name="expiration">设定缓存的超时时间。</param>
        </member>
        <member name="M:Server.Core.Caching.CacheOperation`1.Key">
            <summary>
            获取一个用于操作给定的缓存键的对象。
            </summary>
            <returns>操作给定的缓存键的实例。</returns>
        </member>
        <member name="M:Server.Core.Caching.CacheOperation`1.Key(System.Object[])">
            <summary>
            获取一个用于操作给定的缓存键的对象。
            </summary>
            <param name="elements">用于构建缓存键的数据的集合。</param>
            <returns>用于操作给定的缓存键的对象。</returns>
        </member>
        <member name="T:Server.Core.Caching.CacheOperation`2">
            <summary>
            包含缓存的操作，并提供强类型的缓存键值的管理。
            </summary>
            <typeparam name="TRes">缓存的值的类型。</typeparam>
            <typeparam name="T1">用于构建缓存键的数据的类型。</typeparam>
        </member>
        <member name="M:Server.Core.Caching.CacheOperation`2.#ctor(System.String,System.String,Server.Core.Caching.ICacheProvider,Server.Core.Caching.CacheExpiration)">
            <summary>
            初始化类型的新实例。
            </summary>
            <param name="cacheNamespace">指定缓存键所在的命名空间。</param>
            <param name="keyRoot">指定用于构建缓存键的前缀。</param>
            <param name="provider">缓存提供器。</param>
            <param name="expiration">设定缓存的超时时间。</param>
        </member>
        <member name="M:Server.Core.Caching.CacheOperation`2.Key(`0)">
            <summary>
            获取一个用于操作给定的缓存键的对象。
            </summary>
            <param name="v">用于构建缓存键的数据。</param>
            <returns>操作给定的缓存键的实例。</returns>
        </member>
        <member name="T:Server.Core.Caching.CacheOperation`3">
            <summary>
            包含缓存的操作，并提供强类型的缓存键值的管理。
            </summary>
            <typeparam name="TRes">缓存的值的类型。</typeparam>
            <typeparam name="T1">用于构建缓存键的第1个数据的类型。</typeparam>
            <typeparam name="T2">用于构建缓存键的第2个数据的类型。</typeparam>
        </member>
        <member name="M:Server.Core.Caching.CacheOperation`3.#ctor(System.String,System.String,Server.Core.Caching.ICacheProvider,Server.Core.Caching.CacheExpiration)">
            <summary>
            初始化类型的新实例。
            </summary>
            <param name="cacheNamespace">指定缓存键所在的命名空间。</param>
            <param name="keyRoot">指定用于构建缓存键的前缀。</param>
            <param name="provider">缓存提供器。</param>
            <param name="expiration">设定缓存的超时时间。</param>
        </member>
        <member name="M:Server.Core.Caching.CacheOperation`3.Key(`0,`1)">
            <summary>
            获取一个用于操作给定的缓存键的对象。
            </summary>
            <param name="v1">用于构建缓存键的第1个数据。</param>
            <param name="v2">用于构建缓存键的第2个数据。</param>
            <returns>操作给定的缓存键的实例。</returns>
        </member>
        <member name="T:Server.Core.Caching.CacheOperation`4">
            <summary>
            包含缓存的操作，并提供强类型的缓存键值的管理。
            </summary>
            <typeparam name="TRes">缓存的值的类型。</typeparam>
            <typeparam name="T1">用于构建缓存键的第1个数据的类型。</typeparam>
            <typeparam name="T2">用于构建缓存键的第2个数据的类型。</typeparam>
            <typeparam name="T3">用于构建缓存键的第3个数据的类型。</typeparam>
        </member>
        <member name="M:Server.Core.Caching.CacheOperation`4.#ctor(System.String,System.String,Server.Core.Caching.ICacheProvider,Server.Core.Caching.CacheExpiration)">
            <summary>
            初始化类型的新实例。
            </summary>
            <param name="cacheNamespace">指定缓存键所在的命名空间。</param>
            <param name="keyRoot">指定用于构建缓存键的前缀。</param>
            <param name="provider">缓存提供器。</param>
            <param name="expiration">设定缓存的超时时间。</param>
        </member>
        <member name="M:Server.Core.Caching.CacheOperation`4.Key(`0,`1,`2)">
            <summary>
            获取一个用于操作给定的缓存键的对象。
            </summary>
            <param name="v1">用于构建缓存键的第1个数据。</param>
            <param name="v2">用于构建缓存键的第2个数据。</param>
            <param name="v3">用于构建缓存键的第3个数据。</param>
            <returns>操作给定的缓存键的实例。</returns>
        </member>
        <member name="T:Server.Core.Caching.CacheOperation`5">
            <summary>
            包含缓存的操作，并提供强类型的缓存键值的管理。
            </summary>
            <typeparam name="TRes">缓存的值的类型。</typeparam>
            <typeparam name="T1">用于构建缓存键的第1个数据的类型。</typeparam>
            <typeparam name="T2">用于构建缓存键的第2个数据的类型。</typeparam>
            <typeparam name="T3">用于构建缓存键的第3个数据的类型。</typeparam>
            <typeparam name="T4">用于构建缓存键的第4个数据的类型。</typeparam>
        </member>
        <member name="M:Server.Core.Caching.CacheOperation`5.#ctor(System.String,System.String,Server.Core.Caching.ICacheProvider,Server.Core.Caching.CacheExpiration)">
            <summary>
            初始化类型的新实例。
            </summary>
            <param name="cacheNamespace">指定缓存键所在的命名空间。</param>
            <param name="keyRoot">指定用于构建缓存键的前缀。</param>
            <param name="provider">缓存提供器。</param>
            <param name="expiration">设定缓存的超时时间。</param>
        </member>
        <member name="M:Server.Core.Caching.CacheOperation`5.Key(`0,`1,`2,`3)">
            <summary>
            获取一个用于操作给定的缓存键的对象。
            </summary>
            <param name="v1">用于构建缓存键的第1个数据。</param>
            <param name="v2">用于构建缓存键的第2个数据。</param>
            <param name="v3">用于构建缓存键的第3个数据。</param>
            <param name="v4">用于构建缓存键的第4个数据。</param>
            <returns>操作给定的缓存键的实例。</returns>
        </member>
        <member name="T:Server.Core.Caching.CacheOperation`6">
            <summary>
            包含缓存的操作，并提供强类型的缓存键值的管理。
            </summary>
            <typeparam name="TRes">缓存的值的类型。</typeparam>
            <typeparam name="T1">用于构建缓存键的第1个数据的类型。</typeparam>
            <typeparam name="T2">用于构建缓存键的第2个数据的类型。</typeparam>
            <typeparam name="T3">用于构建缓存键的第3个数据的类型。</typeparam>
            <typeparam name="T4">用于构建缓存键的第4个数据的类型。</typeparam>
            <typeparam name="T5">用于构建缓存键的第5个数据的类型。</typeparam>
        </member>
        <member name="M:Server.Core.Caching.CacheOperation`6.#ctor(System.String,System.String,Server.Core.Caching.ICacheProvider,Server.Core.Caching.CacheExpiration)">
            <summary>
            初始化类型的新实例。
            </summary>
            <param name="cacheNamespace">指定缓存键所在的命名空间。</param>
            <param name="keyRoot">指定用于构建缓存键的前缀。</param>
            <param name="provider">缓存提供器。</param>
            <param name="expiration">设定缓存的超时时间。</param>
        </member>
        <member name="M:Server.Core.Caching.CacheOperation`6.Key(`0,`1,`2,`3,`4)">
            <summary>
            获取一个用于操作给定的缓存键的对象。
            </summary>
            <param name="v1">用于构建缓存键的第1个数据。</param>
            <param name="v2">用于构建缓存键的第2个数据。</param>
            <param name="v3">用于构建缓存键的第3个数据。</param>
            <param name="v4">用于构建缓存键的第4个数据。</param>
            <param name="v5">用于构建缓存键的第5个数据。</param>
            <returns>操作给定的缓存键的实例。</returns>
        </member>
        <member name="T:Server.Core.Caching.CacheOperation`7">
            <summary>
            包含缓存的操作，并提供强类型的缓存键值的管理。
            </summary>
            <typeparam name="TRes">缓存的值的类型。</typeparam>
            <typeparam name="T1">用于构建缓存键的第1个数据的类型。</typeparam>
            <typeparam name="T2">用于构建缓存键的第2个数据的类型。</typeparam>
            <typeparam name="T3">用于构建缓存键的第3个数据的类型。</typeparam>
            <typeparam name="T4">用于构建缓存键的第4个数据的类型。</typeparam>
            <typeparam name="T5">用于构建缓存键的第5个数据的类型。</typeparam>
            <typeparam name="T6">用于构建缓存键的第6个数据的类型。</typeparam>
        </member>
        <member name="M:Server.Core.Caching.CacheOperation`7.#ctor(System.String,System.String,Server.Core.Caching.ICacheProvider,Server.Core.Caching.CacheExpiration)">
            <summary>
            初始化类型的新实例。
            </summary>
            <param name="cacheNamespace">指定缓存键所在的命名空间。</param>
            <param name="keyRoot">指定用于构建缓存键的前缀。</param>
            <param name="provider">缓存提供器。</param>
            <param name="expiration">设定缓存的超时时间。</param>
        </member>
        <member name="M:Server.Core.Caching.CacheOperation`7.Key(`0,`1,`2,`3,`4,`5)">
            <summary>
            获取一个用于操作给定的缓存键的对象。
            </summary>
            <param name="v1">用于构建缓存键的第1个数据。</param>
            <param name="v2">用于构建缓存键的第2个数据。</param>
            <param name="v3">用于构建缓存键的第3个数据。</param>
            <param name="v4">用于构建缓存键的第4个数据。</param>
            <param name="v5">用于构建缓存键的第5个数据。</param>
            <param name="v6">用于构建缓存键的第6个数据。</param>
            <returns>操作给定的缓存键的实例。</returns>
        </member>
        <member name="T:Server.Core.Caching.CacheOperation`8">
            <summary>
            包含缓存的操作，并提供强类型的缓存键值的管理。
            </summary>
            <typeparam name="TRes">缓存的值的类型。</typeparam>
            <typeparam name="T1">用于构建缓存键的第1个数据的类型。</typeparam>
            <typeparam name="T2">用于构建缓存键的第2个数据的类型。</typeparam>
            <typeparam name="T3">用于构建缓存键的第3个数据的类型。</typeparam>
            <typeparam name="T4">用于构建缓存键的第4个数据的类型。</typeparam>
            <typeparam name="T5">用于构建缓存键的第5个数据的类型。</typeparam>
            <typeparam name="T6">用于构建缓存键的第6个数据的类型。</typeparam>
            <typeparam name="T7">用于构建缓存键的第7个数据的类型。</typeparam>
        </member>
        <member name="M:Server.Core.Caching.CacheOperation`8.#ctor(System.String,System.String,Server.Core.Caching.ICacheProvider,Server.Core.Caching.CacheExpiration)">
            <summary>
            初始化类型的新实例。
            </summary>
            <param name="cacheNamespace">指定缓存键所在的命名空间。</param>
            <param name="keyRoot">指定用于构建缓存键的前缀。</param>
            <param name="provider">缓存提供器。</param>
            <param name="expiration">设定缓存的超时时间。</param>
        </member>
        <member name="M:Server.Core.Caching.CacheOperation`8.Key(`0,`1,`2,`3,`4,`5,`6)">
            <summary>
            获取一个用于操作给定的缓存键的对象。
            </summary>
            <param name="v1">用于构建缓存键的第1个数据。</param>
            <param name="v2">用于构建缓存键的第2个数据。</param>
            <param name="v3">用于构建缓存键的第3个数据。</param>
            <param name="v4">用于构建缓存键的第4个数据。</param>
            <param name="v5">用于构建缓存键的第5个数据。</param>
            <param name="v6">用于构建缓存键的第6个数据。</param>
            <param name="v7">用于构建缓存键的第7个数据。</param>
            <returns>操作给定的缓存键的实例。</returns>
        </member>
        <member name="T:Server.Core.Caching.CacheOperation`9">
            <summary>
            包含缓存的操作，并提供强类型的缓存键值的管理。
            </summary>
            <typeparam name="TRes">缓存的值的类型。</typeparam>
            <typeparam name="T1">用于构建缓存键的第1个数据的类型。</typeparam>
            <typeparam name="T2">用于构建缓存键的第2个数据的类型。</typeparam>
            <typeparam name="T3">用于构建缓存键的第3个数据的类型。</typeparam>
            <typeparam name="T4">用于构建缓存键的第4个数据的类型。</typeparam>
            <typeparam name="T5">用于构建缓存键的第5个数据的类型。</typeparam>
            <typeparam name="T6">用于构建缓存键的第6个数据的类型。</typeparam>
            <typeparam name="T7">用于构建缓存键的第7个数据的类型。</typeparam>
            <typeparam name="T8">用于构建缓存键的第8个数据的类型。</typeparam>
        </member>
        <member name="M:Server.Core.Caching.CacheOperation`9.#ctor(System.String,System.String,Server.Core.Caching.ICacheProvider,Server.Core.Caching.CacheExpiration)">
            <summary>
            初始化类型的新实例。
            </summary>
            <param name="cacheNamespace">指定缓存键所在的命名空间。</param>
            <param name="keyRoot">指定用于构建缓存键的前缀。</param>
            <param name="provider">缓存提供器。</param>
            <param name="expiration">设定缓存的超时时间。</param>
        </member>
        <member name="M:Server.Core.Caching.CacheOperation`9.Key(`0,`1,`2,`3,`4,`5,`6,`7)">
            <summary>
            获取一个用于操作给定的缓存键的对象。
            </summary>
            <param name="v1">用于构建缓存键的第1个数据。</param>
            <param name="v2">用于构建缓存键的第2个数据。</param>
            <param name="v3">用于构建缓存键的第3个数据。</param>
            <param name="v4">用于构建缓存键的第4个数据。</param>
            <param name="v5">用于构建缓存键的第5个数据。</param>
            <param name="v6">用于构建缓存键的第6个数据。</param>
            <param name="v7">用于构建缓存键的第7个数据。</param>
            <param name="v8">用于构建缓存键的第8个数据。</param>
            <returns>操作给定的缓存键的实例。</returns>
        </member>
        <member name="T:Server.Core.CollectionExtention">
            <summary>
            包含集合与序列的扩展方法。
            </summary>
        </member>
        <member name="M:Server.Core.CollectionExtention.SubList``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            获取指定列表的子列表，包含了从索引<paramref name="start"/>开始，到列表结尾的数据。
            子列表是只读的。
            </summary>
            <param name="source">源列表。</param>
            <param name="start">子列表的开始索引。</param>
            <typeparam name="T">元素的类型。</typeparam>
            <returns>子列表，包含了源列表中的一段连续的数据。</returns>
            <exception cref="T:System.ArgumentNullException">当<paramref name="source"/>为null。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            当<paramref name="start"/>超出了索引的允许范围。
            </exception>
            <remarks>
            区别于<see cref="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)"/>方法，此方法访问源列表而不是生成新的列表。
            故若源列表发生了变化，将对子列表产生影响。
            </remarks>
        </member>
        <member name="M:Server.Core.CollectionExtention.SubList``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            获取指定列表的子列表，包含了从索引<paramref name="start"/>开始，到<paramref name="end"/>的数据。
            子列表是只读的。
            </summary>
            <param name="source">源列表。</param>
            <param name="start">子列表的开始索引。</param>
            <param name="end">子列表的结束索引。</param>
            <typeparam name="T">元素的类型。</typeparam>
            <returns>子列表，包含了源列表中的一段连续的数据。</returns>
            <exception cref="T:System.ArgumentNullException">当<paramref name="source"/>为null。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            当<paramref name="start"/>或<paramref name="end"/>超出了索引的允许范围。
            </exception>
            <remarks>
            区别于<see cref="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)"/>方法，此方法访问源列表而不是生成新的列表。
            故若源列表发生了变化，将对子列表产生影响。
            </remarks>
        </member>
        <member name="M:Server.Core.CollectionExtention.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.Boolean)">
            <summary>
            使用指定元素间的比较方法从序列中创建<see cref="T:System.Collections.Generic.HashSet`1"/>。
            </summary>
            <typeparam name="T">序列中元素的类型。</typeparam>
            <param name="source">来源序列。</param>
            <param name="comparer">指定如何比较元素。如为null，则使用默认的比较器。</param>
            <param name="ignoreDuplicate">true若需要忽略重复的元素；否则在元素重复时抛出异常。</param>
            <returns><see cref="T:System.Collections.Generic.HashSet`1"/>的实例。</returns>
            <exception cref="T:System.ArgumentNullException">当<paramref name="source"/>为null。</exception>
            <exception cref="T:System.ArgumentException">当序列中含有重复的元素。</exception>
            <remarks>
            若不需要在元素重复时抛出异常，而是忽略重复的元素，
            直接在创建<see cref="T:System.Collections.Generic.HashSet`1"/>时将序列传给构造函数即可。
            </remarks>
        </member>
        <member name="M:Server.Core.CollectionExtention.Apply``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            对序列上的每个元素执行指定的操作。
            </summary>
            <typeparam name="T">序列中元素的类型。</typeparam>
            <param name="source">被操作的序列。</param>
            <param name="action">在元素上执行的操作。</param>
            <remarks>方法命名避免与<see cref="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})"/>重复。</remarks>
        </member>
        <member name="T:Server.Core.Collections.ReadOnlyListAdapter`2">
            <summary>
            提供<typeparamref name="TSource"/>集合到<typeparamref name="TTarget"/>集合的适配转换。
            </summary>
            <typeparam name="TSource">原始集合的元素的类型。</typeparam>
            <typeparam name="TTarget">转换的目标类型。</typeparam>
        </member>
        <member name="M:Server.Core.Collections.ReadOnlyListAdapter`2.#ctor(System.Collections.Generic.IList{`0},System.Func{`0,`1})">
            <summary>
            初始化类型的新实例。
            </summary>
            <param name="sources">原始集合。</param>
            <param name="selector">从原始集合获取目标类型的实例的方法。</param>
        </member>
        <member name="T:Server.Core.CollectionUtils">
            <summary>
            包含集合判断与处理的有关方法。
            </summary>
        </member>
        <member name="M:Server.Core.CollectionUtils.IEnumerable``1(``0)">
            <summary>
            返回<c>null</c>。此方法用户从模板类型（通常是匿名类型）创建特定的集合容器类型。
            </summary>
            <typeparam name="T">集合元素的类型。</typeparam>
            <param name="template">模板。</param>
            <returns>总是返回<c>null</c>。</returns>
        </member>
        <member name="M:Server.Core.CollectionUtils.ICollection``1(``0)">
            <summary>
            返回<c>null</c>。此方法用户从模板类型（通常是匿名类型）创建特定的集合容器类型。
            </summary>
            <typeparam name="T">集合元素的类型。</typeparam>
            <param name="template">模板。</param>
            <returns>总是返回<c>null</c>。</returns>
        </member>
        <member name="M:Server.Core.CollectionUtils.List``1(``0)">
            <summary>
            返回<c>null</c>。此方法用户从模板类型（通常是匿名类型）创建特定的集合容器类型。
            </summary>
            <typeparam name="T">集合元素的类型。</typeparam>
            <param name="template">模板。</param>
            <returns>总是返回<c>null</c>。</returns>
        </member>
        <member name="M:Server.Core.CollectionUtils.IList``1(``0)">
            <summary>
            返回<c>null</c>。此方法用户从模板类型（通常是匿名类型）创建特定的集合容器类型。
            </summary>
            <typeparam name="T">集合元素的类型。</typeparam>
            <param name="template">模板。</param>
            <returns>总是返回<c>null</c>。</returns>
        </member>
        <member name="M:Server.Core.CollectionUtils.HashSet``1(``0)">
            <summary>
            返回<c>null</c>。此方法用户从模板类型（通常是匿名类型）创建特定的集合容器类型。
            </summary>
            <typeparam name="T">集合元素的类型。</typeparam>
            <param name="template">模板。</param>
            <returns>总是返回<c>null</c>。</returns>
        </member>
        <member name="M:Server.Core.CollectionUtils.Dictionary``2(``0,``1)">
            <summary>
            返回<c>null</c>。此方法用户从模板类型（通常是匿名类型）创建特定的集合容器类型。
            </summary>
            <typeparam name="TKey">用于字典的关键字的类型。</typeparam>
            <typeparam name="TValue">用于字典的值的类型。</typeparam>
            <param name="keyTemplate">用于字典的关键字的模板。</param>
            <param name="valueTemplate">用于字典的值的模板。</param>
            <returns>总是返回<c>null</c>。</returns>
        </member>
        <member name="M:Server.Core.CollectionUtils.IDictionary``2(``0,``1)">
            <summary>
            返回<c>null</c>。此方法用户从模板类型（通常是匿名类型）创建特定的集合容器类型。
            </summary>
            <typeparam name="TKey">用于字典的关键字的类型。</typeparam>
            <typeparam name="TValue">用于字典的值的类型。</typeparam>
            <param name="keyTemplate">用于字典的关键字的模板。</param>
            <param name="valueTemplate">用于字典的值的模板。</param>
            <returns>总是返回<c>null</c>。</returns>
        </member>
        <member name="M:Server.Core.CollectionUtils.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            判断给定集合是否为空引用或空集。
            </summary>
            <param name="collection">待判断的集合。</param>
            <returns>若集合为空引用或空集，返回<c>true</c> ，否则返回<c>false</c>。</returns>
        </member>
        <member name="M:Server.Core.CollectionUtils.IsNullOrEmpty(System.Collections.IEnumerable)">
            <summary>
            判断给定集合是否为空引用或空集。
            </summary>
            <param name="collection">待判断的集合。</param>
            <returns>若集合为空引用或空集，返回<c>true</c> ，否则返回<c>false</c>。</returns>
        </member>
        <member name="M:Server.Core.CollectionUtils.BinarySearch``1(System.Collections.Generic.IList{``0},``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            在指定的有序集合上进行二分搜索。
            </summary>
            <typeparam name="T">集合中与元素的类型。</typeparam>
            <param name="list">用于进行搜索的集合。</param>
            <param name="value">搜索的目标值。</param>
            <param name="comparer">指定元素值的比较方式。若为null，则使用默认的<see cref="T:System.Collections.Generic.IComparer`1"/>。</param>
            <returns>
            目标值在集合中的索引位置，集合中可以有多个重复的目标值，此时返回其中任意一个索引（不保证是第一个）。
            若在集合中未找到目标值，则返回一个负数：
            若集合中存在有大于目标值的元素，则该负数的补码值（-N-1）为第一个大于目标值的元素的索引；
            若集合中所有元素均小于目标值，则该负数的补码值为集合元素的最大索引+1。
            </returns>
        </member>
        <member name="M:Server.Core.CollectionUtils.BinarySearch``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            在指定的有序集合上的特定区域进行二分搜索。
            </summary>
            <typeparam name="T">集合中与元素的类型。</typeparam>
            <param name="list">用于进行搜索的集合。</param>
            <param name="start">搜索的开始索引。</param>
            <param name="end">搜索的结束索引。</param>
            <param name="value">搜索的目标值。</param>
            <param name="comparer">指定元素值的比较方式。若为null，则使用默认的<see cref="T:System.Collections.Generic.IComparer`1"/>。</param>
            <returns>
            目标值在集合中的索引位置，在指定的索引区间中可以有多个重复的目标值，此时返回其中任意一个索引（不保证是第一个）。
            若在指定的索引区间中未找到目标值，则返回一个负数：
            若指定的索引区间中存在有大于目标值的元素，则该负数的补码值（-N-1）为区间中第一个大于目标值的元素的索引；
            若指定的索引区间中所有元素均小于目标值，则该负数的补码值为指定的索引区间中的元素的最大索引+1。
            </returns>
        </member>
        <member name="M:Server.Core.CollectionUtils.BinaryRangeSearch``1(System.Collections.Generic.IList{``0},``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            在指定的有序集合上进行基于二分搜索的区间搜索。
            </summary>
            <typeparam name="T">集合中与元素的类型。</typeparam>
            <param name="list">用于进行搜索的集合。</param>
            <param name="value">搜索的目标值。</param>
            <param name="comparer">指定元素值的比较方式。若为null，则使用默认的<see cref="T:System.Collections.Generic.IComparer`1"/>。</param>
            <returns>
            目标值在集合中的索引区间。
            若在集合中未找到目标值，则返回的区间索引开始和结束值相同，且为一个负数：
            若集合中存在有大于目标值的元素，则该负数的补码值（-N-1）为第一个大于目标值的元素的索引；
            若集合中所有元素均小于目标值，则该负数的补码值为集合元素的最大索引+1。
            </returns>
        </member>
        <member name="M:Server.Core.CollectionUtils.BinaryRangeSearch``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            在指定的有序集合上进行基于二分搜索的区间搜索。
            </summary>
            <typeparam name="T">集合中与元素的类型。</typeparam>
            <param name="list">用于进行搜索的集合。</param>
            <param name="start">搜索的开始索引。</param>
            <param name="end">搜索的结束索引。</param>
            <param name="value">搜索的目标值。</param>
            <param name="comparer">指定元素值的比较方式。若为null，则使用默认的<see cref="T:System.Collections.Generic.IComparer`1"/>。</param>
            <returns>
            目标值在集合中的索引区间。
            若在集合中未找到目标值，则返回的区间索引开始和结束值相同，且为一个负数：
            若指定的索引区间中存在有大于目标值的元素，则该负数的补码值（-N-1）为区间中第一个大于目标值的元素的索引；
            若指定的索引区间中所有元素均小于目标值，则该负数的补码值为指定的索引区间中的元素的最大索引+1。
            </returns>
        </member>
        <member name="M:Server.Core.CollectionUtils.Shuffle``1(System.Collections.Generic.IList{``0})">
            <summary>
            对将集合内的元素进“洗牌”，即将元素顺序随机排放。
            </summary>
            <typeparam name="T">集合内元素的类型。</typeparam>
            <param name="list">待洗牌的集合。</param>
            <exception cref="T:System.ArgumentNullException">当<paramref name="list"/>为null。</exception>
        </member>
        <member name="M:Server.Core.CollectionUtils.Shuffle``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            对将集合内的指定范围的元素进“洗牌”，即将元素顺序随机排放。
            </summary>
            <typeparam name="T">集合内元素的类型。</typeparam>
            <param name="list">待洗牌的集合。</param>
            <param name="start">指定索引的开始值。</param>
            <param name="end">指定索引的结束值。</param>
            <exception cref="T:System.ArgumentNullException">当<paramref name="list"/>为null。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            当<paramref name="start"/>或<paramref name="end"/>超出了索引的允许范围。
            </exception>
        </member>
        <member name="M:Server.Core.CollectionUtils.ToArray``1(System.Array)">
            <summary>
            将源数组转化为目标类型的数组。
            </summary>
            <typeparam name="T">目标类型。</typeparam>
            <param name="src">源数组。</param>
            <returns>目标类型的数组。</returns>
            <exception cref="T:System.ArrayTypeMismatchException">当目标数组的元素类型不兼容源数组的元素类型。</exception>
        </member>
        <member name="M:Server.Core.CollectionUtils.Copy``1(System.Collections.Generic.IList{``0},System.Int32,System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            从源集合的指定位置向目标集合的指定位置，逐项复制指定个数的元素。
            </summary>
            <typeparam name="T">集合的元素类型。</typeparam>
            <param name="src">复制的源集合。</param>
            <param name="srcIdx">源集合的复制开始位置的索引。</param>
            <param name="dest">复制的目标集合。</param>
            <param name="destIdx">目标集合的复制开始位置的索引。</param>
            <param name="len">要复制的元素个数。</param>
            <exception cref="T:System.ArgumentNullException">
            当<paramref name="src"/>或<paramref name="dest"/>为null。
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">当<paramref name="len"/>为负数。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            当<paramref name="srcIdx"/>或<paramref name="destIdx"/>为负数。
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">当数组的长度不足。</exception>
            <remarks>
            数组复制，可直接使用<see cref="M:System.Array.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)"/>方法。
            </remarks>
        </member>
        <member name="M:Server.Core.CollectionUtils.Copy``1(System.Collections.Generic.IList{``0},System.Int32,System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Boolean)">
            <summary>
            从源集合的指定位置向目标集合的指定位置复制指定个数的元素。
            并制定复制的进行方向是从前往后还是从后往前。
            </summary>
            <typeparam name="T">集合的元素类型。</typeparam>
            <param name="src">复制的源集合。</param>
            <param name="srcIdx">源集合的复制开始位置的索引。</param>
            <param name="dest">复制的目标集合。</param>
            <param name="destIdx">目标集合的复制开始位置的索引。</param>
            <param name="len">要复制的元素个数。</param>
            <param name="forward"> 若为true，则复制从前往后（索引从小到大）进行；否则复制从后往前进行。 </param>
            <exception cref="T:System.ArgumentNullException">
            当<paramref name="src"/>或<paramref name="dest"/>为null。
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">当<paramref name="len"/>为负数。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            当<paramref name="srcIdx"/>或<paramref name="destIdx"/>为负数。
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">当数组的长度不足。</exception>
        </member>
        <member name="T:Server.Core.ConvertUtils">
            <summary>
            包含类型转换相关的方法。
            </summary>
        </member>
        <member name="M:Server.Core.ConvertUtils.ToDouble(System.String,System.Double)">
            <summary>
            将字符串转换成<see cref="T:System.Double"/>，若值无法被转换，返回<paramref name="defaultValue"/>的值。
            </summary>
            <param name="value">字符串。</param>
            <param name="defaultValue">转换失败时返回的默认值。</param>
            <returns><see cref="T:System.Double"/>值。若值无法被转换，返回<paramref name="defaultValue"/>的值。</returns>
        </member>
        <member name="M:Server.Core.ConvertUtils.ToInt32(System.String,System.Int32)">
            <summary>
            将字符串转换成<see cref="T:System.Int32"/>，若值无法被转换，返回<paramref name="defaultValue"/>的值。
            </summary>
            <param name="value">字符串。</param>
            <param name="defaultValue">转换失败时返回的默认值。</param>
            <returns><see cref="T:System.Int32"/>值。若值无法被转换，返回<paramref name="defaultValue"/>的值。</returns>
        </member>
        <member name="M:Server.Core.ConvertUtils.ToInt64(System.String,System.Int64)">
            <summary>
            将字符串转换成<see cref="T:System.Int64"/>，若值无法被转换，返回<paramref name="defaultValue"/>的值。
            </summary>
            <param name="value">字符串。</param>
            <param name="defaultValue">转换失败时返回的默认值。</param>
            <returns><see cref="T:System.Int64"/>值。若值无法被转换，返回<paramref name="defaultValue"/>的值。</returns>
        </member>
        <member name="M:Server.Core.ConvertUtils.ToSingle(System.String,System.Single)">
            <summary>
            将字符串转换成<see cref="T:System.Single"/>，若值无法被转换，返回<paramref name="defaultValue"/>的值。
            </summary>
            <param name="value">字符串。</param>
            <param name="defaultValue">转换失败时返回的默认值。</param>
            <returns><see cref="T:System.Single"/>值。若值无法被转换，返回<paramref name="defaultValue"/>的值。</returns>
        </member>
        <member name="M:Server.Core.ConvertUtils.ToDecimal(System.String,System.Decimal)">
            <summary>
            将字符串转换成<see cref="T:System.Decimal"/>，若值无法被转换，返回<paramref name="defaultValue"/>的值。
            </summary>
            <param name="value">字符串。</param>
            <param name="defaultValue">转换失败时返回的默认值。</param>
            <returns><see cref="T:System.Decimal"/>值。若值无法被转换，返回<paramref name="defaultValue"/>的值。</returns>
        </member>
        <member name="M:Server.Core.ConvertUtils.IsNumber(System.String)">
            <summary>
            判断指定的字符串是否能够被转换为一个数值。
            </summary>
            <param name="value">字符串。</param>
            <returns>如果字符串可被转换为数值<c>true</c>，返回；否则返回<c>false</c>。</returns>
            <remarks>
            注意，不同的数值类型具有不同的最大长度和精度，
            这意味着即使一个字符串是整数，它也未必能被转换为<see cref="T:System.Int32"/>，
            因为它可能超过了<see cref="F:System.Int32.MaxValue"/>。
            形如以下格式的值都被认为可以转换为数值：
            <code>
            123
            123.1
            .123
            123.
            </code>
            </remarks>
        </member>
        <member name="M:Server.Core.ConvertUtils.ToDateTime(System.String,System.DateTime)">
            <summary>
            将字符串转换成<see cref="T:System.DateTime"/>，若值无法被转换，返回<paramref name="defaultValue"/>的值。
            </summary>
            <param name="value">字符串。</param>
            <param name="defaultValue">转换失败时返回的默认值。</param>
            <returns><see cref="T:System.DateTime"/>值。若值无法被转换，返回<paramref name="defaultValue"/>的值。</returns>
        </member>
        <member name="M:Server.Core.ConvertUtils.ConvertString``1(System.String)">
            <summary>
            Converts a string to an equivalant object of the specified type.
            </summary>
            <param name="value">The string to convert.</param>
            <returns>The instance of the specified type.</returns>
            <typeparam name="T">The target type.</typeparam>
            <remarks>
            If <paramref name="value"/> is <c>null</c>, the default value of the type will be returned.
            </remarks>
        </member>
        <member name="M:Server.Core.ConvertUtils.ConvertString(System.String,System.Type)">
            <summary>
            Converts a string to an equivalant object of the specified type.
            </summary>
            <param name="value">The string to convert.</param>
            <param name="type">The target type.</param>
            <returns>The instance of the specified type.</returns>
            <remarks>
            If <paramref name="value"/> is <c>null</c>, the default value of the type will be returned.
            </remarks>
        </member>
        <member name="M:Server.Core.ConvertUtils.ToBytes(System.String)">
            <summary>
            从十六进制数字符组成的字符串获得对应二进制数组。
            </summary>
            <param name="hex"><see cref="T:Server.Core.HexString"/>字符串值。</param>
            <returns><see cref="T:Server.Core.HexString"/>所表示的二进制数组。</returns>
            <exception cref="T:System.ArgumentNullException">当<paramref name="hex"/>为<c>null</c>。</exception>
            <exception cref="T:System.FormatException">当所传入的字符串包含16进制数以外的字符。</exception>
        </member>
        <member name="M:Server.Core.ConvertUtils.ToBytes(System.Collections.Generic.IEnumerable{System.Char},System.Boolean)">
            <summary>
            从十六进制数字符组成的字符序列获得对应二进制数组。
            </summary>
            <param name="hex"><see cref="T:Server.Core.HexString"/>字符串值。</param>
            <param name="ignoreWhiteSpace">是否忽略空白字符。</param>
            <returns><see cref="T:Server.Core.HexString"/>所表示的二进制数组。</returns>
            <exception cref="T:System.ArgumentNullException">当<paramref name="hex"/>为<c>null</c>。</exception>
            <exception cref="T:System.FormatException">当所传入的字符序列中包含16进制数或空白字符以外的字符。</exception>
        </member>
        <member name="M:Server.Core.ConvertUtils.ToUnixTimestamp(System.DateTimeOffset)">
            <summary>
            获取与指定的时间对等的Unix时间戳。
            </summary>
            <param name="dateTimeOffset">待转换的时间。</param>
            <returns>Unix时间戳。</returns>
        </member>
        <member name="M:Server.Core.ConvertUtils.ToUnixTimestamp(System.DateTime)">
            <summary>
            获取与指定的时间对等的Unix时间戳。
            </summary>
            <param name="dateTime">待转换的时间。</param>
            <returns>Unix时间戳。</returns>
        </member>
        <member name="M:Server.Core.ConvertUtils.FromUnixTimestamp(System.Int64)">
            <summary>
            获取与指定的Unix时间戳对等的<see cref="T:System.DateTimeOffset"/>。
            </summary>
            <param name="unixTimestamp">Unix时间戳。</param>
            <returns>转换后的时间。</returns>
        </member>
        <member name="M:Server.Core.ConvertUtils.AsComparer``1(System.Comparison{``0})">
            <summary>
            返回一个<see cref="T:System.Collections.Generic.IComparer`1"/>，将给定的<see cref="T:System.Comparison`1"/>作为其
            <see cref="M:System.Collections.Generic.IComparer`1.Compare(`0,`0)"/>方法的实现。
            </summary>
            <typeparam name="T">比较的类型。</typeparam>
            <param name="comparison">指定比较对象的方法。</param>
            <returns><see cref="T:System.Collections.Generic.IComparer`1"/>。</returns>
            <remarks>返回的<see cref="T:System.Collections.Generic.IComparer`1"/>将持有<paramref name="comparison"/>的引用。</remarks>
        </member>
        <member name="T:Server.Core.Data.AbstractDataRecord">
            <summary>
            提供<see cref="T:System.Data.IDataRecord"/>的一个抽象基类。可以继承此类型进行<see cref="T:System.Data.IDataRecord"/>的简易实现。
            </summary>
        </member>
        <member name="T:Server.Core.Data.AbstractDbClient">
            <summary>
            <see cref="T:Server.Core.Data.IDbClient"/>的基本实现。
            这是一个抽象类。
            </summary>
        </member>
        <member name="T:Server.Core.Data.IDbClient">
            <summary>
            定义数据库访问客户端。
            </summary>
        </member>
        <member name="M:Server.Core.Data.IDbClient.Scalar(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},System.Data.CommandType,System.Int32)">
            <summary>
            获取查询的第一行第一列的值。
            </summary>
            <param name="sql">查询SQL。</param>
            <param name="parameters">参数序列。空序列或null表示没有参数。</param>
            <param name="commandType">命令的类型。</param>
            <param name="timeOut">命令的超时时间，单位毫秒。0为不指定。</param>
            <returns>查询结果的第一行第一列的值。若查询结果行数为0，返回<c>null</c>。</returns>
            <exception cref="T:System.ArgumentNullException">当<paramref name="sql"/>为<c>null</c>。</exception>
            <exception cref="T:System.ArgumentException">当<paramref name="sql"/>长度为0。</exception>
        </member>
        <member name="M:Server.Core.Data.IDbClient.Execute(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},System.Data.CommandType,System.Int32)">
            <summary>
            执行非查询SQL语句，并返回所影响的行数。
            </summary>
            <param name="sql">非查询SQL。</param>
            <param name="parameters">参数序列。空序列或null表示没有参数。</param>
            <param name="commandType">命令的类型。</param>
            <param name="timeOut">命令的超时时间，单位毫秒。0为不指定。</param>
            <returns>SQL所影响的行数。</returns>
            <exception cref="T:System.ArgumentNullException">当<paramref name="sql"/>为<c>null</c>。</exception>
            <exception cref="T:System.ArgumentException">当<paramref name="sql"/>长度为0。</exception>
        </member>
        <member name="M:Server.Core.Data.IDbClient.SizedExecute(System.Int32,System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},System.Data.CommandType,System.Int32)">
            <summary>
            执行非查询SQL语句，并断言所影响的行数。若影响的函数不正确，抛出异常。
            </summary>
            <param name="expectedSize">被断言的影响行数。</param>
            <param name="sql">非查询SQL。</param>
            <param name="parameters">参数序列。空序列或null表示没有参数。</param>
            <param name="commandType">命令的类型。</param>
            <param name="timeOut">命令的超时时间，单位毫秒。0为不指定。</param>
            <exception cref="T:Server.Core.Data.IncorrectResultSizeException">当影响的行数不正确。</exception>
        </member>
        <member name="M:Server.Core.Data.IDbClient.DataTable(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},System.Data.CommandType,System.Int32)">
            <summary>
            返回查询语句对应查询结果的<see cref="T:System.Data.DataTable"/>。
            </summary>
            <param name="sql">查询SQL。</param>
            <param name="parameters">参数序列。空序列或null表示没有参数。</param>
            <param name="commandType">命令的类型。</param>
            <param name="timeOut">命令的超时时间，单位毫秒。0为不指定。</param>
            <returns>表示查询结果的<see cref="T:System.Data.DataTable"/>。</returns>
            <exception cref="T:System.ArgumentNullException">当<paramref name="sql"/>为<c>null</c>。</exception>
            <exception cref="T:System.ArgumentException">当<paramref name="sql"/>长度为0。</exception>
        </member>
        <member name="M:Server.Core.Data.IDbClient.DataSet(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},System.Data.CommandType,System.Int32)">
            <summary>
            返回查询语句对应查询结果的<see cref="T:System.Data.DataSet"/>。
            </summary>
            <param name="sql">查询SQL。</param>
            <param name="parameters">参数序列。空序列或null表示没有参数。</param>
            <param name="commandType">命令的类型。</param>
            <param name="timeOut">命令的超时时间，单位毫秒。0为不指定。</param>
            <returns>表示查询结果的<see cref="T:System.Data.DataSet"/>。</returns>
            <exception cref="T:System.ArgumentNullException">当<paramref name="sql"/>为<c>null</c>。</exception>
            <exception cref="T:System.ArgumentException">当<paramref name="sql"/>长度为0。</exception>
        </member>
        <member name="M:Server.Core.Data.IDbClient.Exists(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},System.Data.CommandType,System.Int32)">
            <summary>
            判断给定的查询的结果是否至少包含1行。
            </summary>
            <param name="sql">查询SQL。</param>
            <param name="parameters">参数序列。空序列或null表示没有参数。</param>
            <param name="commandType">命令的类型。</param>
            <param name="timeOut">命令的超时时间，单位毫秒。0为不指定。</param>
            <returns>若查询结果至少包含1行，返回<c>true</c>；否则返回<c>false</c>。</returns>
            <exception cref="T:System.ArgumentNullException">当<paramref name="sql"/>为<c>null</c>。</exception>
            <exception cref="T:System.ArgumentException">当<paramref name="sql"/>长度为0。</exception>
        </member>
        <member name="M:Server.Core.Data.IDbClient.GetRow(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},System.Data.CommandType,System.Int32)">
            <summary>
            获取查询结果的第一行记录。
            若查询命中的行数为0，返回null。
            </summary>
            <param name="sql">查询SQL。</param>
            <param name="parameters">参数序列。空序列或null表示没有参数。</param>
            <param name="commandType">命令的类型。</param>
            <param name="timeOut">命令的超时时间，单位毫秒。0为不指定。</param>
            <returns><see cref="T:System.Data.IDataRecord"/>的实现，包含查询的第一行记录。</returns>
            <exception cref="T:System.ArgumentNullException">当<paramref name="sql"/>为<c>null</c>。</exception>
            <exception cref="T:System.ArgumentException">当<paramref name="sql"/>长度为0。</exception>
            <remarks>
            区别于<see cref="M:System.Data.Common.DbCommand.ExecuteReader"/>的用法，此方法执行完毕后将并不保持数据库连接，
            也不需要调用<see cref="M:System.IDisposable.Dispose"/>。
            </remarks>
        </member>
        <member name="M:Server.Core.Data.IDbClient.Get``1(Server.Core.Data.IMapper{``0},System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},System.Data.CommandType,System.Int32)">
            <summary>
            使用<see cref="T:Server.Core.Data.IMapper`1"/>查询指定对象。
            若满足条件的记录不存在，返回目标类型的默认值（对于引用类型为<c>null</c>）。
            </summary>
            <typeparam name="T">查询的目标类型。</typeparam>
            <param name="sql">查询SQL。</param>
            <param name="parameters">参数序列。空序列或null表示没有参数。</param>
            <param name="commandType">命令的类型。</param>
            <param name="timeOut">命令的超时时间，单位毫秒。0为不指定。</param>
            <param name="mapper"><see cref="T:Server.Core.Data.IMapper`1"/>的实例。</param>
            <returns>目标类型的实例。</returns>
        </member>
        <member name="M:Server.Core.Data.IDbClient.ForceGet``1(Server.Core.Data.IMapper{``0},System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},System.Data.CommandType,System.Int32)">
            <summary>
            使用<see cref="T:Server.Core.Data.IMapper`1"/>查询指定对象。
            SQL命中的记录必须为1行，否则抛出异常。
            </summary>
            <typeparam name="T">查询的目标类型。</typeparam>
            <param name="mapper"><see cref="T:Server.Core.Data.IMapper`1"/>的实例。</param>
            <param name="sql">查询SQL。</param>
            <param name="parameters">参数序列。空序列或null表示没有参数。</param>
            <param name="commandType">命令的类型。</param>
            <param name="timeOut">命令的超时时间，单位毫秒。0为不指定。</param>
            <returns>目标类型的实例。</returns>
            <exception cref="T:Server.Core.Data.IncorrectResultSizeException">当SQL命中的记录行数不为 1。</exception>
        </member>
        <member name="M:Server.Core.Data.IDbClient.List``1(Server.Core.Data.IMapper{``0},System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},System.Data.CommandType,System.Int32)">
            <summary>
            使用<see cref="T:Server.Core.Data.IMapper`1"/>查询指定对象的集合。
            </summary>
            <typeparam name="T">查询的目标类型。</typeparam>
            <param name="mapper"><see cref="T:Server.Core.Data.IMapper`1"/>的实例。</param>
            <param name="sql">查询SQL。</param>
            <param name="parameters">参数序列。空序列或null表示没有参数。</param>
            <param name="commandType">命令的类型。</param>
            <param name="timeOut">命令的超时时间，单位毫秒。0为不指定。</param>
            <returns>目标类型的实例的集合。若查询命中的行数为0，返回空集合。</returns>
        </member>
        <member name="M:Server.Core.Data.IDbClient.Rows(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},System.Data.CommandType,System.Int32)">
            <summary>
            获取查询结果得行序列。
            </summary>
            <param name="sql">查询SQL。</param>
            <param name="parameters">参数序列。空序列或null表示没有参数。</param>
            <param name="commandType">命令的类型。</param>
            <param name="timeOut">命令的超时时间，单位毫秒。0为不指定。</param>
            <returns>查询结果得行序列。</returns>
        </member>
        <member name="M:Server.Core.Data.IDbClient.CreateTransaction">
            <summary>
            创建事务容器。
            </summary>
            <returns><see cref="T:Server.Core.Data.ITransactionKeeper"/>。</returns>
        </member>
        <member name="M:Server.Core.Data.IDbClient.CreateParameter">
            <summary>
            创建一个新的SQL参数实例。
            </summary>
            <returns><see cref="T:System.Data.Common.DbParameter"/>的实例。</returns>
        </member>
        <member name="P:Server.Core.Data.IDbClient.ConnectionString">
            <summary>
            获取当前实例所使用的数据库连接字符串。
            </summary>
        </member>
        <member name="M:Server.Core.Data.AbstractDbClient.Scalar(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},System.Data.CommandType,System.Int32)">
            <summary>
            获取查询的第一行第一列的值。
            </summary>
            <param name="sql">查询SQL。</param>
            <param name="parameters">参数序列。空序列或null表示没有参数。</param>
            <param name="commandType">命令的类型。</param>
            <param name="timeOut">命令的超时时间，单位毫秒。0为不指定。</param>
            <returns>查询结果的第一行第一列的值。若查询结果行数为0，返回<c>null</c>。</returns>
            <exception cref="T:System.ArgumentNullException">当<paramref name="sql"/>为<c>null</c>。</exception>
            <exception cref="T:System.ArgumentException">当<paramref name="sql"/>长度为0。</exception>
        </member>
        <member name="M:Server.Core.Data.AbstractDbClient.Execute(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},System.Data.CommandType,System.Int32)">
            <summary>
            执行非查询SQL语句，并断言所影响的行数。若影响的函数不正确，抛出异常。
            </summary>
            <param name="sql">非查询SQL。</param>
            <param name="parameters">参数序列。空序列或null表示没有参数。</param>
            <param name="commandType">命令的类型。</param>
            <param name="timeOut">命令的超时时间，单位毫秒。0为不指定。</param>
            <exception cref="T:Server.Core.Data.IncorrectResultSizeException">当影响的行数不正确。</exception>
        </member>
        <member name="M:Server.Core.Data.AbstractDbClient.SizedExecute(System.Int32,System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},System.Data.CommandType,System.Int32)">
            <summary>
            执行非查询SQL语句，并断言所影响的行数。若影响的函数不正确，抛出异常。
            </summary>
            <param name="expectedSize">被断言的影响行数。</param>
            <param name="sql">非查询SQL。</param>
            <param name="parameters">参数序列。空序列或null表示没有参数。</param>
            <param name="commandType">命令的类型。</param>
            <param name="timeOut">命令的超时时间，单位毫秒。0为不指定。</param>
            <exception cref="T:Server.Core.Data.IncorrectResultSizeException">当影响的行数不正确。</exception>
        </member>
        <member name="M:Server.Core.Data.AbstractDbClient.DataTable(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},System.Data.CommandType,System.Int32)">
            <summary>
            返回查询语句对应查询结果的<see cref="T:System.Data.DataTable"/>。
            </summary>
            <param name="sql">查询SQL。</param>
            <param name="parameters">参数序列。空序列或null表示没有参数。</param>
            <param name="commandType">命令的类型。</param>
            <param name="timeOut">命令的超时时间，单位毫秒。0为不指定。</param>
            <returns>表示查询结果的<see cref="T:System.Data.DataTable"/>。</returns>
            <exception cref="T:System.ArgumentNullException">当<paramref name="sql"/>为<c>null</c>。</exception>
            <exception cref="T:System.ArgumentException">当<paramref name="sql"/>长度为0。</exception>
        </member>
        <member name="M:Server.Core.Data.AbstractDbClient.DataSet(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},System.Data.CommandType,System.Int32)">
            <summary>
            返回查询语句对应查询结果的<see cref="T:System.Data.DataSet"/>。
            </summary>
            <param name="sql">查询SQL。</param>
            <param name="parameters">参数序列。空序列或null表示没有参数。</param>
            <param name="commandType">命令的类型。</param>
            <param name="timeOut">命令的超时时间，单位毫秒。0为不指定。</param>
            <returns>表示查询结果的<see cref="T:System.Data.DataSet"/>。</returns>
            <exception cref="T:System.ArgumentNullException">当<paramref name="sql"/>为<c>null</c>。</exception>
            <exception cref="T:System.ArgumentException">当<paramref name="sql"/>长度为0。</exception>
        </member>
        <member name="M:Server.Core.Data.AbstractDbClient.Exists(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},System.Data.CommandType,System.Int32)">
            <summary>
            判断给定的查询的结果是否至少包含1行。
            </summary>
            <param name="sql">查询SQL。</param>
            <param name="parameters">参数序列。空序列或null表示没有参数。</param>
            <param name="commandType">命令的类型。</param>
            <param name="timeOut">命令的超时时间，单位毫秒。0为不指定。</param>
            <returns>若查询结果至少包含1行，返回<c>true</c>；否则返回<c>false</c>。</returns>
            <exception cref="T:System.ArgumentNullException">当<paramref name="sql"/>为<c>null</c>。</exception>
            <exception cref="T:System.ArgumentException">当<paramref name="sql"/>长度为0。</exception>
        </member>
        <member name="M:Server.Core.Data.AbstractDbClient.GetRow(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},System.Data.CommandType,System.Int32)">
            <summary>
            获取查询结果的第一行记录。
            若查询命中的行数为0，返回null。
            </summary>
            <param name="sql">查询SQL。</param>
            <param name="parameters">参数序列。空序列或null表示没有参数。</param>
            <param name="commandType">命令的类型。</param>
            <param name="timeOut">命令的超时时间，单位毫秒。0为不指定。</param>
            <returns><see cref="T:System.Data.IDataRecord"/>的实现，包含查询的第一行记录。</returns>
            <exception cref="T:System.ArgumentNullException">当<paramref name="sql"/>为<c>null</c>。</exception>
            <exception cref="T:System.ArgumentException">当<paramref name="sql"/>长度为0。</exception>
            <remarks>
            区别于<see cref="M:System.Data.Common.DbCommand.ExecuteReader"/>的用法，此方法执行完毕后将并不保持数据库连接，
            也不需要调用<see cref="M:System.IDisposable.Dispose"/>。
            </remarks>
        </member>
        <member name="M:Server.Core.Data.AbstractDbClient.Get``1(Server.Core.Data.IMapper{``0},System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},System.Data.CommandType,System.Int32)">
            <summary>
            使用<see cref="T:Server.Core.Data.IMapper`1"/>查询指定对象。
            若满足条件的记录不存在，返回目标类型的默认值（对于引用类型为<c>null</c>）。
            </summary>
            <typeparam name="T">查询的目标类型。</typeparam>
            <param name="sql">查询SQL。</param>
            <param name="parameters">参数序列。空序列或null表示没有参数。</param>
            <param name="commandType">命令的类型。</param>
            <param name="timeOut">命令的超时时间，单位毫秒。0为不指定。</param>
            <param name="mapper"><see cref="T:Server.Core.Data.IMapper`1"/>的实例。</param>
            <returns>目标类型的实例。</returns>
        </member>
        <member name="M:Server.Core.Data.AbstractDbClient.ForceGet``1(Server.Core.Data.IMapper{``0},System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},System.Data.CommandType,System.Int32)">
            <summary>
            使用<see cref="T:Server.Core.Data.IMapper`1"/>查询指定对象。
            SQL命中的记录必须为1行，否则抛出异常。
            </summary>
            <typeparam name="T">查询的目标类型。</typeparam>
            <param name="mapper"><see cref="T:Server.Core.Data.IMapper`1"/>的实例。</param>
            <param name="sql">查询SQL。</param>
            <param name="parameters">参数序列。空序列或null表示没有参数。</param>
            <param name="commandType">命令的类型。</param>
            <param name="timeOut">命令的超时时间，单位毫秒。0为不指定。</param>
            <returns>目标类型的实例。</returns>
            <exception cref="T:Server.Core.Data.IncorrectResultSizeException">当SQL命中的记录行数不为 1。</exception>
        </member>
        <member name="M:Server.Core.Data.AbstractDbClient.List``1(Server.Core.Data.IMapper{``0},System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},System.Data.CommandType,System.Int32)">
            <summary>
            使用<see cref="T:Server.Core.Data.IMapper`1"/>查询指定对象的集合。
            </summary>
            <typeparam name="T">查询的目标类型。</typeparam>
            <param name="mapper"><see cref="T:Server.Core.Data.IMapper`1"/>的实例。</param>
            <param name="sql">查询SQL。</param>
            <param name="parameters">参数序列。空序列或null表示没有参数。</param>
            <param name="commandType">命令的类型。</param>
            <param name="timeOut">命令的超时时间，单位毫秒。0为不指定。</param>
            <returns>目标类型的实例的集合。若查询命中的行数为0，返回空集合。</returns>
        </member>
        <member name="M:Server.Core.Data.AbstractDbClient.Rows(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},System.Data.CommandType,System.Int32)">
            <summary>
            获取查询结果得行序列。
            </summary>
            <param name="sql">查询SQL。</param>
            <param name="parameters">参数序列。空序列或null表示没有参数。</param>
            <param name="commandType">命令的类型。</param>
            <param name="timeOut">命令的超时时间，单位毫秒。0为不指定。</param>
            <returns>查询结果得行序列。</returns>
        </member>
        <member name="M:Server.Core.Data.AbstractDbClient.CreateTransaction">
            <summary>
            创建事务容器。
            </summary>
            <returns><see cref="T:Server.Core.Data.ITransactionKeeper"/>。</returns>
        </member>
        <member name="M:Server.Core.Data.AbstractDbClient.CreateParameter">
            <summary>
            创建一个新的SQL参数实例。
            </summary>
            <returns><see cref="T:System.Data.Common.DbParameter"/>的实例。</returns>
        </member>
        <member name="M:Server.Core.Data.AbstractDbClient.CreateConnection">
            <summary>
            创建数据库连接的实例。
            在各<see cref="T:Server.Core.Data.IDbClient"/>方法中使用此方法获取连接的实例。
            重写此方法以控制连接创建的行为。
            </summary>
            <returns>数据库连接的实例。</returns>
        </member>
        <member name="M:Server.Core.Data.AbstractDbClient.CreateCommand(System.String,System.Data.Common.DbConnection,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},System.Data.CommandType,System.Int32)">
            <summary>
            从指定的数据库连接上创建<see cref="T:System.Data.Common.DbCommand"/>对象。
            在各<see cref="T:Server.Core.Data.IDbClient"/>方法中使用此方法获取<see cref="T:System.Data.Common.DbCommand"/>对象。
            </summary>
            <param name="commandText">执行的脚本。</param>
            <param name="connection">数据库连接。</param>
            <param name="parameters">数据库参数的序列。</param>
            <param name="commandType">命令的类型。</param>
            <param name="timeOut">命令的超时时间，单位毫秒。0为不指定。</param>
            <returns><see cref="T:System.Data.Common.DbCommand"/>的实例。</returns>
        </member>
        <member name="M:Server.Core.Data.AbstractDbClient.OpenConnection(System.Data.Common.DbConnection)">
            <summary>
            打开指定的数据库连接。
            此方法在各<see cref="T:Server.Core.Data.IDbClient"/>方法中的命令执行前被调用，重写此方法以控制其行为。
            </summary>
            <param name="connection">数据库连接。</param>
        </member>
        <member name="M:Server.Core.Data.AbstractDbClient.CloseConnection(System.Data.Common.DbConnection)">
            <summary>
            关闭指定的数据库连接。
            此方法在各<see cref="T:Server.Core.Data.IDbClient"/>方法中的命令执行后被调用，重写此方法以控制其行为。
            </summary>
            <param name="connection">数据库连接。</param>
        </member>
        <member name="P:Server.Core.Data.AbstractDbClient.ConnectionString">
            <summary>
            获取当前实例所使用的数据库连接字符串。
            </summary>
        </member>
        <member name="P:Server.Core.Data.AbstractDbClient.Factory">
            <summary>
            获取当前实例所使用的<see cref="T:System.Data.Common.DbProviderFactory"/>实例。
            </summary>
        </member>
        <member name="T:Server.Core.Data.DataExpiredException">
            <summary>
            表示数据过期的错误。
            </summary>
        </member>
        <member name="M:Server.Core.Data.DataExpiredException.#ctor">
            <summary>
            初始化类型的新实例。使用默认的异常提示信息。
            </summary>
        </member>
        <member name="M:Server.Core.Data.DataExpiredException.#ctor(System.Exception)">
            <summary>
            使用指定的内部异常初始化类新的哦新实例。使用默认的异常提示信息。
            </summary>
            <param name="innerException">内部异常的实例。</param>
        </member>
        <member name="T:Server.Core.Data.DataRowRecord">
            <summary>
            提供<see cref="T:System.Data.DataRow"/>到<see cref="T:System.Data.IDataRecord"/>的转换适配。
            </summary>
        </member>
        <member name="M:Server.Core.Data.DataRowRecord.#ctor(System.Data.DataRow)">
            <summary>
            初始化类型的新实例。
            </summary>
            <param name="dataRow">作为数据源的<see cref="T:System.Data.DataRow"/>。</param>
        </member>
        <member name="T:Server.Core.Data.DbClientParamEx">
            <summary>
            包含从<see cref="T:Server.Core.Data.IDbClient"/>创建<see cref="T:System.Data.Common.DbParameter"/>的有关扩展方法。
            </summary>
        </member>
        <member name="M:Server.Core.Data.DbClientParamEx.CreateParameter(Server.Core.Data.IDbClient,System.String,System.Data.DbType,System.Object,System.Int32,System.Data.ParameterDirection)">
            <summary>
            创建一个SQL参数实例，并指定参数的有关信息。
            </summary>
            <param name="client"><see cref="T:Server.Core.Data.IDbClient"/>的实例。</param>
            <param name="name">参数的名称。</param>
            <param name="dbType">参数的数据类型。</param>
            <param name="value">参数的值。</param>
            <param name="size">参数的大小。</param>
            <param name="direction">参数的输入、输出类型。</param>
            <returns><see cref="T:System.Data.Common.DbParameter"/>的实例。</returns>
        </member>
        <member name="M:Server.Core.Data.DbClientParamEx.CreateParameter(Server.Core.Data.IDbClient,System.String,System.Object)">
            <summary>
            创建一个SQL参数实例。SQL参数的类型由参数的值决定。
            </summary>
            <param name="client"><see cref="T:Server.Core.Data.IDbClient"/>的实例。</param>
            <param name="name">参数的名称。</param>
            <param name="value">参数的值。</param>
            <returns><see cref="T:System.Data.Common.DbParameter"/>的实例。</returns>
        </member>
        <member name="T:Server.Core.Data.DbClientWrapper">
            <summary>
            提供<see cref="T:Server.Core.Data.IDbClient"/>的封装。
            可继承此类型并重写其中的方法以便定制<see cref="T:Server.Core.Data.IDbClient"/>的行为。
            </summary>
        </member>
        <member name="M:Server.Core.Data.DbClientWrapper.#ctor(Server.Core.Data.IDbClient)">
            <summary>
            初始化类型的新实例，并指定被封装的<see cref="T:Server.Core.Data.IDbClient"/>实例。
            </summary>
            <param name="internalClient"><see cref="T:Server.Core.Data.IDbClient"/>实例。</param>
        </member>
        <member name="T:Server.Core.Data.Dynamic.AnonymousObjectMapper`1">
            <summary>
            A mapper that maps data from a <see cref="T:System.Data.IDataRecord"/> to
            anonymouse objects with the specified type.
            </summary>
            <typeparam name="T">The type which the data is mapped to.</typeparam>
        </member>
        <member name="T:Server.Core.Data.IMapper`1">
            <summary>
            定义<see cref="T:System.Data.IDataRecord"/>到指定类型的映射。
            </summary>
            <typeparam name="T">目标类型。</typeparam>
        </member>
        <member name="M:Server.Core.Data.IMapper`1.MapRow(System.Data.IDataRecord,System.Int32)">
            <summary>
            从<see cref="T:System.Data.IDataRecord"/>获取目标类型的数据。
            </summary>
            <param name="record"><see cref="T:System.Data.IDataRecord"/>的实例。</param>
            <param name="rowNum"><see cref="T:System.Data.IDataRecord"/>所在的行号。</param>
            <returns>目标类型。</returns>
        </member>
        <member name="M:Server.Core.Data.Dynamic.AnonymousObjectMapper`1.#ctor(System.Data.IDataRecord)">
            <summary>
            Initialize a new instance of <see cref="T:Server.Core.Data.Dynamic.AnonymousObjectMapper`1"/> with
            the specified <see cref="T:System.Data.IDataRecord"/>.
            </summary>
            <param name="template">The template for the mapping.</param>
        </member>
        <member name="T:Server.Core.Data.Dynamic.CommandCache">
            <summary>
            Caches the infomation for commands to run.
            </summary>
        </member>
        <member name="M:Server.Core.Data.Dynamic.CommandCache.Get(Server.Core.Data.Dynamic.CommandIdentity)">
            <summary>
            Gets the <see cref="T:Server.Core.Data.Dynamic.CommandCacheItem"/> from the cache.
            Returns <c>null</c> if the corresbonding item does not exist.
            </summary>
            <param name="identity">The identity for retrieving the cache.</param>
            <returns>The <see cref="T:Server.Core.Data.Dynamic.CommandCacheItem"/> or <c>null</c>.</returns>
        </member>
        <member name="M:Server.Core.Data.Dynamic.CommandCache.Set(Server.Core.Data.Dynamic.CommandIdentity,Server.Core.Data.Dynamic.CommandCacheItem)">
            <summary>
            Sets the <see cref="T:Server.Core.Data.Dynamic.CommandCacheItem"/> in the cache.
            </summary>
            <param name="identity">The identity for retrieving the cache.</param>
            <param name="cacheItem">The <see cref="T:Server.Core.Data.Dynamic.CommandCacheItem"/> to set.</param>
        </member>
        <member name="T:Server.Core.Data.Dynamic.CommandCacheItem">
            <summary>
            Keeps the information for a <see cref="T:System.Data.Common.DbCommand"/> to be executed.
            </summary>
        </member>
        <member name="F:Server.Core.Data.Dynamic.CommandCacheItem.Sql">
            <summary>
            The command text.
            </summary>
        </member>
        <member name="F:Server.Core.Data.Dynamic.CommandCacheItem.Params">
            <summary>
            A function returns a series of <see cref="T:System.Data.Common.DbParameter"/>.
            The function accepts an instance of <see cref="T:Server.Core.Data.IDbClient"/> as the first parameter,
            the sencond is an object which keeps the values of parameters for the <see cref="T:System.Data.Common.DbCommand"/>.
            </summary>
        </member>
        <member name="F:Server.Core.Data.Dynamic.CommandCacheItem.Mapper">
            <summary>
            The instance of <see cref="T:Server.Core.Data.IMapper`1"/>.
            </summary>
        </member>
        <member name="F:Server.Core.Data.Dynamic.CommandCacheItem.Reused">
            <summary>
            A counter specifies how many times this cahce item is reused.
            </summary>
        </member>
        <member name="T:Server.Core.Data.Dynamic.CommandIdentity">
            <summary>
            Identity of a cached command.
            </summary>
        </member>
        <member name="T:Server.Core.Data.Dynamic.DataTableConvert">
            <summary>
            包含将<see cref="T:System.Data.DataTable"/>的行映射到指定对象的有关方法。
            </summary>
        </member>
        <member name="M:Server.Core.Data.Dynamic.DataTableConvert.To``1(System.Data.DataTable)">
            <summary>
            从给定的<see cref="T:System.Data.DataTable"/>的行创建特定类型的对象的集合。
            </summary>
            <typeparam name="T">目标类型。</typeparam>
            <param name="dataTable"><see cref="T:System.Data.DataTable"/>的实例。</param>
            <returns>对象的集合。</returns>
        </member>
        <member name="T:Server.Core.Data.Dynamic.DbTypeConvert">
            <summary>
            Provides methods for converting CLR types to DbTypes.
            </summary>
        </member>
        <member name="F:Server.Core.Data.Dynamic.DbTypeConvert.NotSupporteDbType">
            <summary>
            A special value represents that a CLR type has no corresponding <see cref="T:System.Data.DbType"/>.
            </summary>
        </member>
        <member name="M:Server.Core.Data.Dynamic.DbTypeConvert.LookupDbType(System.Type)">
            <summary>
            Get the corresponding <see cref="T:System.Data.DbType"/> of the specified CLR type.
            </summary>
            <param name="type">The CLR type.</param>
            <returns>The <see cref="T:System.Data.DbType"/>.</returns>
        </member>
        <member name="T:Server.Core.Data.Dynamic.MapperParser">
            <summary>
            Provides methods for creating <see cref="T:Server.Core.Data.IMapper`1"/>s from a template.
            </summary>
        </member>
        <member name="T:Server.Core.Data.Dynamic.ObjectiveExtension">
            <summary>
            提供<see cref="T:Server.Core.Data.IDbClient"/>的扩展方法，这些方法可以将CLR对象用于SQL传参。
            </summary>
        </member>
        <member name="M:Server.Core.Data.Dynamic.ObjectiveExtension.Scalar(Server.Core.Data.IDbClient,System.String,System.Object,System.Data.CommandType,System.Int32)">
            <summary>
            获取查询的第一行第一列的值。
            </summary>
            <param name="client"><see cref="T:Server.Core.Data.IDbClient"/>的实例。</param>
            <param name="sql">SQL语句。</param>
            <param name="param">记录SQL参数的对象。</param>
            <param name="commandType">命令的类型。</param>
            <param name="timeOut">命令的超时时间，单位毫秒。0为不指定。</param>
            <returns>查询结果的第一行第一列的值。若查询结果行数为0，返回<c>null</c>。</returns>
        </member>
        <member name="M:Server.Core.Data.Dynamic.ObjectiveExtension.Execute(Server.Core.Data.IDbClient,System.String,System.Object,System.Data.CommandType,System.Int32)">
            <summary>
            执行非查询SQL语句，并返回所影响的行数。
            </summary>
            <param name="client"><see cref="T:Server.Core.Data.IDbClient"/>的实例。</param>
            <param name="sql">SQL语句。</param>
            <param name="param">记录SQL参数的对象。</param>
            <param name="commandType">命令的类型。</param>
            <param name="timeOut">命令的超时时间，单位毫秒。0为不指定。</param>
            <returns>SQL所影响的行数。</returns>
        </member>
        <member name="M:Server.Core.Data.Dynamic.ObjectiveExtension.SizedExecute(Server.Core.Data.IDbClient,System.Int32,System.String,System.Object,System.Data.CommandType,System.Int32)">
            <summary>
            执行非查询SQL语句，并断言所影响的行数。若影响的函数不正确，抛出异常。
            </summary>
            <param name="client"><see cref="T:Server.Core.Data.IDbClient"/>的实例。</param>
            <param name="expectedSize">被断言的影响行数。</param>
            <param name="sql">SQL语句。</param>
            <param name="param">记录SQL参数的对象。</param>
            <param name="commandType">命令的类型。</param>
            <param name="timeOut">命令的超时时间，单位毫秒。0为不指定。</param>
            <exception cref="T:Server.Core.Data.IncorrectResultSizeException">当影响的行数不正确。</exception>
        </member>
        <member name="M:Server.Core.Data.Dynamic.ObjectiveExtension.DataTable(Server.Core.Data.IDbClient,System.String,System.Object,System.Data.CommandType,System.Int32)">
            <summary>
            返回查询语句对应查询结果的<see cref="T:System.Data.DataTable"/>。
            </summary>
            <param name="client"><see cref="T:Server.Core.Data.IDbClient"/>的实例。</param>
            <param name="sql">SQL语句。</param>
            <param name="param">记录SQL参数的对象。</param>
            <param name="commandType">命令的类型。</param>
            <param name="timeOut">命令的超时时间，单位毫秒。0为不指定。</param>
            <returns>表示查询结果的<see cref="T:System.Data.DataTable"/>。</returns>
        </member>
        <member name="M:Server.Core.Data.Dynamic.ObjectiveExtension.DataSet(Server.Core.Data.IDbClient,System.String,System.Object,System.Data.CommandType,System.Int32)">
            <summary>
            返回查询语句对应查询结果的<see cref="T:System.Data.DataSet"/>。
            </summary>
            <param name="client"><see cref="T:Server.Core.Data.IDbClient"/>的实例。</param>
            <param name="sql">SQL语句。</param>
            <param name="param">记录SQL参数的对象。</param>
            <param name="commandType">命令的类型。</param>
            <param name="timeOut">命令的超时时间，单位毫秒。0为不指定。</param>
            <returns>表示查询结果的<see cref="T:System.Data.DataTable"/>。</returns>
        </member>
        <member name="M:Server.Core.Data.Dynamic.ObjectiveExtension.Exists(Server.Core.Data.IDbClient,System.String,System.Object,System.Data.CommandType,System.Int32)">
            <summary>
            判断给定的查询的结果是否至少包含1行。
            </summary>
            <param name="client"><see cref="T:Server.Core.Data.IDbClient"/>的实例。</param>
            <param name="sql">SQL语句。</param>
            <param name="param">记录SQL参数的对象。</param>
            <param name="commandType">命令的类型。</param>
            <param name="timeOut">命令的超时时间，单位毫秒。0为不指定。</param>
            <returns>若查询结果至少包含1行，返回<c>true</c>；否则返回<c>false</c>。</returns>
        </member>
        <member name="M:Server.Core.Data.Dynamic.ObjectiveExtension.GetRow(Server.Core.Data.IDbClient,System.String,System.Object,System.Data.CommandType,System.Int32)">
            <summary>
            获取查询结果的第一行记录。
            若查询命中的行数为0，返回null。
            </summary>
            <param name="client"><see cref="T:Server.Core.Data.IDbClient"/>的实例。</param>
            <param name="sql">SQL语句。</param>
            <param name="param">记录SQL参数的对象。</param>
            <param name="commandType">命令的类型。</param>
            <param name="timeOut">命令的超时时间，单位毫秒。0为不指定。</param>
            <returns><see cref="T:System.Data.IDataRecord"/>的实现，包含查询的第一行记录。</returns>
        </member>
        <member name="M:Server.Core.Data.Dynamic.ObjectiveExtension.Get``1(Server.Core.Data.IDbClient,Server.Core.Data.IMapper{``0},System.String,System.Object,System.Data.CommandType,System.Int32)">
            <summary>
            使用<see cref="T:Server.Core.Data.IMapper`1"/>查询指定对象。
            若满足条件的记录不存在，返回目标类型的默认值（对于引用类型为<c>null</c>）。
            </summary>
            <typeparam name="T">查询的目标类型。</typeparam>
            <param name="client"><see cref="T:Server.Core.Data.IDbClient"/>的实例。</param>
            <param name="sql">SQL语句。</param>
            <param name="param">记录SQL参数的对象。</param>
            <param name="mapper"><see cref="T:Server.Core.Data.IMapper`1"/>的实例。</param>
            <param name="commandType">命令的类型。</param>
            <param name="timeOut">命令的超时时间，单位毫秒。0为不指定。</param>
            <returns>目标类型的实例。</returns>
        </member>
        <member name="M:Server.Core.Data.Dynamic.ObjectiveExtension.ForceGet``1(Server.Core.Data.IDbClient,Server.Core.Data.IMapper{``0},System.String,System.Object,System.Data.CommandType,System.Int32)">
            <summary>
            使用<see cref="T:Server.Core.Data.IMapper`1"/>查询指定对象。
            SQL命中的记录必须为1行，否则抛出异常。
            </summary>
            <typeparam name="T">查询的目标类型。</typeparam>
            <param name="client"><see cref="T:Server.Core.Data.IDbClient"/>的实例。</param>
            <param name="mapper"><see cref="T:Server.Core.Data.IMapper`1"/>的实例。</param>
            <param name="sql">SQL语句。</param>
            <param name="param">记录SQL参数的对象。</param>
            <param name="commandType">命令的类型。</param>
            <param name="timeOut">命令的超时时间，单位毫秒。0为不指定。</param>
            <returns>目标类型的实例。</returns>
            <exception cref="T:Server.Core.Data.IncorrectResultSizeException">当SQL命中的记录行数不为 1。</exception>
        </member>
        <member name="M:Server.Core.Data.Dynamic.ObjectiveExtension.List``1(Server.Core.Data.IDbClient,Server.Core.Data.IMapper{``0},System.String,System.Object,System.Data.CommandType,System.Int32)">
            <summary>
            使用<see cref="T:Server.Core.Data.IMapper`1"/>查询指定对象的集合。
            </summary>
            <typeparam name="T">查询的目标类型。</typeparam>
            <param name="client"><see cref="T:Server.Core.Data.IDbClient"/>的实例。</param>
            <param name="mapper"><see cref="T:Server.Core.Data.IMapper`1"/>的实例。</param>
            <param name="sql">SQL语句。</param>
            <param name="param">记录SQL参数的对象。</param>
            <param name="commandType">命令的类型。</param>
            <param name="timeOut">命令的超时时间，单位毫秒。0为不指定。</param>
            <returns>目标类型的实例的集合。若查询命中的行数为0，返回空集合。</returns>
        </member>
        <member name="M:Server.Core.Data.Dynamic.ObjectiveExtension.Rows(Server.Core.Data.IDbClient,System.String,System.Object,System.Data.CommandType,System.Int32)">
            <summary>
            获取查询结果得行序列。
            </summary>
            <param name="client"><see cref="T:Server.Core.Data.IDbClient"/>的实例。</param>
            <param name="sql">SQL语句。</param>
            <param name="param">记录SQL参数的对象。</param>
            <param name="commandType">命令的类型。</param>
            <param name="timeOut">命令的超时时间，单位毫秒。0为不指定。</param>
            <returns>查询结果得行序列。</returns>
        </member>
        <member name="M:Server.Core.Data.Dynamic.ObjectiveExtension.Get``1(Server.Core.Data.IDbClient,System.String,System.Object,System.Data.CommandType,System.Int32)">
            <summary>
            查询并根据结果创建目标类型的实例。
            若满足条件的记录不存在，返回目标类型的默认值（对于引用类型为<c>null</c>）。
            </summary>
            <typeparam name="T">查询的目标类型。</typeparam>
            <param name="client"><see cref="T:Server.Core.Data.IDbClient"/>的实例。</param>
            <param name="sql">SQL语句。</param>
            <param name="param">记录SQL参数的对象。</param>
            <param name="commandType">命令的类型。</param>
            <param name="timeOut">命令的超时时间，单位毫秒。0为不指定。</param>
            <returns>目标类型的实例。</returns>
        </member>
        <member name="M:Server.Core.Data.Dynamic.ObjectiveExtension.ForceGet``1(Server.Core.Data.IDbClient,System.String,System.Object,System.Data.CommandType,System.Int32)">
            <summary>
            查询并根据结果创建目标类型的实例。
            SQL命中的记录必须为1行，否则抛出异常。
            </summary>
            <typeparam name="T">查询的目标类型。</typeparam>
            <param name="client"><see cref="T:Server.Core.Data.IDbClient"/>的实例。</param>
            <param name="sql">SQL语句。</param>
            <param name="param">记录SQL参数的对象。</param>
            <param name="commandType">命令的类型。</param>
            <param name="timeOut">命令的超时时间，单位毫秒。0为不指定。</param>
            <returns>目标类型的实例。</returns>
            <exception cref="T:Server.Core.Data.IncorrectResultSizeException">当SQL命中的记录行数不为 1。</exception>
        </member>
        <member name="M:Server.Core.Data.Dynamic.ObjectiveExtension.TemplateList``1(Server.Core.Data.IDbClient,``0,System.String,System.Object,System.Data.CommandType,System.Int32)">
            <summary>
            查询并根据结果返回目标类型的实例集合，由一个模板对象指定目标类型。
            </summary>
            <typeparam name="T">查询的目标类型。</typeparam>
            <param name="client"><see cref="T:Server.Core.Data.IDbClient"/>的实例。</param>
            <param name="template">用于指定目标类型的模板对象。</param>
            <param name="sql">SQL语句。</param>
            <param name="param">记录SQL参数的对象。</param>
            <param name="commandType">命令的类型。</param>
            <param name="timeOut">命令的超时时间，单位毫秒。0为不指定。</param>
            <returns>目标类型的实例集合。</returns>
        </member>
        <member name="M:Server.Core.Data.Dynamic.ObjectiveExtension.List``1(Server.Core.Data.IDbClient,System.String,System.Object,System.Data.CommandType,System.Int32)">
            <summary>
            查询并根据结果返回目标类型的实例集合。
            </summary>
            <typeparam name="T">查询的目标类型。</typeparam>
            <param name="client"><see cref="T:Server.Core.Data.IDbClient"/>的实例。</param>
            <param name="sql">SQL语句。</param>
            <param name="param">记录SQL参数的对象。</param>
            <param name="commandType">命令的类型。</param>
            <param name="timeOut">命令的超时时间，单位毫秒。0为不指定。</param>
            <returns>目标类型的实例集合。</returns>
        </member>
        <member name="M:Server.Core.Data.Dynamic.ObjectiveExtension.TemplateQuery``1(Server.Core.Data.IDbClient,``0,System.String,System.Object,System.Data.CommandType,System.Int32)">
            <summary>
            查询并根据结果返回目标类型的实例序列，由一个模板对象指定目标类型。
            </summary>
            <typeparam name="T">查询的目标类型。</typeparam>
            <param name="client"><see cref="T:Server.Core.Data.IDbClient"/>的实例。</param>
            <param name="template">用于指定目标类型的模板对象。</param>
            <param name="sql">SQL语句。</param>
            <param name="param">记录SQL参数的对象。</param>
            <param name="commandType">命令的类型。</param>
            <param name="timeOut">命令的超时时间，单位毫秒。0为不指定。</param>
            <returns>目标类型的实例序列。</returns>
        </member>
        <member name="M:Server.Core.Data.Dynamic.ObjectiveExtension.Query``1(Server.Core.Data.IDbClient,System.String,System.Object,System.Data.CommandType,System.Int32)">
            <summary>
            查询并根据结果返回目标类型的实例序列。
            </summary>
            <typeparam name="T">查询的目标类型。</typeparam>
            <param name="client"><see cref="T:Server.Core.Data.IDbClient"/>的实例。</param>
            <param name="sql">SQL语句。</param>
            <param name="param">记录SQL参数的对象。</param>
            <param name="commandType">命令的类型。</param>
            <param name="timeOut">命令的超时时间，单位毫秒。0为不指定。</param>
            <returns>目标类型的实例序列。</returns>
        </member>
        <member name="T:Server.Core.Data.Dynamic.ObjectMapper`1">
            <summary>
            A mapper that maps data from a <see cref="T:System.Data.IDataRecord"/> to
            the specified type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type which the data is mapped to.</typeparam>
        </member>
        <member name="M:Server.Core.Data.Dynamic.ObjectMapper`1.#ctor(System.Data.IDataRecord)">
            <summary>
            Initialize a new instance of <see cref="T:Server.Core.Data.Dynamic.ObjectMapper`1"/> with
            the specified <see cref="T:System.Data.IDataRecord"/>.
            </summary>
            <param name="template">
            The template for the mapping. The value setters will be initialized
            according to the template.
            </param>
        </member>
        <member name="T:Server.Core.Data.IncorrectResultSizeException">
            <summary>
            表示数据库操作所影响的行数不正确的异常。
            </summary>
        </member>
        <member name="T:Server.Core.Data.SqlExecutingException">
            <summary>
            表示SQL命令执行过程中的错误。
            </summary>
        </member>
        <member name="M:Server.Core.Data.SqlExecutingException.#ctor(System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},System.Exception)">
            <summary>
            初始化<see cref="T:Server.Core.Data.SqlExecutingException"/>的新实例。
            </summary>
            <param name="commandText">执行的SQL语句。</param>
            <param name="commandType">SQL命令类型。</param>
            <param name="parameters">参数表。</param>
            <param name="innerException">指定引起此错误的异常。</param>
        </member>
        <member name="M:Server.Core.Data.SqlExecutingException.#ctor(System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},System.String,System.Exception)">
            <summary>
            初始化<see cref="T:Server.Core.Data.SqlExecutingException"/>的新实例。
            </summary>
            <param name="commandText">执行的SQL语句。</param>
            <param name="commandType">SQL命令类型。</param>
            <param name="parameters">参数表。</param>
            <param name="message">此错误的描述信息。</param>
            <param name="innerException">指定引起此错误的异常。</param>
        </member>
        <member name="P:Server.Core.Data.SqlExecutingException.CommandText">
            <summary>
            获取出现错误的SQL命令文本。
            </summary>
        </member>
        <member name="P:Server.Core.Data.SqlExecutingException.CommandType">
            <summary>
            获取SQL命令的执行类型。
            </summary>
        </member>
        <member name="P:Server.Core.Data.SqlExecutingException.Parameters">
            <summary>
            获取SQL命令的参数集合。
            </summary>
        </member>
        <member name="M:Server.Core.Data.IncorrectResultSizeException.#ctor(System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},System.Int32,System.Int32)">
            <summary>
            初始化<see cref="T:Server.Core.Data.IncorrectResultSizeException"/>的新实例。
            </summary>
            <param name="commandText">引起错误的SQL命令文本。</param>
            <param name="commandType">SQL命令的执行类型。</param>
            <param name="parameters">SQL命令的参数序列。</param>
            <param name="expectedSize">数据库操作应该影响的行数。</param>
            <param name="actualSize">数据库操作实际影响的行数。</param>
        </member>
        <member name="P:Server.Core.Data.IncorrectResultSizeException.ExpectedSize">
            <summary>
            数据库操作应该影响的行数。
            </summary>
        </member>
        <member name="P:Server.Core.Data.IncorrectResultSizeException.ActualSize">
            <summary>
            数据库操作实际影响的行数。
            </summary>
        </member>
        <member name="T:Server.Core.Data.Indexing.IndexingExtension">
            <summary>
            提供<see cref="T:Server.Core.Data.IDbClient"/>的扩展方法，这些方法允许使用基于索引的SQL参数表以简化编码过程。
            </summary>
            <remarks>
            这些扩展方法允许SQL中使用类似@n的形式指定参数：
            <code>sql = "SELECT id FROM table WHERE name=@0 AND city=@1 AND age&gt;@2";</code>
            其中n对应参数表param中的索引位置为n的值。
            <example><code>client.Scalar(sql, "John Doe", "New York", 35);</code></example>
            * 参数本身也可以是<see cref="T:System.Data.Common.DbParameter"/>的实例，此时参数会被直接使用。
            * 这些方法默认<see cref="T:System.Data.CommandType"/>为<see cref="F:System.Data.CommandType.Text"/>，
            若需要执行存储过程，需要使用类似如下的方式：
            <code>sql = "EXEC proc @0, @1, @2";</code>
            </remarks>
        </member>
        <member name="M:Server.Core.Data.Indexing.IndexingExtension.Scalar(Server.Core.Data.IDbClient,System.String,System.Object[])">
            <summary>
            获取查询的第一行第一列的值。
            </summary>
            <param name="client"><see cref="T:Server.Core.Data.IDbClient"/>的实例。</param>
            <param name="sql">SQL语句。</param>
            <param name="param">参数表。</param>
            <returns>查询结果的第一行第一列的值。若查询结果行数为0，返回<c>null</c>。</returns>
        </member>
        <member name="M:Server.Core.Data.Indexing.IndexingExtension.Execute(Server.Core.Data.IDbClient,System.String,System.Object[])">
            <summary>
            执行非查询SQL语句，并返回所影响的行数。
            </summary>
            <param name="client"><see cref="T:Server.Core.Data.IDbClient"/>的实例。</param>
            <param name="sql">SQL语句。</param>
            <param name="param">参数表。</param>
            <returns>SQL所影响的行数。</returns>
        </member>
        <member name="M:Server.Core.Data.Indexing.IndexingExtension.SizedExecute(Server.Core.Data.IDbClient,System.Int32,System.String,System.Object[])">
            <summary>
            执行非查询SQL语句，并断言所影响的行数。若影响的函数不正确，抛出异常。
            </summary>
            <param name="client"><see cref="T:Server.Core.Data.IDbClient"/>的实例。</param>
            <param name="expectedSize">被断言的影响行数。</param>
            <param name="sql">SQL语句。</param>
            <param name="param">参数表。</param>
            <exception cref="T:Server.Core.Data.IncorrectResultSizeException">当影响的行数不正确。</exception>
        </member>
        <member name="M:Server.Core.Data.Indexing.IndexingExtension.DataTable(Server.Core.Data.IDbClient,System.String,System.Object[])">
            <summary>
            返回查询语句对应查询结果的<see cref="T:System.Data.DataTable"/>。
            </summary>
            <param name="client"><see cref="T:Server.Core.Data.IDbClient"/>的实例。</param>
            <param name="sql">SQL语句。</param>
            <param name="param">参数表。</param>
            <returns>表示查询结果的<see cref="T:System.Data.DataTable"/>。</returns>
        </member>
        <member name="M:Server.Core.Data.Indexing.IndexingExtension.DataSet(Server.Core.Data.IDbClient,System.String,System.Object[])">
            <summary>
            返回查询语句对应查询结果的<see cref="T:System.Data.DataSet"/>。
            </summary>
            <param name="client"><see cref="T:Server.Core.Data.IDbClient"/>的实例。</param>
            <param name="sql">SQL语句。</param>
            <param name="param">参数表。</param>
            <returns>表示查询结果的<see cref="T:System.Data.DataTable"/>。</returns>
        </member>
        <member name="M:Server.Core.Data.Indexing.IndexingExtension.Exists(Server.Core.Data.IDbClient,System.String,System.Object[])">
            <summary>
            判断给定的查询的结果是否至少包含1行。
            </summary>
            <param name="client"><see cref="T:Server.Core.Data.IDbClient"/>的实例。</param>
            <param name="sql">SQL语句。</param>
            <param name="param">参数表。</param>
            <returns>若查询结果至少包含1行，返回<c>true</c>；否则返回<c>false</c>。</returns>
        </member>
        <member name="M:Server.Core.Data.Indexing.IndexingExtension.GetRow(Server.Core.Data.IDbClient,System.String,System.Object[])">
            <summary>
            获取查询结果的第一行记录。
            若查询命中的行数为0，返回null。
            </summary>
            <param name="client"><see cref="T:Server.Core.Data.IDbClient"/>的实例。</param>
            <param name="sql">SQL语句。</param>
            <param name="param">参数表。</param>
            <returns><see cref="T:System.Data.IDataRecord"/>的实现，包含查询的第一行记录。</returns>
        </member>
        <member name="M:Server.Core.Data.Indexing.IndexingExtension.Get``1(Server.Core.Data.IDbClient,Server.Core.Data.IMapper{``0},System.String,System.Object[])">
            <summary>
            使用<see cref="T:Server.Core.Data.IMapper`1"/>查询指定对象。
            若满足条件的记录不存在，返回目标类型的默认值（对于引用类型为<c>null</c>）。
            </summary>
            <typeparam name="T">查询的目标类型。</typeparam>
            <param name="client"><see cref="T:Server.Core.Data.IDbClient"/>的实例。</param>
            <param name="sql">SQL语句。</param>
            <param name="param">参数表。</param>
            <param name="mapper"><see cref="T:Server.Core.Data.IMapper`1"/>的实例。</param>
            <returns>目标类型的实例。</returns>
        </member>
        <member name="M:Server.Core.Data.Indexing.IndexingExtension.ForceGet``1(Server.Core.Data.IDbClient,Server.Core.Data.IMapper{``0},System.String,System.Object[])">
            <summary>
            使用<see cref="T:Server.Core.Data.IMapper`1"/>查询指定对象。
            SQL命中的记录必须为1行，否则抛出异常。
            </summary>
            <typeparam name="T">查询的目标类型。</typeparam>
            <param name="client"><see cref="T:Server.Core.Data.IDbClient"/>的实例。</param>
            <param name="mapper"><see cref="T:Server.Core.Data.IMapper`1"/>的实例。</param>
            <param name="sql">SQL语句。</param>
            <param name="param">参数表。</param>
            <returns>目标类型的实例。</returns>
            <exception cref="T:Server.Core.Data.IncorrectResultSizeException">当SQL命中的记录行数不为 1。</exception>
        </member>
        <member name="M:Server.Core.Data.Indexing.IndexingExtension.List``1(Server.Core.Data.IDbClient,Server.Core.Data.IMapper{``0},System.String,System.Object[])">
            <summary>
            使用<see cref="T:Server.Core.Data.IMapper`1"/>查询指定对象的集合。
            </summary>
            <typeparam name="T">查询的目标类型。</typeparam>
            <param name="client"><see cref="T:Server.Core.Data.IDbClient"/>的实例。</param>
            <param name="mapper"><see cref="T:Server.Core.Data.IMapper`1"/>的实例。</param>
            <param name="sql">SQL语句。</param>
            <param name="param">参数表。</param>
            <returns>目标类型的实例的集合。若查询命中的行数为0，返回空集合。</returns>
        </member>
        <member name="M:Server.Core.Data.Indexing.IndexingExtension.Rows(Server.Core.Data.IDbClient,System.String,System.Object[])">
            <summary>
            获取查询结果得行序列。
            </summary>
            <param name="client"><see cref="T:Server.Core.Data.IDbClient"/>的实例。</param>
            <param name="sql">SQL语句。</param>
            <param name="param">参数表。</param>
            <returns>查询结果得行序列。</returns>
        </member>
        <member name="M:Server.Core.Data.Indexing.IndexingExtension.Get``1(Server.Core.Data.IDbClient,System.String,System.Object[])">
            <summary>
            查询并根据结果创建目标类型的实例。
            若满足条件的记录不存在，返回目标类型的默认值（对于引用类型为<c>null</c>）。
            </summary>
            <typeparam name="T">查询的目标类型。</typeparam>
            <param name="client"><see cref="T:Server.Core.Data.IDbClient"/>的实例。</param>
            <param name="sql">SQL语句。</param>
            <param name="param">参数表。</param>
            <returns>目标类型的实例。</returns>
        </member>
        <member name="M:Server.Core.Data.Indexing.IndexingExtension.ForceGet``1(Server.Core.Data.IDbClient,System.String,System.Object[])">
            <summary>
            查询并根据结果创建目标类型的实例。
            SQL命中的记录必须为1行，否则抛出异常。
            </summary>
            <typeparam name="T">查询的目标类型。</typeparam>
            <param name="client"><see cref="T:Server.Core.Data.IDbClient"/>的实例。</param>
            <param name="sql">SQL语句。</param>
            <param name="param">参数表。</param>
            <returns>目标类型的实例。</returns>
            <exception cref="T:Server.Core.Data.IncorrectResultSizeException">当SQL命中的记录行数不为 1。</exception>
        </member>
        <member name="M:Server.Core.Data.Indexing.IndexingExtension.TemplateList``1(Server.Core.Data.IDbClient,``0,System.String,System.Object[])">
            <summary>
            查询并根据结果返回目标类型的实例集合，由一个模板对象指定目标类型。
            </summary>
            <typeparam name="T">查询的目标类型。</typeparam>
            <param name="client"><see cref="T:Server.Core.Data.IDbClient"/>的实例。</param>
            <param name="template">用于指定目标类型的模板对象。</param>
            <param name="sql">SQL语句。</param>
            <param name="param">参数表。</param>
            <returns>目标类型的实例集合。</returns>
        </member>
        <member name="M:Server.Core.Data.Indexing.IndexingExtension.List``1(Server.Core.Data.IDbClient,System.String,System.Object[])">
            <summary>
            查询并根据结果返回目标类型的实例集合。
            </summary>
            <typeparam name="T">查询的目标类型。</typeparam>
            <param name="client"><see cref="T:Server.Core.Data.IDbClient"/>的实例。</param>
            <param name="sql">SQL语句。</param>
            <param name="param">参数表。</param>
            <returns>目标类型的实例集合。</returns>
        </member>
        <member name="M:Server.Core.Data.Indexing.IndexingExtension.TemplateQuery``1(Server.Core.Data.IDbClient,``0,System.String,System.Object[])">
            <summary>
            查询并根据结果返回目标类型的实例序列，由一个模板对象指定目标类型。
            </summary>
            <typeparam name="T">查询的目标类型。</typeparam>
            <param name="client"><see cref="T:Server.Core.Data.IDbClient"/>的实例。</param>
            <param name="template">用于指定目标类型的模板对象。</param>
            <param name="sql">SQL语句。</param>
            <param name="param">参数表。</param>
            <returns>目标类型的实例集合。</returns>
        </member>
        <member name="M:Server.Core.Data.Indexing.IndexingExtension.Query``1(Server.Core.Data.IDbClient,System.String,System.Object[])">
            <summary>
            查询并根据结果返回目标类型的实例序列。
            </summary>
            <typeparam name="T">查询的目标类型。</typeparam>
            <param name="client"><see cref="T:Server.Core.Data.IDbClient"/>的实例。</param>
            <param name="sql">SQL语句。</param>
            <param name="param">参数表。</param>
            <returns>目标类型的实例序列。</returns>
        </member>
        <member name="T:Server.Core.Data.ITransactionKeeper">
            <summary>
            定义数据库事务容器。
            </summary>
        </member>
        <member name="M:Server.Core.Data.ITransactionKeeper.Begin">
            <summary>
            开启一个事务。
            </summary>
        </member>
        <member name="M:Server.Core.Data.ITransactionKeeper.Commit">
            <summary>
            提交事务。
            </summary>
        </member>
        <member name="M:Server.Core.Data.ITransactionKeeper.Rollback">
            <summary>
            回滚事务。
            </summary>
        </member>
        <member name="T:Server.Core.Data.Mappers">
            <summary>
            定义了创建常见类型的<see cref="T:Server.Core.Data.IMapper`1"/>实现的有关方法。
            </summary>
        </member>
        <member name="M:Server.Core.Data.Mappers.Custom``1(System.Func{System.Data.IDataRecord,System.Int32,``0})">
            <summary>
            通过委托定义创建<see cref="T:Server.Core.Data.IMapper`1"/>实现。
            </summary>
            <typeparam name="T">目标类型。</typeparam>
            <param name="rowMapping">从<see cref="T:System.Data.IDataRecord"/>获取目标类型的数据的方法。</param>
            <returns><see cref="T:Server.Core.Data.IMapper`1"/>的实例。</returns>
            <exception cref="T:System.ArgumentNullException">当<paramref name="rowMapping"/>为null。</exception>
        </member>
        <member name="M:Server.Core.Data.Mappers.String(System.String,System.Boolean)">
            <summary>
            创建映射字符串字段值的<see cref="T:Server.Core.Data.IMapper`1"/>实现。
            </summary>
            <param name="colName">使用的列名称，若为null则使用第一列。</param>
            <param name="allowNull"><c>true</c>则<see cref="T:System.DBNull"/>将被转换为空字符串；否则转换为null。</param>
            <returns><see cref="T:Server.Core.Data.IMapper`1"/>的实例。</returns>
        </member>
        <member name="M:Server.Core.Data.Mappers.Int32(System.String)">
            <summary>
            创建映射<see cref="T:System.Int32"/>字段值的<see cref="T:Server.Core.Data.IMapper`1"/>实现。
            </summary>
            <param name="colName">使用的列名称，若为null则使用第一列。</param>
            <returns><see cref="T:Server.Core.Data.IMapper`1"/>的实例。</returns>
        </member>
        <member name="M:Server.Core.Data.Mappers.Int64(System.String)">
            <summary>
            创建映射<see cref="T:System.Int64"/>字段值的<see cref="T:Server.Core.Data.IMapper`1"/>实现。
            </summary>
            <param name="colName">使用的列名称，若为null则使用第一列。</param>
            <returns><see cref="T:Server.Core.Data.IMapper`1"/>的实例。</returns>
        </member>
        <member name="M:Server.Core.Data.Mappers.Decimal(System.String)">
            <summary>
            创建映射<see cref="T:System.Decimal"/>字段值的<see cref="T:Server.Core.Data.IMapper`1"/>实现。
            </summary>
            <param name="colName">使用的列名称，若为null则使用第一列。</param>
            <returns><see cref="T:Server.Core.Data.IMapper`1"/>的实例。</returns>
        </member>
        <member name="M:Server.Core.Data.Mappers.Double(System.String)">
            <summary>
            创建映射<see cref="T:System.Double"/>字段值的<see cref="T:Server.Core.Data.IMapper`1"/>实现。
            </summary>
            <param name="colName">使用的列名称，若为null则使用第一列。</param>
            <returns><see cref="T:Server.Core.Data.IMapper`1"/>的实例。</returns>
        </member>
        <member name="M:Server.Core.Data.Mappers.Direct``1(System.String)">
            <summary>
            直接返回指定类型，并不进行类型转换的<see cref="T:Server.Core.Data.IMapper`1"/>实现。
            </summary>
            <typeparam name="T">指定类型。</typeparam>
            <param name="colName">使用的列名称，若为null则使用第一列。</param>
            <returns><see cref="T:Server.Core.Data.IMapper`1"/>的实例。</returns>
        </member>
        <member name="M:Server.Core.Data.Mappers.Convertible``1(System.String)">
            <summary>
            创建对应指定类型的<see cref="T:Server.Core.Data.IMapper`1"/>实现，
            指定的类型必须实现<see cref="T:System.IConvertible"/>。
            </summary>
            <typeparam name="T">指定类型。</typeparam>
            <param name="colName">使用的列名称，若为null则使用第一列。</param>
            <returns><see cref="T:Server.Core.Data.IMapper`1"/>的实例。</returns>
            <exception cref="T:System.InvalidCastException">
            当类型<typeparamref name="T"/>未实现<see cref="T:System.IConvertible"/>。
            </exception>
        </member>
        <member name="T:Server.Core.Data.SingleRowKeeperMapper">
            <summary>
            提供<see cref="T:System.Data.IDataRecord"/>到<see cref="T:Server.Core.Data.SingleRowKeeper"/>的映射。
            </summary>
        </member>
        <member name="T:Server.Core.Data.SingleRowKeeper">
            <summary>
            提供<see cref="T:System.Data.IDataReader"/>的第一行记录的存储与检索。
            </summary>
        </member>
        <member name="M:Server.Core.Data.SingleRowKeeper.#ctor(System.Data.IDataRecord)">
            <summary>
            初始化<see cref="T:Server.Core.Data.SingleRowKeeper"/>的新实例，并制定提供记录数据的<see cref="T:System.Data.IDataRecord"/>。
            </summary>
            <param name="dataRecord">
            <see cref="T:System.Data.IDataRecord"/>的实例，其第一行数据将被记录下来。
            </param>
        </member>
        <member name="T:Server.Core.Data.SqlDbClient">
            <summary>
            简单的SQL Server数据库访问客户端。
            </summary>
        </member>
        <member name="M:Server.Core.Data.SqlDbClient.#ctor(System.String)">
            <summary>
            使用指定的数据库类型和连接字符串初始化<see cref="T:Server.Core.Data.SqlDbClient"/>的新实例。
            </summary>
            <param name="connectionString">连接字符串。</param>
        </member>
        <member name="P:Server.Core.Data.SqlDbClient.ConnectionString">
            <summary>
            获取当前实例所使用的数据库连接字符串。
            </summary>
        </member>
        <member name="P:Server.Core.Data.SqlDbClient.Factory">
            <summary>
            获取当前实例所使用的<see cref="T:System.Data.Common.DbProviderFactory"/>实例。
            </summary>
        </member>
        <member name="T:Server.Core.Data.ThreadLocalTransactionKeeper">
            <summary>
            与线程绑定有关的<see cref="T:Server.Core.Data.ITransactionKeeper"/>的实现。
            控制一个线程中获取到的实例总是同一个，使事务嵌套的情况下，内层申明的事务实际上跑在外层的实例作用域中。
            类型的实例成员并不是线程安全的。 
            </summary>
            <remarks>
            若<see cref="M:System.IDisposable.Dispose"/>在<see cref="M:Server.Core.Data.ITransactionKeeper.Commit"/>之前被调用，
            事务将被回滚。
            注意，所有语句都将在事务内运行，包括查询。
            </remarks>
        </member>
        <member name="M:Server.Core.Data.ThreadLocalTransactionKeeper.OpenTransaction(System.Data.Common.DbProviderFactory,System.String)">
            <summary>
            获取绑定到当前线程的<see cref="T:Server.Core.Data.ThreadLocalTransactionKeeper"/>实例。
            </summary>
            <param name="dbProviderFactory"><see cref="T:System.Data.Common.DbProviderFactory"/>实例。</param>
            <param name="connectionString">初始化数据库连接的连接字符串。</param>
            <returns><see cref="T:Server.Core.Data.ThreadLocalTransactionKeeper"/>实例。</returns>
        </member>
        <member name="M:Server.Core.Data.ThreadLocalTransactionKeeper.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Server.Core.Data.ThreadLocalTransactionKeeper.Commit">
            <summary>
            提交事务。
            </summary>
        </member>
        <member name="M:Server.Core.Data.ThreadLocalTransactionKeeper.Rollback">
            <summary>
            回滚事务。
            </summary>
        </member>
        <member name="P:Server.Core.Data.ThreadLocalTransactionKeeper.ConnectionString">
            <summary>
            获取当前实例所使用的数据库连接字符串。
            </summary>
        </member>
        <member name="P:Server.Core.Data.ThreadLocalTransactionKeeper.Factory">
            <summary>
            获取当前实例所使用的<see cref="T:System.Data.Common.DbProviderFactory"/>实例。
            </summary>
        </member>
        <member name="T:Server.Core.Data.TransactionScopeTransactionKeeper">
            <summary>
            使用MSDTC进行的分布式事务控制。
            </summary>
        </member>
        <member name="M:Server.Core.Data.TransactionScopeTransactionKeeper.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, 
            or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Server.Core.Data.TransactionScopeTransactionKeeper.Begin">
            <summary>
            开启一个事务。
            </summary>
        </member>
        <member name="M:Server.Core.Data.TransactionScopeTransactionKeeper.Commit">
            <summary>
            提交事务。
            </summary>
        </member>
        <member name="M:Server.Core.Data.TransactionScopeTransactionKeeper.Rollback">
            <summary>
            回滚事务。
            </summary>
        </member>
        <member name="P:Server.Core.Data.TransactionScopeTransactionKeeper.ConnectionString">
            <summary>
            获取当前实例所使用的数据库连接字符串。
            </summary>
        </member>
        <member name="P:Server.Core.Data.TransactionScopeTransactionKeeper.Factory">
            <summary>
            获取当前实例所使用的<see cref="T:System.Data.Common.DbProviderFactory"/>实例。
            </summary>
        </member>
        <member name="T:Server.Core.Drawing.ExifDataTypes">
            <summary>
            EXIF data types.
            </summary>
        </member>
        <member name="T:Server.Core.Drawing.ExifExposureMeteringModes">
            <summary>
            EXIF exposure metering modes.
            </summary>
        </member>
        <member name="T:Server.Core.Drawing.ExifExposurePrograms">
            <summary>
            EXIF exposure programs.
            </summary>
        </member>
        <member name="T:Server.Core.Drawing.ExifFlashModes">
            <summary>
            EXIF flash activity modes.
            </summary>
        </member>
        <member name="T:Server.Core.Drawing.ExifLightSources">
            <summary>
            EXIF possible light sources (white balance).
            </summary>
        </member>
        <member name="T:Server.Core.Drawing.ExifOrientations">
            <summary>
            EXIF real position of 0th row and column of picture.
            </summary>
        </member>
        <member name="T:Server.Core.Drawing.ExifRational">
            <summary>
            Represents rational which is type of some Exif properties.
            </summary>
        </member>
        <member name="M:Server.Core.Drawing.ExifRational.ToDouble">
            <summary>
            Converts rational to double precision real number.
            </summary>
            <returns>A double precision real number.</returns>
        </member>
        <member name="T:Server.Core.Drawing.ExifTagNames">
            <summary>
            Contains possible values of EXIF tag names (ID).
            </summary>
        </member>
        <member name="T:Server.Core.Drawing.ExifPropertySheet">
            <summary>
            A class for analyzing the EXIF properties from a bitmap.
            </summary>
        </member>
        <member name="M:Server.Core.Drawing.ExifPropertySheet.#ctor(System.Drawing.Image)">
            <summary>
            Initialize a new instance.
            </summary>
            <param name="bitmap">The bitmap to read exif information from.</param>
        </member>
        <member name="M:Server.Core.Drawing.ExifPropertySheet.#ctor(System.String)">
            <summary>
            Initialize a new instance.
            </summary>
            <param name="fileName">The name of the bitmap file to read exif information from.</param>
        </member>
        <member name="M:Server.Core.Drawing.ExifPropertySheet.BuildDescription">
            <summary>
            Returns all available data in formatted string form.
            </summary>
            <returns>A string that contains all available data.</returns>
        </member>
        <member name="M:Server.Core.Drawing.ExifPropertySheet.GetPropertyString(System.Int32,System.String)">
            <summary>
            Gets specified string property.
            </summary>
            <param name="pid">
            Property ID. Optional, default String.Empty. Default value returned if property is not present.
            </param>
            <param name="defaultValue">Value of property or DefaultValue if property is not present.</param>
            <returns>The property string.</returns>
        </member>
        <member name="M:Server.Core.Drawing.ExifPropertySheet.GetPropertyRational(System.Int32)">
            <summary>
            Gets specified rational property.
            </summary>
            <param name="pid">Property ID. Value of property or 0/1 if not present.</param>
            <returns><see cref="T:Server.Core.Drawing.ExifRational"/>.</returns>
        </member>
        <member name="M:Server.Core.Drawing.ExifPropertySheet.SetPropertyString(System.Int32,System.String)">
            <summary>
            Sets specified string property.
            </summary>
            <param name="pid">Property ID.</param>
            <param name="value">Value to be set.</param>
        </member>
        <member name="M:Server.Core.Drawing.ExifPropertySheet.SetProperty(System.Int32,System.Byte[],Server.Core.Drawing.ExifDataTypes)">
            <summary>
            Sets specified property in raw form.
            </summary>
            <param name="pid">Property ID.</param>
            <param name="data">Raw data.</param>
            <param name="type">EXIF data type.</param>
        </member>
        <member name="M:Server.Core.Drawing.ExifPropertySheet.SetProperty(System.Int32,System.Int16)">
            <summary>
            Sets specified property in raw form.
            </summary>
            <param name="pid">Property ID.</param>
            <param name="data">The property value to set.</param>
        </member>
        <member name="P:Server.Core.Drawing.ExifPropertySheet.Encoding">
            <summary>
            Gets or sets encoding used for string metadata.
            The default encoding is UTF-8.
            </summary>
        </member>
        <member name="P:Server.Core.Drawing.ExifPropertySheet.EquipmentMaker">
            <summary>
            Brand of equipment (EXIF EquipMake).
            </summary>
        </member>
        <member name="P:Server.Core.Drawing.ExifPropertySheet.EquipmentModel">
            <summary>
            Model of equipment (EXIF EquipModel).
            </summary>
        </member>
        <member name="P:Server.Core.Drawing.ExifPropertySheet.Software">
            <summary>
            Software used for processing (EXIF Software).
            </summary>
        </member>
        <member name="P:Server.Core.Drawing.ExifPropertySheet.Orientation">
            <summary>
            Orientation of image (position of row 0, column 0) (EXIF Orientation).
            </summary>
        </member>
        <member name="P:Server.Core.Drawing.ExifPropertySheet.DateTimeLastModified">
            <summary>
            Time when image was last modified (EXIF DateTime).
            </summary>
        </member>
        <member name="P:Server.Core.Drawing.ExifPropertySheet.DateTimeOriginal">
            <summary>
            Time when image was taken (EXIF DateTimeOriginal).
            </summary>
        </member>
        <member name="P:Server.Core.Drawing.ExifPropertySheet.DateTimeDigitized">
            <summary>
            Time when image was digitized (EXIF DateTimeDigitized).
            </summary>
        </member>
        <member name="P:Server.Core.Drawing.ExifPropertySheet.ResolutionX">
            <summary>
            X resolution in dpi (EXIF XResolution/ResolutionUnit).
            </summary>
        </member>
        <member name="P:Server.Core.Drawing.ExifPropertySheet.ResolutionY">
            <summary>
            Y resolution in dpi (EXIF YResolution/ResolutionUnit).
            </summary>
        </member>
        <member name="P:Server.Core.Drawing.ExifPropertySheet.Title">
            <summary>
            Image title (EXIF ImageTitle).
            </summary>
        </member>
        <member name="P:Server.Core.Drawing.ExifPropertySheet.UserComment">
            <summary>
            User comment (EXIF UserComment).
            </summary>
        </member>
        <member name="P:Server.Core.Drawing.ExifPropertySheet.Artist">
            <summary>
            Artist name (EXIF Artist).
            </summary>
        </member>
        <member name="P:Server.Core.Drawing.ExifPropertySheet.Description">
            <summary>
            Image description (EXIF ImageDescription).
            </summary>
        </member>
        <member name="P:Server.Core.Drawing.ExifPropertySheet.Copyright">
            <summary>
            Image copyright (EXIF Copyright).
            </summary>
        </member>
        <member name="P:Server.Core.Drawing.ExifPropertySheet.ExposureTimeAbs">
            <summary>
            Exposure time in seconds (EXIF ExifExposureTime/ExifShutterSpeed).
            </summary>
        </member>
        <member name="P:Server.Core.Drawing.ExifPropertySheet.ExposureTime">
            <summary>
            Exposure time in the <see cref="T:Server.Core.Drawing.ExifRational"/> form (EXIF ExifExposureTime/ExifShutterSpeed).
            </summary>
        </member>
        <member name="P:Server.Core.Drawing.ExifPropertySheet.Aperture">
            <summary>
            Aperture value as F number (EXIF ExifFNumber/ExifApertureValue).
            </summary>
        </member>
        <member name="P:Server.Core.Drawing.ExifPropertySheet.ExposureProgram">
            <summary>
            Exposure program used (EXIF ExifExposureProg).
            </summary>
        </member>
        <member name="P:Server.Core.Drawing.ExifPropertySheet.Iso">
            <summary>
            ISO sensitivity.
            </summary>
        </member>
        <member name="P:Server.Core.Drawing.ExifPropertySheet.SubjectDistance">
            <summary>
            Subject distance in meters (EXIF SubjectDistance).
            </summary>
        </member>
        <member name="P:Server.Core.Drawing.ExifPropertySheet.ExposureMeteringMode">
            <summary>
            Exposure method metering mode used (EXIF MeteringMode).
            If not specified, returns <see cref="F:Server.Core.Drawing.ExifExposureMeteringModes.Unknown"/>.
            </summary>
        </member>
        <member name="P:Server.Core.Drawing.ExifPropertySheet.FocalLength">
            <summary>
            Focal length of lenses in mm (EXIF FocalLength).
            </summary>
        </member>
        <member name="P:Server.Core.Drawing.ExifPropertySheet.FlashMode">
            <summary>
            Flash mode (EXIF Flash).
            If not present, returns <see cref="F:Server.Core.Drawing.ExifFlashModes.NotFired"/>.
            </summary>
        </member>
        <member name="P:Server.Core.Drawing.ExifPropertySheet.LightSource">
            <summary>
            Light source / white balance (EXIF LightSource).
            If not specified, returns <see cref="F:Server.Core.Drawing.ExifLightSources.Unknown"/>.
            </summary>
        </member>
        <member name="T:Server.Core.Drawing.ExifUtils">
            <summary>
            包含图片EXIF信息相关的处理方法。
            </summary>
        </member>
        <member name="M:Server.Core.Drawing.ExifUtils.RotateToTopLeft(System.Drawing.Image)">
            <summary>
            解析图片中的EXIF方向信息，并根据其方向旋转图片。
            旋转后的图片方向总是<see cref="F:Server.Core.Drawing.ExifOrientations.V1TopLeft"/>。
            </summary>
            <param name="img">待处理的图片。</param>
        </member>
        <member name="T:Server.Core.Drawing.ZoomUtils">
            <summary>
            包含图片缩放处理相关的方法。
            </summary>
        </member>
        <member name="F:Server.Core.Drawing.ZoomUtils.ZoomProportionEpsilon">
            <summary>
            按比例缩放图片时所允许的最大比例偏差。比例在此偏差内不需要对原图进行裁剪。
            </summary>
        </member>
        <member name="M:Server.Core.Drawing.ZoomUtils.Cut(System.Drawing.Image,System.Drawing.Size,System.Drawing.Imaging.PixelFormat,System.Drawing.Drawing2D.InterpolationMode)">
            <summary>
            将指定的图片内容缩放到目标尺寸并返回缩放后的图片实例。
            缩放过程可能根据目标尺寸进行裁剪。若来源图片图尺寸更小，则进行拉伸。
            </summary>
            <param name="source">来源图片。</param>
            <param name="destSize">缩放后的尺寸。</param>
            <param name="pixelFormat">指定调整后的图片使用的<see cref="T:System.Drawing.Imaging.PixelFormat"/>。</param>
            <param name="interpolationMode">指定调整后的图片使用的<see cref="T:System.Drawing.Drawing2D.InterpolationMode"/>。</param>
            <returns>缩放后的图片实例。</returns>
        </member>
        <member name="M:Server.Core.Drawing.ZoomUtils.GetZoomSize(System.Drawing.Size,System.Drawing.Size,System.Boolean)">
            <summary>
            计算指定尺寸在缩放后的目标尺寸。
            缩放维持原尺寸的比例，并尽可能接近给定的最大尺寸（但不超出）。
            </summary>
            <param name="sourceSize">缩放前的尺寸。</param>
            <param name="maxSize">缩放后的最大尺寸。长度或宽度-1表示不限定改维度。</param>
            <param name="allowZoomIn">当最大尺寸限定的宽高都大于原尺寸时，是否放大原尺寸。</param>
            <returns>缩放后的目标尺寸。</returns>
        </member>
        <member name="M:Server.Core.Drawing.ZoomUtils.Zoom(System.Drawing.Image,System.Int32,System.Int32,System.Drawing.Imaging.PixelFormat,System.Drawing.Drawing2D.InterpolationMode)">
            <summary>
            对图片进行缩放并指定最大的缩放尺寸，并返回缩放后的图片实例。
            缩放过程将维持来源图片尺寸不变，也不会进行裁剪。
            </summary>
            <param name="source">来源图片。</param>
            <param name="maxWidth">缩放后的最大宽度。-1表示不限定。</param>
            <param name="maxHeight">缩放后的最大高度。-1表示不限定。</param>
            <param name="pixelFormat">指定调整后的图片使用的<see cref="T:System.Drawing.Imaging.PixelFormat"/>。</param>
            <param name="interpolationMode">指定调整后的图片使用的<see cref="T:System.Drawing.Drawing2D.InterpolationMode"/>。</param>
            <returns>缩放后的图片实例。</returns>
        </member>
        <member name="M:Server.Core.Drawing.ZoomUtils.Stretch(System.Drawing.Image,System.Drawing.Size,System.Drawing.Imaging.PixelFormat,System.Drawing.Drawing2D.InterpolationMode)">
            <summary>
            填充图片到指定大小。若原图尺寸较小，将被拉伸；原图尺寸较大，将被压缩。
            若目标长宽比与源图不一致，拉伸/缩小后图片可能发生变形。
            </summary>
            <param name="source">来源图片。</param>
            <param name="descSize">调整后的尺寸。</param>
            <param name="pixelFormat">指定调整后的图片使用的<see cref="T:System.Drawing.Imaging.PixelFormat"/>。</param>
            <param name="interpolationMode">指定调整后的图片使用的<see cref="T:System.Drawing.Drawing2D.InterpolationMode"/>。</param>
            <returns></returns>
        </member>
        <member name="T:Server.Core.ExceptionUtils">
            <summary>
            包含异常处理有关的方法。
            </summary>
        </member>
        <member name="M:Server.Core.ExceptionUtils.GetFullDescrption(System.Exception)">
            <summary>
            获取异常的各层次描述信息，包括异常及所有内部异常的
            <see cref="P:System.Exception.Message"/>和<see cref="P:System.Exception.StackTrace"/>。
            </summary>
            <param name="ex">异常的实例。</param>
            <returns>一个字符串，其包含异常及其所有内部异常的描述。</returns>
            <exception cref="T:System.ArgumentNullException">当<paramref name="ex"/>为null。</exception>
            <remarks>
            信息具有以下格式：
            <code><![CDATA[
            ExceptionType: {Exception.Message}
            StackTrace:
            {Exception.StackTrace}
            ===> InnerExType: {InnerEx.Message}
            StackTrace:
            {InnerEx.StackTrace}
            ===> InnerExType2: ....
            ]]> 
            </code>
            </remarks>
        </member>
        <member name="M:Server.Core.ExceptionUtils.PreserveStackTrace(System.Exception)">
            <summary>
            对异常进行处理，使异常的<see cref="P:System.Exception.StackTrace"/>在使用
            throw重新抛出后仍保留有throw前的内容。
            </summary>
            <param name="ex">待处理的异常实例。</param>
            <exception cref="T:System.ArgumentNullException">当<paramref name="ex"/>为null。</exception>
            <remarks>
            此方式使用反射调用Exception类的内部方法InternalPreserveStackTrace，
            该方法只保留rethrow前的异常堆栈的字符串描述信息，
            若使用<see cref="T:System.Diagnostics.StackTrace"/>访问堆栈信息，
            仍只能获取到rethrow的位置。
            </remarks>
        </member>
        <member name="T:Server.Core.HexString">
            <summary>
            表示一组二进制序列，并提供16进制字符串格式表示的支持。
            此类型无法被继承。
            </summary>
        </member>
        <member name="M:Server.Core.HexString.op_Addition(Server.Core.HexString,Server.Core.HexString)">
            <summary>
            定义<see cref="T:Server.Core.HexString"/>间的加法。
            </summary>
            <param name="hex1">第1个<see cref="T:Server.Core.HexString"/>。</param>
            <param name="hex2">第2个<see cref="T:Server.Core.HexString"/>。</param>
            <returns>相加结果。</returns>
        </member>
        <member name="M:Server.Core.HexString.op_Equality(Server.Core.HexString,Server.Core.HexString)">
            <summary>
            定义<see cref="T:Server.Core.HexString"/>间的比较运算。
            </summary>
            <param name="hex1">第1个<see cref="T:Server.Core.HexString"/>。</param>
            <param name="hex2">第2个<see cref="T:Server.Core.HexString"/>。</param>
            <returns>true若两个<see cref="T:Server.Core.HexString"/>相等；否则返回false。</returns>
        </member>
        <member name="M:Server.Core.HexString.op_Inequality(Server.Core.HexString,Server.Core.HexString)">
            <summary>
            定义<see cref="T:Server.Core.HexString"/>间的比较运算。
            </summary>
            <param name="hex1">第1个<see cref="T:Server.Core.HexString"/>。</param>
            <param name="hex2">第2个<see cref="T:Server.Core.HexString"/>。</param>
            <returns>true若两个<see cref="T:Server.Core.HexString"/>不相等；否则返回false。</returns>
        </member>
        <member name="M:Server.Core.HexString.op_Explicit(Server.Core.HexString)~System.Byte[]">
            <summary>
            定义<see cref="T:Server.Core.HexString"/>到<see cref="T:System.Byte"/>数组间的显式转换。
            </summary>
            <param name="hex"><see cref="T:Server.Core.HexString"/>的实例。</param>
            <returns>与给定的<see cref="T:Server.Core.HexString"/>对等的<see cref="T:System.Byte"/>数组。</returns>
        </member>
        <member name="M:Server.Core.HexString.op_Explicit(System.Byte[])~Server.Core.HexString">
            <summary>
            定义<see cref="T:System.Byte"/>数组到<see cref="T:Server.Core.HexString"/>间的显式转换。
            </summary>
            <param name="bytes"><see cref="T:System.Byte"/>数组。</param>
            <returns>与给定的<see cref="T:System.Byte"/>数组对等的<see cref="T:Server.Core.HexString"/>。</returns>
        </member>
        <member name="M:Server.Core.HexString.op_Implicit(Server.Core.HexString)~System.String">
            <summary>
            定义<see cref="T:Server.Core.HexString"/>到<see cref="T:System.String"/>间的隐式转换。
            </summary>
            <param name="hex"><see cref="T:Server.Core.HexString"/>的实例。</param>
            <returns><see cref="T:Server.Core.HexString"/>的字符串表示。</returns>
        </member>
        <member name="M:Server.Core.HexString.Parse(System.String)">
            <summary>
            从字符串获得<see cref="T:Server.Core.HexString"/>。
            </summary>
            <param name="value"><see cref="T:Server.Core.HexString"/>的字符串表示。</param>
            <returns>对应于指定字符串的<see cref="T:Server.Core.HexString"/>实例。</returns>
            <exception cref="T:System.ArgumentNullException">当<paramref name="value"/>为空。</exception>
            <exception cref="T:System.FormatException">当所传入的字符串包含16进制数以外的字符。</exception>
        </member>
        <member name="M:Server.Core.HexString.TryParse(System.Collections.Generic.IEnumerable{System.Char},System.Boolean,Server.Core.HexString@)">
            <summary>
            从字符串获得<see cref="T:Server.Core.HexString"/>。
            </summary>
            <param name="hex">由十六进制数字对应的字符组成的序列。</param>
            <param name="ignoreWhiteSpace">是否忽略空白字符。</param>
            <param name="value">转换结果，输出参数。</param>
            <returns>true若成功从给定的序列获取<see cref="T:Server.Core.HexString"/>；否则为false。</returns>
        </member>
        <member name="M:Server.Core.HexString.IsHexString(System.String,System.Boolean)">
            <summary>
            判断指定字符串是否可转换为<see cref="T:Server.Core.HexString"/>。
            </summary>
            <param name="input">待判断的字符串。</param>
            <param name="ignoreWhiteSpace">是否忽略空白字符。</param>
            <returns>若指定字符串可转换为<see cref="T:Server.Core.HexString"/>，返回<c>true</c>；否则返回<c>false</c>。</returns>
        </member>
        <member name="M:Server.Core.HexString.#ctor(System.Collections.Generic.ICollection{System.Byte})">
            <summary>
            使用指定的<see cref="T:System.Byte"/>集合初始化<see cref="T:Server.Core.HexString"/>的新实例。
            </summary>
            <param name="bytes"><see cref="T:System.Byte"/>集合。</param>
        </member>
        <member name="M:Server.Core.HexString.#ctor(System.Byte[])">
            <summary>
            使用指定的<see cref="T:System.Byte"/>数组初始化<see cref="T:Server.Core.HexString"/>的新实例。
            数组将作为内部数据（不会被复制一份），此构造函数用户高性能用途。
            </summary>
            <param name="bytes"><see cref="T:System.Byte"/>数组。</param>
        </member>
        <member name="M:Server.Core.HexString.ToArray">
            <summary>
            获得实例所包含的数据。
            </summary>
            <returns>实例所包含的数据。</returns>
        </member>
        <member name="M:Server.Core.HexString.Equals(Server.Core.HexString)">
            <summary>
            判断当前实例是否与给定对象相等。
            </summary>
            <param name="other">用于与当前实例比对的对象。</param>
            <returns>当相等时返回<c>true</c>，否则返回<c>false</c>。</returns>
        </member>
        <member name="M:Server.Core.HexString.Equals(System.Object)">
            <summary>
            判断当前实例是否与给定对象相等。
            </summary>
            <param name="obj">用于与当前实例比对的对象。</param>
            <returns>当相等时返回<c>true</c>，否则返回<c>false</c>。</returns>
        </member>
        <member name="M:Server.Core.HexString.GetHashCode">
            <summary>
            返回当前实例的散列值。
            </summary>
            <returns>当前实例的散列值。</returns>
        </member>
        <member name="M:Server.Core.HexString.ToString">
            <summary>
            获取当前实例所包含的数据的16进制字符串表示。
            </summary>
            <returns>当前实例所包含的数据的16进制字符串表示。</returns>
        </member>
        <member name="M:Server.Core.HexString.ToString(System.String)">
            <summary>
            获取当前实例所包含的数据的16进制字符串表示。
            </summary>
            <param name="format">表示格式的字符串。</param>
            <returns>当前实例所包含的数据的16进制字符串表示。</returns>
            <exception cref="T:System.FormatException">当格式不被支持。</exception>
            <remarks>
            当前支持的格式为：
                x - 由小写的十六进制字母表示，这在未指定格式时的默认项；
                X - 由大写的十六进制字母表示；
            </remarks>
        </member>
        <member name="P:Server.Core.HexString.DataLength">
            <summary>
            获取此对象所包含的二进制序列的字节数。
            </summary>
        </member>
        <member name="P:Server.Core.HexString.Item(System.Int32)">
            <summary>
            获取指定位置的字节的16进制字符串表示。
            </summary>
            <param name="index">索引值。</param>
            <returns>指定位置的字节的16进制字符串表示。</returns>
            <exception cref="T:System.IndexOutOfRangeException">当索引出界。</exception>
        </member>
        <member name="T:Server.Core.IndexRange">
            <summary>
            表示一个索引区间。
            </summary>
        </member>
        <member name="M:Server.Core.IndexRange.#ctor(System.Int32,System.Int32)">
            <summary>
            初始化<see cref="T:Server.Core.IndexRange"/>的新实例。
            </summary>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="F:Server.Core.IndexRange.Start">
            <summary>
            开始索引。
            </summary>
        </member>
        <member name="F:Server.Core.IndexRange.End">
            <summary>
            结束索引。
            </summary>
        </member>
        <member name="T:Server.Core.IO.CsvRow">
            <summary>
            表示<see cref="T:Server.Core.IO.CsvTable"/>中的一行的数据。
            </summary>
        </member>
        <member name="M:Server.Core.IO.CsvRow.#ctor">
            <summary>
            初始化<see cref="T:Server.Core.IO.CsvRow"/>的新实例。
            </summary>
        </member>
        <member name="M:Server.Core.IO.CsvRow.#ctor(System.Int32)">
            <summary>
            使用指定的CSV行中列数量的初始大小初始化<see cref="T:Server.Core.IO.CsvRow"/>的新实例。
            </summary>
            <param name="rowSize">CSV行中列数量的初始大小。</param>
        </member>
        <member name="P:Server.Core.IO.CsvRow.Count">
            <summary>
            获取当前<see cref="T:Server.Core.IO.CsvRow"/>实例中的列的数量。
            </summary>
        </member>
        <member name="P:Server.Core.IO.CsvRow.Item(System.Int32)">
            <summary>
            索引当前<see cref="T:Server.Core.IO.CsvRow"/>实例中的列值的集合。
            </summary>
            <param name="index">列的索引值。索引从0开始。</param>
            <returns>
            当前<see cref="T:Server.Core.IO.CsvRow"/>实例中指定索引位置的列的值。
            若索引值超出了总列数，返回空字符串。
            </returns>
        </member>
        <member name="P:Server.Core.IO.CsvRow.Cells">
            <summary>
            获取当前<see cref="T:Server.Core.IO.CsvRow"/>实例中的列值的集合。
            </summary>
        </member>
        <member name="T:Server.Core.IO.CsvTable">
            <summary> 
            表示CSV表格的数据并提供CSV数据的解析方法。
            </summary>
        </member>
        <member name="M:Server.Core.IO.CsvTable.Load(System.IO.TextReader)">
            <summary>
            从指定的<see cref="T:System.IO.TextReader"/>中解析<see cref="T:Server.Core.IO.CsvTable"/>实例。
            </summary>
            <param name="reader">数据流。</param>
            <returns><see cref="T:Server.Core.IO.CsvTable"/>实例。</returns>
            <remarks>
            注意：
            方法执行后并不会关闭输入的流，
            <see cref="M:System.IO.TextReader.Dispose"/>方法的调用需由方法的使用者自行控制。
            </remarks>
        </member>
        <member name="M:Server.Core.IO.CsvTable.Load(System.IO.Stream,System.Text.Encoding)">
            <summary>
            从指定的流中解析<see cref="T:Server.Core.IO.CsvTable"/>实例。
            </summary>
            <param name="stream">数据流。</param>
            <param name="encoding">读取流时使用的字符集。</param>
            <returns><see cref="T:Server.Core.IO.CsvTable"/>实例。</returns>
            <remarks>
            注意：
            方法执行后并不会关闭输入的流，
            <see cref="M:System.IO.Stream.Dispose"/>方法的调用需由方法的使用者自行控制。
            </remarks>
        </member>
        <member name="M:Server.Core.IO.CsvTable.Load(System.String,System.Text.Encoding)">
            <summary>
            从指定的文件中解析<see cref="T:Server.Core.IO.CsvTable"/>实例。
            </summary>
            <param name="filePath">文件路径。</param>
            <param name="encoding">读取文件时使用的字符集。</param>
            <returns><see cref="T:Server.Core.IO.CsvTable"/>实例。</returns>
        </member>
        <member name="M:Server.Core.IO.CsvTable.Load(System.String)">
            <summary>
            从给定的字符串中解析<see cref="T:Server.Core.IO.CsvTable"/>实例。
            </summary>
            <param name="data">CSV数据的字符串表示。</param>
            <returns><see cref="T:Server.Core.IO.CsvTable"/>实例。</returns>
        </member>
        <member name="P:Server.Core.IO.CsvTable.Rows">
            <summary>
            获取当前<see cref="T:Server.Core.IO.CsvTable"/>实例中的行对象的集合。
            </summary>
        </member>
        <member name="P:Server.Core.IO.CsvTable.Item(System.Int32)">
            <summary>
            索引当前<see cref="T:Server.Core.IO.CsvTable"/>实例中的行对象的集合。
            </summary>
            <param name="index">索引值。</param>
            <returns>当前<see cref="T:Server.Core.IO.CsvTable"/>实例中的行对象的集合中具有指定索引的对象。</returns>
        </member>
        <member name="T:Server.Core.IO.CsvTable.CsvToken">
            <summary>
            定义CSV标记元素的类型。
            </summary>
        </member>
        <member name="F:Server.Core.IO.CsvTable.CsvToken.None">
            <summary>
            无。
            </summary>
        </member>
        <member name="F:Server.Core.IO.CsvTable.CsvToken.Quota">
            <summary>
            双引号，可能是转义符，也可能是数据结束标记。
            </summary>
        </member>
        <member name="F:Server.Core.IO.CsvTable.CsvToken.DataStart">
            <summary>
            字段数据开始标记，由双引号表示。
            </summary>
        </member>
        <member name="F:Server.Core.IO.CsvTable.CsvToken.Cr">
            <summary>
            作为行结束符的回车。
            </summary>
        </member>
        <member name="F:Server.Core.IO.CsvTable.CsvToken.Lf">
            <summary>
            作为行结束符的换行符。
            </summary>
        </member>
        <member name="F:Server.Core.IO.CsvTable.CsvToken.Comma">
            <summary>
            作为字段分割符的逗号。
            </summary>
        </member>
        <member name="T:Server.Core.IO.IniFile">
            <summary>
            表示一个INI配置文件及对文件进行的相关操作。
            </summary>
            <remarks>
            INI文件具有如下结构：
                [section1]
                key1=value1
                key2=value2
                [section2]
                key3=value3
                ...
            其中section和key的名称都不是大小写敏感的。
            </remarks>
        </member>
        <member name="M:Server.Core.IO.IniFile.Create(System.String)">
            <summary>
            创建INI类型文件，并返回表示该文件的<see cref="T:Server.Core.IO.IniFile"/>实例。
            </summary>
            <param name="fileName">INI文件的完整路径和名称。</param>
            <exception cref="T:System.ArgumentNullException"> 当<paramref name="fileName"/>为<c>null</c>。 </exception>
            <exception cref="T:System.ArgumentException"> 当<paramref name="fileName"/>为空或仅包含空白字符。 </exception>
            <returns>被创建的<see cref="T:Server.Core.IO.IniFile"/>实例。</returns>
        </member>
        <member name="M:Server.Core.IO.IniFile.#ctor(System.String)">
            <summary>
            使用指定的文件完全限定名称初始化<see cref="T:Server.Core.IO.IniFile"/>的新实例。
            </summary>
            <exception>当所操作文件不存在时抛出此异常。</exception>
            <param name="fileName">包含完整路径的INI文件全名。</param>
            <exception cref="T:System.ArgumentNullException"> 当<paramref name="fileName"/>为<c>null</c>。 </exception>
            <exception cref="T:System.ArgumentException"> 当<paramref name="fileName"/>为空或仅包含空白字符。 </exception>
            <exception cref="T:System.IO.FileNotFoundException">当指定的文件不存在。</exception>
        </member>
        <member name="M:Server.Core.IO.IniFile.Write(System.String,System.String,System.String)">
            <summary>
            写入INI文件。
            </summary>
            <exception cref="T:System.IO.FileNotFoundException">当所操作文件不存在时抛出此异常。</exception>
            <param name="section">节名称。</param>
            <param name="key">键。</param>
            <param name="val">值。</param>
            <returns>若写入成功，返回<c>true</c>；否则，返回<c>false</c>。</returns>
            <exception cref="T:System.ArgumentNullException">
            当<paramref name="section"/>或<paramref name="key"/>或<paramref name="val"/>为<c>null</c>。
            </exception>
            <exception cref="T:System.ArgumentException">
            当<paramref name="section"/>或<paramref name="key"/>为空或仅包含空白字符。
            </exception>
        </member>
        <member name="M:Server.Core.IO.IniFile.DeleteKey(System.String,System.String)">
            <summary>
            删除指定键。
            </summary>
            <exception cref="T:System.IO.FileNotFoundException">当所操作文件不存在时抛出此异常。</exception>
            <exception cref="T:System.ArgumentNullException">当节或键为空时抛出此异常。</exception>
            <param name="section">节名称。</param>
            <param name="key">键。</param>
            <returns>若删除成功，返回<c>true</c>；否则，返回<c>false</c>。</returns>
            <exception cref="T:System.ArgumentNullException">
            当<paramref name="section"/>或<paramref name="key"/>为<c>null</c>。
            </exception>
            <exception cref="T:System.ArgumentException">
            当<paramref name="section"/>或<paramref name="key"/>为空或仅包含空白字符。
            </exception>
        </member>
        <member name="M:Server.Core.IO.IniFile.DeleteSection(System.String)">
            <summary>
            删除指定节。
            </summary>
            <exception cref="T:System.IO.FileNotFoundException">当所操作文件不存在时抛出此异常。</exception>
            <exception cref="T:System.ArgumentNullException">当节为空时抛出此异常。</exception>
            <param name="section">节名称。</param>
            <returns>若删除成功，返回<c>true</c>；否则，返回<c>false</c>。</returns>
            <exception cref="T:System.ArgumentNullException"> 当<paramref name="section"/>为<c>null</c>。 </exception>
            <exception cref="T:System.ArgumentException"> 当<paramref name="section"/>为空或仅包含空白字符。 </exception>
        </member>
        <member name="M:Server.Core.IO.IniFile.Read(System.String,System.String,System.Int32)">
            <summary>
            读取指定位置的值。
            </summary>
            <exception cref="T:System.IO.FileNotFoundException">当所操作文件不存在时抛出此异常。</exception>
            <exception cref="T:System.ArgumentNullException">当节或键为空时抛出此异常。</exception>
            <param name="section">节。</param>
            <param name="key">键。</param>
            <param name="size">指定读取值的最大长度。</param>
            <returns>读取到的值。若未读取到对应值，返回<see cref="F:System.String.Empty"/>。</returns>
            <exception cref="T:System.ArgumentNullException">
            当<paramref name="section"/>或<paramref name="key"/>为<c>null</c>。
            </exception>
            <exception cref="T:System.ArgumentException">
            当<paramref name="section"/>或<paramref name="key"/>为空或仅包含空白字符。
            </exception>
            <exception cref="T:System.ArgumentException"> 当<paramref name="size"/>不大于0。 </exception>
        </member>
        <member name="M:Server.Core.IO.IniFile.Read(System.String,System.String)">
            <summary>
            读取指定位置的值。
            </summary>
            <exception cref="T:System.IO.FileNotFoundException">当所操作文件不存在时抛出此异常。</exception>
            <exception cref="T:System.ArgumentNullException">当节或键为空时抛出此异常。</exception>
            <param name="section">节。</param>
            <param name="key">键。</param>
            <returns>读取到的值。若未读取到对应值，返回<see cref="F:System.String.Empty"/>。</returns>
            <exception cref="T:System.ArgumentNullException">
            当<paramref name="section"/>或<paramref name="key"/>为<c>null</c>。
            </exception>
            <exception cref="T:System.ArgumentException">
            当<paramref name="section"/>或<paramref name="key"/>为空或仅包含空白字符。
            </exception>
        </member>
        <member name="M:Server.Core.IO.IniFile.AllSections">
            <summary>
            获取所有的节的名称。
            </summary>
            <returns>包含所有节的名称的数组。</returns>
        </member>
        <member name="M:Server.Core.IO.IniFile.AllKeys(System.String)">
            <summary>
            获取指定的节下的所有的键的名称。
            </summary>
            <returns>包含指定的节下的所有的键的名称的数组。</returns>
        </member>
        <member name="T:Server.Core.IO.PathUtils">
            <summary>
            包含文件系统路径获取与处理的有关方法。
            </summary>
        </member>
        <member name="M:Server.Core.IO.PathUtils.ResolvePath(System.String)">
            <summary>
            获取指定路径在当前的文件系统下的完全限定名。
            路径可以是绝对路径或相对路径。并
            支持以 ～ 开头表示以当前程序域所在目录为基准的路径；
            以 ! 开头表示当前程序集所在目录为基准的路径，在Windows程序中它和程序域路径一致，在Web程序中则不同。
            </summary>
            <param name="path">路径。</param>
            <returns>完全限定名。若输入为空，则返回当前程序域所在目录的路径。</returns>
            <seealso cref="M:System.IO.Path.GetFullPath(System.String)"/>
            <seealso cref="M:Server.Core.IO.PathUtils.CurrentAssemblyDirectory"/>
            <remarks>
            注意在<see cref="M:System.IO.Path.GetFullPath(System.String)"/>的处理中，
            如 /a/b.c 将被解析为相对于根目录的路径即 x:\a\b.c，其中 x是工作目录所在的盘符；
            而 a/b.c 将被解析为相对于工作目录的路径即 x:\y\a\b.c，其中 x:\y\ 是当前的工作目录的路径。 
            对于程序集路径的处理，参考<seealso cref="M:Server.Core.IO.PathUtils.CurrentAssemblyDirectory"/>。
            </remarks>
        </member>
        <member name="M:Server.Core.IO.PathUtils.CurrentAssemblyDirectory">
            <summary>
            获取当前（这个方法所在的）程序集所在的目录路径。
            在Windows程序中程序集路径和程序域路径一致，在Web程序中则不同，
            程序集被放在程序域根目录的bin子目录下。
            </summary>
            <returns>当前程序集所在的目录路径。</returns>
            <remarks>
            在多数情况下，用户程序集都在同一个目录下，
            外部调用者调用此方法获取到的路径和调用方程序所在的路径一致，
            但需要注意一些情况，如此程序集被注册到全局程序集中，
            那么调用和被调用的程序集可能在不同的目录里，
            需要注意此时获取到的路径的意义。
            </remarks>
        </member>
        <member name="T:Server.Core.MathUtils">
            <summary>
            包含数字处理有关的方法。
            </summary>
        </member>
        <member name="M:Server.Core.MathUtils.IntLength(System.Int32)">
            <summary>
            获取十进制自然数的阿拉伯数字长度。
            </summary>
            <param name="i">自然数。</param>
            <returns>自然数的阿拉伯数字长度。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">当输入数值不是自然数。</exception>
        </member>
        <member name="M:Server.Core.MathUtils.HexToInt(System.Char)">
            <summary>
            将表示16进制数字的字符转换为对等的整数。
            </summary>
            <param name="h">表示16进制数字的字符。</param>
            <returns>字符所指代的整数。</returns>
            <exception cref="T:System.ArgumentException">当输入字符不是16进制数字。</exception>
        </member>
        <member name="M:Server.Core.MathUtils.IntToHex(System.Int32)">
            <summary>
            将0-15内的数值转换为对等的16进制字符。
            </summary>
            <param name="n">待转换的数值。</param>
            <returns>与给定数值对等的16进制字符。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">当值不在范围[0, 15]内。</exception>
        </member>
        <member name="T:Server.Core.Data.Nulless.NullessDataRecordWrapper">
            <summary>
            提供<see cref="T:System.Data.IDataRecord"/>的封装。
            在字段为值类型时，将<see cref="T:System.Data.IDataRecord"/>的字段中的<see cref="T:System.DBNull"/>值转换为值类型的默认值。
            </summary>
        </member>
        <member name="P:Server.Core.Data.Nulless.NullessDataRecordWrapper.Record">
            <summary>
            获取或设置作为数据源的<see cref="T:System.Data.IDataRecord"/>实例。
            </summary>
        </member>
        <member name="T:Server.Core.Data.Nulless.NullessDbClient">
            <summary>
            提供<see cref="T:Server.Core.Data.IDbClient"/>的封装。
            在值类型的字段中，若从数据库取得<see cref="T:System.DBNull"/>，则将值转换为值类型的默认值。
            </summary>
        </member>
        <member name="M:Server.Core.Data.Nulless.NullessDbClient.#ctor(Server.Core.Data.IDbClient)">
            <summary>
            初始化类型的新实例。
            </summary>
            <param name="client">被封装的<see cref="T:Server.Core.Data.IDbClient"/>实例。</param>
        </member>
        <member name="T:Server.Core.Data.Nulless.NullessMapper`1">
            <summary>
            提供<see cref="T:Server.Core.Data.IMapper`1"/>的封装。
            在进行映射时，将值为<see cref="T:System.DBNull"/>的字段转换为值类型的默认值。
            </summary>
            <typeparam name="T">目标类型。</typeparam>
        </member>
        <member name="M:Server.Core.Data.Nulless.NullessMapper`1.#ctor(Server.Core.Data.IMapper{`0})">
            <summary>
            初始化类型的新实例。
            </summary>
            <param name="mapper">被封装的<see cref="T:Server.Core.Data.IMapper`1"/>实例。</param>
        </member>
        <member name="T:Server.Core.RandomUtils">
            <summary>
            包含随机数生成器的有关方法。
            </summary>
        </member>
        <member name="M:Server.Core.RandomUtils.Create">
            <summary>
            创建一个新的<see cref="T:System.Random"/>实例。
            并确保在短时间内创建的实例具有不同的种子。
            </summary>
            <returns><see cref="T:System.Random"/>的实例。</returns>
        </member>
        <member name="T:Server.Core.RandomUtils.Crypto">
            <summary>
            提供生成强随机数的有关方法。
            </summary>
        </member>
        <member name="M:Server.Core.RandomUtils.Crypto.GetBytes(System.Byte[])">
            <summary>
            Fills an array of bytes with a cryptographically strong random sequence of values.
            </summary>
            <param name="data">The array to fill with cryptographically strong random bytes. </param>
        </member>
        <member name="M:Server.Core.RandomUtils.Crypto.GetNonZeroBytes(System.Byte[])">
            <summary>
            Fills an array of bytes with a cryptographically strong random sequence of nonzero values.
            </summary>
            <param name="data">The array to fill with cryptographically strong random nonzero bytes. </param>
        </member>
        <member name="M:Server.Core.RandomUtils.Crypto.NextDouble">
            <summary>
             Returns a random number between 0.0 and 1.0.
            </summary>
        </member>
        <member name="M:Server.Core.RandomUtils.Crypto.Next(System.Int32,System.Int32)">
            <summary>
             Returns a random number within the specified range.
            </summary>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">
            The exclusive upper bound of the random number returned. maxValue must be greater than or equal to minValue.
            </param>
        </member>
        <member name="M:Server.Core.RandomUtils.Crypto.Next">
            <summary>
             Returns a nonnegative random number.
            </summary>
        </member>
        <member name="M:Server.Core.RandomUtils.Crypto.Next(System.Int32)">
            <summary>
             Returns a nonnegative random number less than the specified maximum
            </summary>
            <param name="maxValue">
             The exclusive upper bound of the random number returned.
             maxValue must be greater than or equal to zero.
             </param>
        </member>
        <member name="M:Server.Core.Reflection.Emit.ConstructorInvokerGenerator.CreateDelegate(System.Type)">
            <summary>
            Creates a dynamic method for creating instances of the given type.
            The given type must have a public parameterless constructor.
            </summary>
            <param name="type">The type of the instances to be created.</param>
            <returns>
            A dynamic method for creating instances of the given type.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            The given type is an interface, or is abstract, 
            or does not have a public parameterless constructor.
            </exception>
        </member>
        <member name="M:Server.Core.Reflection.Emit.ConstructorInvokerGenerator.CreateDelegate(System.Reflection.ConstructorInfo)">
            <summary>
            Creates a dynamic method for creating instances from the given <see cref="T:System.Reflection.ConstructorInfo"/>.
            </summary>
            <param name="constructorInfo">The constructor from which instances will be created.</param>
            <returns>
            A dynamic method for creating instances from the given constructor, the method receives an
            array as the arguments of the constructor.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="constructorInfo"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The declaring type of the construcor is abstract.
            </exception>
        </member>
        <member name="M:Server.Core.Reflection.Emit.ConstructorInvokerGenerator.CreateDelegate(System.Reflection.ConstructorInfo,System.Boolean)">
            <summary>
            Creates a dynamic method for creating instances from the given <see cref="T:System.Reflection.ConstructorInfo"/>
            and indicates whether to perform a arguments validation in the dynamic method.
            </summary>
            <param name="constructorInfo">The constructor from which instances will be created.</param>
            <param name="validateArguments">
            If <c>true</c>, the dynamic method will validate if the array of arguments is null
            and check the length of the array to avoid the exceptions such as 
            <see cref="T:System.NullReferenceException"/> or <see cref="T:System.IndexOutOfRangeException"/>,
            an <see cref="T:System.ArgumentNullException"/> or <see cref="T:System.ArgumentException"/> will be thrown instead.
            </param>
            <returns>
            A dynamic method for creating instances from the given constructor, the method receives an
            array as the arguments of the constructor.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="constructorInfo"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The declaring type of the construcor is abstract.
            </exception>
        </member>
        <member name="T:Server.Core.Reflection.Emit.DelegateCache">
            <summary>
            Provides a thread-safe cache for storing the delegates.
            </summary>
        </member>
        <member name="M:Server.Core.Reflection.Emit.EmitUtils.CreateDynamicMethod(System.String,System.Type,System.Type[],System.Type)">
            <summary>
            Creates an instance of <see cref="T:System.Reflection.Emit.DynamicMethod"/>.
            </summary>
            <param name="methodName">The name of the dynamic method.</param>
            <param name="returnType">
            The return type of the dynamic method, null if the method has no return type.
            </param>
            <param name="parameterTypes">
            An array of <see cref="T:System.Type"/> specifying the types of the parameters of the dynamic method, 
            or null if the method has no parameters. 
            </param>
            <param name="owner">
            Specifies with which type the dynamic method is to be logically associated,
            if the type is an interface, the dynamic method will be associated to the module.
            </param>
        </member>
        <member name="M:Server.Core.Reflection.Emit.EmitUtils.BoxIfNeeded(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Performs a boxing operation if the given type is a value type.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="type">The type.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.EmitUtils.UnBoxIfNeeded(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Performs a unboxing operation (unbox.any) if the given type is a value type.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="type">The type.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.EmitUtils.CallMethod(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo)">
            <summary>
            Calls the method indicated by the passed method descriptor.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="methodInfo">The method descriptor.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.EmitUtils.CastValue(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Casts an object or value type passed by reference to the specified type
            and pushes the result onto the evaluation stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="targetType">The type.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.EmitUtils.CastReference(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Casts an object or value type passed by reference to the specified type
            and pushes the object reference or the value type pointer of the result
            onto the evaluation stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="targetType">The type.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.EmitUtils.LoadArgument(System.Reflection.Emit.ILGenerator,System.Int16)">
            <summary>
            Loads the argument at the specified index onto the evaluation stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="index">The index.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.EmitUtils.LoadArgumentAddress(System.Reflection.Emit.ILGenerator,System.Int16)">
            <summary>
            Loads the address of the argument at the specified index onto the evaluation stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="index"></param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.EmitUtils.LoadInt32(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            Pushes the integer value onto the evaluation stack as an int32.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="i">The integer value.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.EmitUtils.LoadLocalVariable(System.Reflection.Emit.ILGenerator,System.Int16)">
            <summary>
            Loads the local variable at the specified index onto the evaluation stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="index">The index of the local variable.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.EmitUtils.LoadLocalVariableAddress(System.Reflection.Emit.ILGenerator,System.Int16)">
            <summary>
            Loads the address of the local variable at a specific index onto the evaluation stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="index">The index of the local variable.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.EmitUtils.ThrowArgumentsNullExcpetion(System.Reflection.Emit.ILGenerator,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="paramName">The parameter name used to initialize the exception instance.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.EmitUtils.ThrowArgumentsExcpetion(System.Reflection.Emit.ILGenerator,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/>, specifying the message and the parameter name.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="message">The message.</param>
            <param name="paramName">The parameter name.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.FieldAccessorGenerator.CreateGetter(System.Reflection.FieldInfo)">
            <summary>
            Creates a dynamic method for getting the value of the given field.
            </summary>
            <param name="fieldInfo">
            The instance of <see cref="T:System.Reflection.FieldInfo"/> from which the dynamic method would be created.
            </param>
            <returns>
            A dynamic method for getting the value of the given field.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="fieldInfo"/> is null.</exception>
        </member>
        <member name="M:Server.Core.Reflection.Emit.FieldAccessorGenerator.CreateGetter``2(System.Reflection.FieldInfo)">
            <summary>
            Creates a dynamic method for getting the value of the given field.
            </summary>
            <typeparam name="TSource">The type of the intance from which to get the value.</typeparam>
            <typeparam name="TRet">The type of the return value.</typeparam>
            <param name="fieldInfo">
            The instance of <see cref="T:System.Reflection.FieldInfo"/> from which the dynamic method would be created.
            </param>
            <returns>
            A dynamic method for getting the value of the given field.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="fieldInfo"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            <typeparamref name="TSource"/> is not <see cref="T:System.Object"/>, and from which 
            the declaring type of the field is not assignable.
            -or-
            <typeparamref name="TRet"/> is not assignable from the type of the field.
            </exception>
        </member>
        <member name="M:Server.Core.Reflection.Emit.FieldAccessorGenerator.CreateSetter(System.Reflection.FieldInfo)">
            <summary>
            Creates a dynamic method for setting the value of the given field.
            </summary>
            <param name="fieldInfo">
            The instance of <see cref="T:System.Reflection.FieldInfo"/> from which the dynamic method would be created.
            </param>
            <returns>
            A dynamic method for setting the value of the given field.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="fieldInfo"/> is null.</exception>
            <remarks>
            In order to set a field on a value type succesfully, the value type must be boxed 
            in and <see cref="T:System.Object"/>, and unboxed from the object after the dynamic
            set mothod is called, e.g.
            <code>
              object boxedStruct = new SomeStruct();
              setter(s, "the value");
              SomeStruct unboxedStruct = (SomeStruct)boxedStruct;
            </code>
            </remarks>
        </member>
        <member name="M:Server.Core.Reflection.Emit.FieldAccessorGenerator.CreateSetter``2(System.Reflection.FieldInfo)">
            <summary>
            Creates a dynamic method for setting the value of the given field.
            </summary>
            <typeparam name="TTarget">The type of the instance the field belongs to.</typeparam>
            <typeparam name="TValue">The type of the field value to set.</typeparam>
            <param name="fieldInfo">
            The instance of <see cref="T:System.Reflection.FieldInfo"/> from which the dynamic method would be created.
            </param>
            <returns>
            A dynamic method for setting the value of the given field.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="fieldInfo"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            <typeparamref name="TTarget"/> is a value type.
            -or- 
            <typeparamref name="TTarget"/> is not <see cref="T:System.Object"/>, and from which 
            the declaring type of <paramref name="fieldInfo"/> is not assignable.
            -or-
            <typeparamref name="TValue"/> is not <see cref="T:System.Object"/>, and the type of field 
            is not assignable from <typeparamref name="TValue"/>.
            </exception>
            <remarks>
            In order to set a field on a value type succesfully, the value type must be boxed 
            in and <see cref="T:System.Object"/>, and unboxed from the object after the dynamic
            set mothod is called, e.g.
            <code>
              object boxedStruct = new SomeStruct();
              setter(s, "the value");
              SomeStruct unboxedStruct = (SomeStruct)boxedStruct;
            </code>
            </remarks>
        </member>
        <member name="M:Server.Core.Reflection.Emit.MethodInvokerGenerator.CreateDelegate(System.Reflection.MethodInfo)">
            <summary>
            Creates a dynamic method for invoking the method from the given <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
            <param name="methodInfo">
            The instance of <see cref="T:System.Reflection.MemberInfo"/> from which the dyanmic method is to be created.
            </param>
            <returns>
            The delegate has two parameters: the first for the object instance (will be ignored 
            if the method is static), and the second for the arguments of the method (will be 
            ignored if the method has no arguments)/
            The return value of the delegate will be <c>null</c> if the method has no return value.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="methodInfo"/> is null.</exception>
        </member>
        <member name="M:Server.Core.Reflection.Emit.MethodInvokerGenerator.CreateDelegate(System.Reflection.MethodInfo,System.Boolean)">
            <summary>
            Creates a dynamic method for invoking the method from the given <see cref="T:System.Reflection.MethodInfo"/>
            and indicates whether to perform a arguments validation in the dynamic method.
            </summary>
            <param name="methodInfo">
            The instance of <see cref="T:System.Reflection.MemberInfo"/> from which the dyanmic method is to be created.
            </param>
            <param name="validateArguments">
            If <c>true</c>, the dynamic method will validate if the instance or the array of arguments 
            is null and check the length of the array to avoid the exceptions such as 
            <see cref="T:System.NullReferenceException"/> or <see cref="T:System.IndexOutOfRangeException"/>,
            an <see cref="T:System.ArgumentNullException"/> or <see cref="T:System.ArgumentException"/> will be thrown instead.
            </param>
            <returns>
            The delegate has two parameters: the first for the object instance (will be ignored 
            if the method is static), and the second for the arguments of the method (will be 
            ignored if the method has no arguments)/
            The return value of the delegate will be <c>null</c> if the method has no return value.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="methodInfo"/> is null.</exception>
        </member>
        <member name="T:Server.Core.Reflection.Emit.OpCodeExtention">
            <summary>
            Provides a set of extention methods for <see cref="T:System.Reflection.Emit.ILGenerator"/>
            for emitting the <see cref="T:System.Reflection.Emit.OpCode"/>s.
            </summary>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Bge(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target instruction if the first value is greater than
            or equal to the second value.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="label">The label.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Bge_S(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target instruction (short form) if the first value 
            is greater than or equal to the second value.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="label">The label.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Box(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Converts a value type to an object reference (type O).
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="type">The value type.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Br(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Unconditionally transfers control to a target instruction.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="label">The label.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Br_S(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Unconditionally transfers control to a target instruction (short form).
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="label">The label.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Brfalse(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target instruction if value is <c>false</c>, 
            a null reference, or zero. 
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="label">The label.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Brfalse_S(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target instruction (short form) if value is <c>false</c>, 
            a null reference, or zero. 
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="label">The label.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Brtrue(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target instruction if value is <c>true</c>, 
            not null, or non-zero.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="label">The label.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Brtrue_S(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target instruction (short form) if value is <c>true</c>, 
            not null, or non-zero.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="label">The label.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Call(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo)">
            <summary>
            Calls the method indicated by the passed method descriptor.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="methodInfo">The mechod to call.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Callvirt(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo)">
            <summary>
            Calls a late-bound method on an object, pushing the return value onto the evaluation stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="methodInfo">The mechod to call.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Castclass(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Attempts to cast an object passed by reference to the specified class.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="type">The target class.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Conv_I(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the value on top of the evaluation stack to native int.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Conv_I1(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the value on top of the evaluation stack to int8, then extends (pads) it to int32.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Conv_I2(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the value on top of the evaluation stack to int16, then extends (pads) it to int32.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Conv_I4(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the value on top of the evaluation stack to int32.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Conv_I8(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the value on top of the evaluation stack to int64.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Initobj(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Initializes each field of the value type at a specified address to a null reference 
            or a 0 of the appropriate primitive type.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="type">The value type.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Ldarg_0(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads the argument at index 0 onto the evaluation stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Ldarg_1(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads the argument at index 1 onto the evaluation stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Ldarg_2(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads the argument at index 2 onto the evaluation stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Ldarg_3(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads the argument at index 3 onto the evaluation stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Ldarg_S(System.Reflection.Emit.ILGenerator,System.Byte)">
            <summary>
            Loads the argument (referenced by a specified short form index) onto the evaluation stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="index">The index.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Ldarg(System.Reflection.Emit.ILGenerator,System.Int16)">
            <summary>
            Loads an argument (referenced by a specified index value) onto the stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="index">The index.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Ldarga_S(System.Reflection.Emit.ILGenerator,System.Byte)">
            <summary>
            Load an argument address, in short form, onto the evaluation stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="index">The index.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Ldarga(System.Reflection.Emit.ILGenerator,System.Int16)">
            <summary>
            Load an argument address onto the evaluation stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="index">The index.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Ldfld(System.Reflection.Emit.ILGenerator,System.Reflection.FieldInfo)">
            <summary>
            Finds the value of a field in the object whose reference is currently on the evaluation stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="fieldInfo">The target field.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Ldc_I4_M1(System.Reflection.Emit.ILGenerator)">
            <summary>
            Pushes the integer value of -1 onto the evaluation stack as an int32.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Ldc_I4_0(System.Reflection.Emit.ILGenerator)">
            <summary>
            Pushes the integer value of 0 onto the evaluation stack as an int32.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Ldc_I4_1(System.Reflection.Emit.ILGenerator)">
            <summary>
            Pushes the integer value of 1 onto the evaluation stack as an int32.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Ldc_I4_2(System.Reflection.Emit.ILGenerator)">
            <summary>
            Pushes the integer value of 2 onto the evaluation stack as an int32.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Ldc_I4_3(System.Reflection.Emit.ILGenerator)">
            <summary>
            Pushes the integer value of 3 onto the evaluation stack as an int32.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Ldc_I4_4(System.Reflection.Emit.ILGenerator)">
            <summary>
            Pushes the integer value of 4 onto the evaluation stack as an int32.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Ldc_I4_5(System.Reflection.Emit.ILGenerator)">
            <summary>
            Pushes the integer value of 5 onto the evaluation stack as an int32.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Ldc_I4_6(System.Reflection.Emit.ILGenerator)">
            <summary>
            Pushes the integer value of 6 onto the evaluation stack as an int32.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Ldc_I4_7(System.Reflection.Emit.ILGenerator)">
            <summary>
            Pushes the integer value of 7 onto the evaluation stack as an int32.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Ldc_I4_8(System.Reflection.Emit.ILGenerator)">
            <summary>
            Pushes the integer value of 8 onto the evaluation stack as an int32.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Ldc_I4_S(System.Reflection.Emit.ILGenerator,System.Byte)">
            <summary>
            Pushes the supplied int8 value onto the evaluation stack as an int32, short form.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="value">The value.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Ldc_I4(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            Pushes a supplied value of type int32 onto the evaluation stack as an int32.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="value">The value.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Ldc_I8(System.Reflection.Emit.ILGenerator,System.Int64)">
            <summary>
            Pushes a supplied value of type int64 onto the evaluation stack as an int64.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="value">The value.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Ldc_R4(System.Reflection.Emit.ILGenerator,System.Single)">
            <summary>
            Pushes a supplied value of type float32 onto the evaluation stack as type F (float).
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="value">The value.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Ldc_R8(System.Reflection.Emit.ILGenerator,System.Double)">
            <summary>
            Pushes a supplied value of type float64 onto the evaluation stack as type F (float).
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="value">The value.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Ldelem_Ref(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads the element containing an object reference at a specified array index onto 
            the top of the evaluation stack as type O (object reference).
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Ldlen(System.Reflection.Emit.ILGenerator)">
            <summary>
            Pushes the number of elements of a zero-based, one-dimensional array onto the evaluation stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Ldloc_0(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads the local variable at index 0 onto the evaluation stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Ldloc_1(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads the local variable at index 1 onto the evaluation stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Ldloc_2(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads the local variable at index 2 onto the evaluation stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Ldloc_3(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads the local variable at index 3 onto the evaluation stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Ldloc_S(System.Reflection.Emit.ILGenerator,System.Byte)">
            <summary>
            Loads the local variable at a specific index onto the evaluation stack, short form.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="index">The index.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Ldloc_S(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Loads the local variable at a specific index onto the evaluation stack, short form.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="localBuilder">The instance of <see cref="T:System.Reflection.Emit.LocalBuilder"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Ldloc(System.Reflection.Emit.ILGenerator,System.Int16)">
            <summary>
            Loads the local variable at a specific index onto the evaluation stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="index">The index.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Ldloc(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Loads the local variable at a specific index onto the evaluation stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="localBuilder">The instance of <see cref="T:System.Reflection.Emit.LocalBuilder"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Ldloca_S(System.Reflection.Emit.ILGenerator,System.Byte)">
            <summary>
            Loads the address of the local variable at a specific index onto
            the evaluation stack, short form.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="index">The index.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Ldloca(System.Reflection.Emit.ILGenerator,System.Int16)">
            <summary>
            Loads the address of the local variable at a specific index onto the evaluation stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="index">The index.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Ldsfld(System.Reflection.Emit.ILGenerator,System.Reflection.FieldInfo)">
            <summary>
            Pushes the value of a static field onto the evaluation stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="fieldInfo">The static field.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Ldstr(System.Reflection.Emit.ILGenerator,System.String)">
            <summary>
            Pushes a new object reference to a string literal stored in the metadata.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="value">The string.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Newobj(System.Reflection.Emit.ILGenerator,System.Reflection.ConstructorInfo)">
            <summary>
            Creates a new object or a new instance of a value type, pushing an object reference (type O) 
            onto the evaluation stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="constructorInfo">The constructor of the type.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Ret(System.Reflection.Emit.ILGenerator)">
            <summary>
            Returns from the current method, pushing a return value (if present) from 
            the callee's evaluation stack onto the caller's evaluation stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Stfld(System.Reflection.Emit.ILGenerator,System.Reflection.FieldInfo)">
            <summary>
            Replaces the value stored in the field of an object reference or pointer with a new value.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="fieldInfo">The target field.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Stloc_0(System.Reflection.Emit.ILGenerator)">
            <summary>
            Pops the current value from the top of the evaluation stack and stores it 
            in a the local variable list at index 0.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Stloc_1(System.Reflection.Emit.ILGenerator)">
            <summary>
            Pops the current value from the top of the evaluation stack and stores it 
            in a the local variable list at index 1.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Stloc_2(System.Reflection.Emit.ILGenerator)">
            <summary>
            Pops the current value from the top of the evaluation stack and stores it 
            in a the local variable list at index 2.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Stloc_3(System.Reflection.Emit.ILGenerator)">
            <summary>
            Pops the current value from the top of the evaluation stack and stores it 
            in a the local variable list at index 3.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Stloc_S(System.Reflection.Emit.ILGenerator,System.Byte)">
            <summary>
            Pops the current value from the top of the evaluation stack and stores it 
            in a the local variable list at index (short form).
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="index">The index.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Stloc_S(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Pops the current value from the top of the evaluation stack and stores it 
            in a the local variable list at index (short form).
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="localBuilder">The instance of <see cref="T:System.Reflection.Emit.LocalBuilder"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Stloc(System.Reflection.Emit.ILGenerator,System.Int16)">
            <summary>
            Pops the current value from the top of the evaluation stack and stores it 
            in a the local variable list at a specified index.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="index">The index.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Stloc(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Pops the current value from the top of the evaluation stack and stores it 
            in a the local variable list at a specified index.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="localBuilder">The instance of <see cref="T:System.Reflection.Emit.LocalBuilder"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Stsfld(System.Reflection.Emit.ILGenerator,System.Reflection.FieldInfo)">
            <summary>
            Replaces the value of a static field with a value from the evaluation stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="fieldInfo">The static field.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Throw(System.Reflection.Emit.ILGenerator)">
            <summary>
            Throws the exception object currently on the evaluation stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Unbox(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Converts the boxed representation of a value type to its unboxed form.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="type">The value type.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.OpCodeExtention.Unbox_Any(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Converts the boxed representation of a type specified 
            in the instruction to its unboxed form.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="type">The type.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:Server.Core.Reflection.Emit.PropertyAccessorGenerator.CreateGetter(System.Reflection.PropertyInfo)">
            <summary>
            Creates a dynamic method for getting the value of the given property.
            </summary>
            <param name="propertyInfo">
            The instance of <see cref="T:System.Reflection.PropertyInfo"/> from which the dynamic method would be created.
            </param>
            <returns>
            A dynamic method for getting the value of the given property.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyInfo"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            The property is an indexer.
            -or-
            The get accessor method from <paramref name="propertyInfo"/> cannot be retrieved.
            </exception>
        </member>
        <member name="M:Server.Core.Reflection.Emit.PropertyAccessorGenerator.CreateGetter(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Creates a dynamic method for getting the value of the given property.
            </summary>
            <param name="propertyInfo">
            The instance of <see cref="T:System.Reflection.PropertyInfo"/> from which the dynamic method would be created.
            </param>
            <param name="nonPublic">
            Indicates whether to use the non-public property getter method.
            </param>
            <returns>
            A dynamic method for getting the value of the given property.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyInfo"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            The property is an indexer.
            -or-
            The get accessor method from <paramref name="propertyInfo"/> cannot be retrieved.
            </exception>
        </member>
        <member name="M:Server.Core.Reflection.Emit.PropertyAccessorGenerator.CreateGetter``2(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Creates a dynamic method for getting the value of the given property.
            </summary>
            <typeparam name="TSource">The type of the intance from which to get the value.</typeparam>
            <typeparam name="TRet">The type of the return value.</typeparam>
            <param name="propertyInfo">
            The instance of <see cref="T:System.Reflection.PropertyInfo"/> from which the dynamic method would be created.
            </param>
            <param name="nonPublic">
            Indicates whether to use the non-public property getter method.
            </param>
            <returns>
            A dynamic method for getting the value of the given property.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyInfo"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            The property is an indexer.
            -or -
            The get accessor method from <paramref name="propertyInfo"/> cannot be retrieved.
            -or-
            <typeparamref name="TSource"/> is not <see cref="T:System.Object"/>, and from which 
            the declaring type the property is not assignable.
            -or-
            <typeparamref name="TRet"/> is not assignable from the property type.
            </exception>
        </member>
        <member name="M:Server.Core.Reflection.Emit.PropertyAccessorGenerator.CreateSetter(System.Reflection.PropertyInfo)">
            <summary>
            Creates a dynamic method for setting the value of the given property.
            </summary>
            <param name="propertyInfo">
            The instance of <see cref="T:System.Reflection.PropertyInfo"/> from which the dynamic method would be created.
            </param>
            <returns>
            A dynamic method for setting the value of the given property.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyInfo"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            The property is an indexer.
            -or-
            The set accessor method from the <paramref name="propertyInfo"/> cannot be retrieved.
            </exception>
            <remarks>
            In order to set a property value on a value type succesfully, the value type must be boxed 
            in and <see cref="T:System.Object"/>, and unboxed from the object after the dynamic
            set mothod is called, e.g.
            <code>
              object boxedStruct = new SomeStruct();
              setter(s, "the value");
              SomeStruct unboxedStruct = (SomeStruct)boxedStruct;
            </code>
            </remarks>
        </member>
        <member name="M:Server.Core.Reflection.Emit.PropertyAccessorGenerator.CreateSetter(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Creates a dynamic method for setting the value of the given property.
            </summary>
            <param name="propertyInfo">
            The instance of <see cref="T:System.Reflection.PropertyInfo"/> from which the dynamic method would be created.
            </param>
            <param name="nonPublic">
            Indicates whether to use the non-public property setter method.
            </param>
            <returns>
            A dynamic method for setting the value of the given property.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyInfo"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            The property is an indexer.
            -or-
            The set accessor method from the <paramref name="propertyInfo"/> cannot be retrieved.
            </exception>
            <remarks>
            In order to set a property value on a value type succesfully, the value type must be boxed 
            in and <see cref="T:System.Object"/>, and unboxed from the object after the dynamic
            set mothod is called, e.g.
            <code>
              object boxedStruct = new SomeStruct();
              setter(s, "the value");
              SomeStruct unboxedStruct = (SomeStruct)boxedStruct;
            </code>
            </remarks>
        </member>
        <member name="M:Server.Core.Reflection.Emit.PropertyAccessorGenerator.CreateSetter``2(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Creates a dynamic method for setting the value of the given property.
            </summary>
            <typeparam name="TTarget">The type of the instance the property belongs to.</typeparam>
            <typeparam name="TValue">The type of the value to set.</typeparam>
            <param name="propertyInfo">
            The instance of <see cref="T:System.Reflection.PropertyInfo"/> from which the dynamic method would be created.
            </param>
            <param name="nonPublic">
            Indicates whether to use the non-public property setter method.
            </param>
            <returns>
            A dynamic method for setting the value of the given property.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyInfo"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            The property is an indexer.
            -or-
            The set accessor method from the <paramref name="propertyInfo"/> cannot be retrieved.
            -or-
            <typeparamref name="TTarget"/> is a value type.
            -or-
            <typeparamref name="TTarget"/> is not <see cref="T:System.Object"/>, and from which 
            the declaring type of <paramref name="propertyInfo"/> is not assignable.
            -or-
            <typeparamref name="TValue"/> is not <see cref="T:System.Object"/>, and the type of property 
            is not assignable from <typeparamref name="TValue"/>. 
            </exception>
            <remarks>
            In order to set a property value on a value type succesfully, the value type must be boxed 
            in and <see cref="T:System.Object"/>, and unboxed from the object after the dynamic
            set mothod is called, e.g.
            <code>
              object boxedStruct = new SomeStruct();
              setter(s, "the value");
              SomeStruct unboxedStruct = (SomeStruct)boxedStruct;
            </code>
            </remarks>
        </member>
        <member name="T:Server.Core.Reflection.ReflectionUtils">
            <summary>
            包含类型反射判断相关的方法。
            </summary>
        </member>
        <member name="M:Server.Core.Reflection.ReflectionUtils.IsNullable(System.Type)">
            <summary>
            判断给定类型是否可被赋值为null。
            </summary>
            <param name="t">类型。</param>
            <returns>若类型为引用类型，返回<c>true</c>；否则返回<c>false</c>。</returns>
            <exception cref="T:System.ArgumentNullException">当<paramref name="t"/>为<c>null</c>。</exception>
        </member>
        <member name="M:Server.Core.Reflection.ReflectionUtils.IsNullableType(System.Type)">
            <summary>
            判断给定类型是否是<see cref="T:System.Nullable`1"/>的实例。
            </summary>
            <param name="t">类型。</param>
            <returns>若类型为<see cref="T:System.Nullable`1"/>，返回<c>true</c>；否则返回<c>false</c>。</returns>
            <exception cref="T:System.ArgumentNullException">当<paramref name="t"/>为<c>null</c>。</exception>
        </member>
        <member name="M:Server.Core.Reflection.ReflectionUtils.GetUnderlyingType(System.Type)">
            <summary>
            获取类型或类型内包含的不可空类型（当类型为<see cref="T:System.Nullable`1"/>时）。
            </summary>
            <param name="t">类型。</param>
            <returns>最终类型，若类型为<see cref="T:System.Nullable`1"/>，返回其内部类型。</returns>
            <exception cref="T:System.ArgumentNullException">当<paramref name="t"/>为<c>null</c>。</exception>
        </member>
        <member name="M:Server.Core.Reflection.ReflectionUtils.IsOrIsSubClassOf(System.Type,System.Type)">
            <summary>
            判断给定类型是否是目标类型或是目标类型的子类。
            </summary>
            <param name="thisType">待判断类型。</param>
            <param name="targetType">目标类型。</param>
            <returns>若给定类型是目标类型或是目标类型的子类，返回<c>true</c>；否则返回<c>false</c>。</returns>
            <exception cref="T:System.ArgumentNullException">当<paramref name="thisType"/>为<c>null</c>。</exception>
            <exception cref="T:System.ArgumentNullException">当<paramref name="targetType"/>为<c>null</c>。</exception>
        </member>
        <member name="M:Server.Core.Reflection.ReflectionUtils.GetPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            获取Lambda表达式所指向的属性名称。
            </summary>
            <param name="memberAccessor">成员访问表达式。</param>
            <returns>属性名称。</returns>
            <exception cref="T:System.ArgumentNullException">当<paramref name="memberAccessor"/>为<c>null</c>。</exception>
            <exception cref="T:System.ArgumentException">
            当<paramref name="memberAccessor"/>的<see cref="P:System.Linq.Expressions.LambdaExpression.Body"/>不是属性访问。
            </exception>
        </member>
        <member name="M:Server.Core.Reflection.ReflectionUtils.GetGenericArguments(System.Type,System.Type)">
            <summary>
            从给定的类型上解析泛型参数表，并指定解析参数时所使用的泛型类型定义。
            </summary>
            <param name="type">从此类型上解析泛型参数表。</param>
            <param name="genericTypeDefinition">泛型类型定义。可以是接口，也可以是非接口类型。</param>
            <returns>类型的泛型参数的数组，其元素顺序与类型定义的顺序一致。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/>为<c>null</c>。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="genericTypeDefinition"/>为<c>null</c>。</exception>
            <exception cref="T:System.ArgumentException"><paramref name="genericTypeDefinition"/>不是泛型类型定义。</exception>
            <example>
            一个类型可以继承多个泛型类型，例如：
            GenericClass{T} : IDictionary{T, int}, ICollection{string}
            此时，对于GenericClass{long}，使用泛型定义IDictionary{,}，获取参数表类型是 [long, int]；
            而对于泛型定义ICollection{}则结果是 [string]；
            </example>
        </member>
        <member name="M:Server.Core.Reflection.ReflectionUtils.IsAnonymousType(System.Type)">
            <summary>
            判断给定的类型是否是匿名类型。
            </summary>
            <param name="type">待判断的类型。</param>
            <returns>true若给定的类型是匿名类型；否则为false。</returns>
        </member>
        <member name="T:Server.Core.Security.BooMessageCryptoUtils">
            <summary>
            包含BooMessage加解密有关的方法。
            </summary>
        </member>
        <member name="M:Server.Core.Security.BooMessageCryptoUtils.Encrypt(System.Byte[],System.Byte[])">
            <summary>
            执行BooMessage的加密。
            </summary>
            <param name="desKey">报文加解密使用的DES秘钥。</param>
            <param name="input">明文。</param>
            <returns>密文。</returns>
        </member>
        <member name="M:Server.Core.Security.BooMessageCryptoUtils.Encrypt(System.Byte[],System.Byte[],System.Byte[]@)">
            <summary>
            执行BooMessage的加密。
            </summary>
            <param name="desKey">报文加解密使用的DES秘钥。</param>
            <param name="input">明文。</param>
            <param name="factor">用于自行加密异或操作的8字节数据。</param>
            <returns>密文。</returns>
        </member>
        <member name="M:Server.Core.Security.BooMessageCryptoUtils.Decrypt(System.Byte[],System.Byte[])">
            <summary>
            执行同步推报文的解密。
            </summary>
            <param name="desKey">报文加解密使用的DES秘钥。</param>
            <param name="input">密文。</param>
            <returns>明文。</returns>
        </member>
        <member name="M:Server.Core.Security.BooMessageCryptoUtils.Decrypt(System.Byte[],System.Byte[],System.Byte[]@)">
            <summary>
            执行同步推报文的解密。
            </summary>
            <param name="desKey">报文加解密使用的DES秘钥。</param>
            <param name="input">密文。</param>
            <param name="factor">用于自行加密异或操作的8字节数据。</param>
            <returns>明文。</returns>
        </member>
        <member name="T:Server.Core.Security.DesCryptoUtils">
            <summary>
            提供DES加密算法的相关方法。
            </summary>
        </member>
        <member name="M:Server.Core.Security.DesCryptoUtils.GenerateKey">
            <summary>
            生成一个DES秘钥（8字节）。
            </summary>
            <returns>秘钥。</returns>
        </member>
        <member name="M:Server.Core.Security.DesCryptoUtils.Encrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            DES加密。
            </summary>
            <param name="key">密钥(8字节)。</param>
            <param name="iv">偏移量(8字节)。</param>
            <param name="plain">明文。</param>
            <returns>密文。</returns>
            <exception cref="T:System.ArgumentException">当密钥长度错误。</exception>
            <exception cref="T:System.ArgumentNullException">当参数为null。</exception>
        </member>
        <member name="M:Server.Core.Security.DesCryptoUtils.EncryptFile(System.Byte[],System.Byte[],System.String,System.String)">
            <summary>
            加密文件并将密文写入目标文件。
            </summary>
            <param name="key">密钥。</param>
            <param name="iv">偏移量。</param>		
            <param name="srcFile">源文件的路径。</param>
            <param name="destFile">目标文件路径，若文件已存在，将被覆盖。</param>
        </member>
        <member name="M:Server.Core.Security.DesCryptoUtils.Decrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            DES解密。
            </summary>
            <param name="key">密钥(8字节)。</param>
            <param name="iv">偏移量(8字节)。</param>
            <param name="cipher">密文。</param>
            <returns>明文。</returns>
        </member>
        <member name="M:Server.Core.Security.DesCryptoUtils.DecryptFile(System.Byte[],System.Byte[],System.String,System.String)">
            <summary>
            DES解密。
            </summary>
            <param name="key">密钥(8字节)。</param>
            <param name="iv">偏移量(8字节)。</param>
            <param name="srcFile">源文件的路径。</param>
            <param name="destFile">目标文件路径，若文件已存在，将被覆盖。</param>
            <returns>明文。</returns>
        </member>
        <member name="T:Server.Core.Security.RandomNumberGeneratorExtention">
            <summary>
            Includes extention methods for <see cref="T:System.Security.Cryptography.RandomNumberGenerator"/>.
            </summary>
        </member>
        <member name="M:Server.Core.Security.RandomNumberGeneratorExtention.NextDouble(System.Security.Cryptography.RandomNumberGenerator)">
            <summary>
             Returns a random number between 0.0 and 1.0.
            </summary>
             <param name="generator">The instance of <see cref="T:System.Security.Cryptography.RandomNumberGenerator"/>.</param>
        </member>
        <member name="M:Server.Core.Security.RandomNumberGeneratorExtention.Next(System.Security.Cryptography.RandomNumberGenerator,System.Int32,System.Int32)">
            <summary>
             Returns a random number within the specified range.
            </summary>
            <param name="generator">The instance of <see cref="T:System.Security.Cryptography.RandomNumberGenerator"/>.</param>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">
            The exclusive upper bound of the random number returned.
            maxValue must be greater than or equal to minValue.
            </param>
        </member>
        <member name="M:Server.Core.Security.RandomNumberGeneratorExtention.Next(System.Security.Cryptography.RandomNumberGenerator)">
            <summary>
             Returns a nonnegative random number.
            </summary>
             <param name="generator">The instance of <see cref="T:System.Security.Cryptography.RandomNumberGenerator"/>.</param>
        </member>
        <member name="M:Server.Core.Security.RandomNumberGeneratorExtention.Next(System.Security.Cryptography.RandomNumberGenerator,System.Int32)">
            <summary>
             Returns a nonnegative random number less than the specified maximum
            </summary>
             <param name="generator">The instance of <see cref="T:System.Security.Cryptography.RandomNumberGenerator"/>.</param>
            <param name="maxValue">
             The exclusive upper bound of the random number returned. 
             maxValue must be greater than or equal to zero.
             </param>
        </member>
        <member name="T:Server.Core.Serialization.BooMessaging.BooCollectionMessage`1">
            <summary>
            定义包含一个总数量和集合列表的接口回执结构。
            </summary>
            <typeparam name="T">集合中元素的类型。</typeparam>
            <remarks>这是BooMessage通信中最常见的数据结构之一。</remarks>
        </member>
        <member name="M:Server.Core.Serialization.BooMessaging.BooCollectionMessage`1.#ctor">
            <summary>
            初始化<see cref="T:Server.Core.Serialization.BooMessaging.BooCollectionMessage`1"/>的新实例。
            </summary>
        </member>
        <member name="M:Server.Core.Serialization.BooMessaging.BooCollectionMessage`1.#ctor(System.Int32,System.Collections.Generic.IList{`0})">
            <summary>
            初始化<see cref="T:Server.Core.Serialization.BooMessaging.BooCollectionMessage`1"/>的新实例。
            </summary>
            <param name="count">元素的总数量。</param>
            <param name="items">集合列表。</param>
        </member>
        <member name="F:Server.Core.Serialization.BooMessaging.BooCollectionMessage`1.Count">
            <summary>
            元素的总数量。
            </summary>
        </member>
        <member name="F:Server.Core.Serialization.BooMessaging.BooCollectionMessage`1.Items">
            <summary>
            集合列表。
            </summary>
        </member>
        <member name="T:Server.Core.Serialization.BooMessaging.BooContract">
            <summary>
            定义BooMessage数据到CLR类型间的映射契约。
            </summary>
        </member>
        <member name="M:Server.Core.Serialization.BooMessaging.BooContract.#ctor(System.Type)">
            <summary>
            初始化类型的新实例。
            </summary>
            <param name="type">此契约关联的类型。</param>
        </member>
        <member name="M:Server.Core.Serialization.BooMessaging.BooContract.Write(Server.Core.Serialization.BooMessaging.BooWriter,System.Object)">
            <summary>
            使用当前契约向指定的<see cref="T:Server.Core.Serialization.BooMessaging.BooWriter"/>中写入数据。
            </summary>
            <param name="writer"><see cref="T:Server.Core.Serialization.BooMessaging.BooWriter"/>的实例。</param>
            <param name="obj">写入的数据。</param>
        </member>
        <member name="M:Server.Core.Serialization.BooMessaging.BooContract.Read(Server.Core.Serialization.BooMessaging.BooReader)">
            <summary>
            使用当前契约从指定的<see cref="T:Server.Core.Serialization.BooMessaging.BooReader"/>中读取数据。
            若没有读取到数据，返回<c>null</c>。
            </summary>
            <param name="reader"><see cref="T:Server.Core.Serialization.BooMessaging.BooReader"/>的实例。</param>
            <returns>读取到的数据。若没有读取到数据，返回<c>null</c>。</returns>
        </member>
        <member name="M:Server.Core.Serialization.BooMessaging.BooContract.DoWrite(Server.Core.Serialization.BooMessaging.BooWriter,System.Object)">
            <summary>
            重写此方法以控制数据写入过程。
            </summary>
            <param name="writer"><see cref="T:Server.Core.Serialization.BooMessaging.BooWriter"/>的实例。</param>
            <param name="obj">写入的数据。</param>
        </member>
        <member name="M:Server.Core.Serialization.BooMessaging.BooContract.DoRead(Server.Core.Serialization.BooMessaging.BooReader)">
            <summary>
            重写此方法以控制数据读取过程。
            </summary>
            <param name="reader"><see cref="T:Server.Core.Serialization.BooMessaging.BooReader"/>的实例。</param>
            <returns>读取到的数据。</returns>
        </member>
        <member name="P:Server.Core.Serialization.BooMessaging.BooContract.UnderlyingType">
            <summary>
            获取当前契约所关联的CLR类型。
            </summary>
        </member>
        <member name="P:Server.Core.Serialization.BooMessaging.BooContract.IsPackage">
            <summary>
            true若当前契约用于映射一个BooMessage数据包；false则表示当前契约映射一个字段。
            </summary>
        </member>
        <member name="T:Server.Core.Serialization.BooMessaging.BooContractResolver">
            <summary>
            包含BooMessage契约解析与创建的有关方法。
            </summary>
        </member>
        <member name="M:Server.Core.Serialization.BooMessaging.BooContractResolver.IsBooScalarType(System.Type)">
            <summary>
            判断指定的类型是否可作为BooMessage中的简单字段类型，即不作为数据包的类型。
            </summary>
            <param name="type">类型。</param>
            <returns>true若指定类型是BooMessage中的简单字段类型；否则为false。</returns>
        </member>
        <member name="M:Server.Core.Serialization.BooMessaging.BooContractResolver.ResolveContract(System.Object)">
            <summary>
            获取序列化指定对象所需的BooMessage契约。
            </summary>
            <param name="obj">对象实例。</param>
            <returns>BooMessage契约。</returns>
        </member>
        <member name="M:Server.Core.Serialization.BooMessaging.BooContractResolver.ResolveContract(System.Type)">
            <summary>
            获取序列化指定类型所需的BooMessage契约。
            </summary>
            <param name="type">CLR类型。</param>
            <returns>BooMessage契约。</returns>
        </member>
        <member name="M:Server.Core.Serialization.BooMessaging.BooContractResolver.IsBooParamContainer(System.Type)">
            <summary>
            判定给定的类型中是否有至少有一个成员包含<see cref="T:Server.Core.Serialization.BooMessaging.BooParamAttribute"/>标记。
            </summary>
            <param name="type">类型。</param>
            <returns>true若至少有一个类型成员包含<see cref="T:Server.Core.Serialization.BooMessaging.BooParamAttribute"/>标记；否则为false。</returns>
        </member>
        <member name="T:Server.Core.Serialization.BooMessaging.BooConvert">
            <summary>
            包含BooMessage序列化与反序列化有关的方法入口。
            </summary>
        </member>
        <member name="M:Server.Core.Serialization.BooMessaging.BooConvert.Serialize(System.Object)">
            <summary>
            将指定对象序列化为BooMessage。
            </summary>
            <param name="obj">序列化对象。</param>
            <returns>BooMessage数据包。</returns>
        </member>
        <member name="M:Server.Core.Serialization.BooMessaging.BooConvert.Deserialize(System.Byte[],System.Type)">
            <summary>
            将BooMessage数据包反序列化为指定类型的CLR对象。
            </summary>
            <param name="data">BooMessage数据包。</param>
            <param name="type">反序列化到此类型。</param>
            <returns>反序列化后的对象。</returns>
        </member>
        <member name="M:Server.Core.Serialization.BooMessaging.BooConvert.Deserialize``1(System.Byte[])">
            <summary>
            将BooMessage数据包反序列化为指定类型的CLR对象。
            </summary>
            <typeparam name="T">反序列化到此类型。</typeparam>
            <param name="data">BooMessage数据包。</param>
            <returns>反序列化后的对象。</returns>
        </member>
        <member name="T:Server.Core.Serialization.BooMessaging.BooFieldAttribute">
            <summary>
            标记指定的成员在BooMessage序列化过程中作为一个BooMessage字段或包。
            </summary>
        </member>
        <member name="M:Server.Core.Serialization.BooMessaging.BooFieldAttribute.#ctor">
            <summary>
            初始化类型的新实例。
            </summary>
        </member>
        <member name="M:Server.Core.Serialization.BooMessaging.BooFieldAttribute.#ctor(System.Int32)">
            <summary>
            初始化类型的新实例，并指定成员在BooMessage中字段或包的位置。
            </summary>
            <param name="order"></param>
        </member>
        <member name="P:Server.Core.Serialization.BooMessaging.BooFieldAttribute.Order">
            <summary>
            获取当前成员在BooMessage中字段或包的位置。
            </summary>
        </member>
        <member name="P:Server.Core.Serialization.BooMessaging.BooFieldAttribute.PackagePolicy">
            <summary>
            获取或设置当前成员在BooMessage中是否被放在数据包中。
            </summary>
        </member>
        <member name="T:Server.Core.Serialization.BooMessaging.BooMessageException">
            <summary>
            表示BooMessage数据包处理过程中的错误。
            </summary>
        </member>
        <member name="M:Server.Core.Serialization.BooMessaging.BooMessageException.#ctor(System.String)">
            <summary>
            初始化<see cref="T:Server.Core.Serialization.BooMessaging.BooMessageException"/>的新实例。
            </summary>
            <param name="message">错误信息。</param>
        </member>
        <member name="M:Server.Core.Serialization.BooMessaging.BooMessageException.#ctor(System.String,System.Exception)">
            <summary>
            初始化<see cref="T:Server.Core.Serialization.BooMessaging.BooMessageException"/>的新实例。
            </summary>
            <param name="message">错误信息。</param>
            <param name="innerException">引起此错误的异常。</param>
        </member>
        <member name="T:Server.Core.Serialization.BooMessaging.BooObjectMessage`1">
            <summary>
            定义仅包含单项数据的接口回执结构。
            </summary>
            <typeparam name="T">数据的类型。</typeparam>
            <remarks>这是BooMessage通信中最常见的数据结构之一。</remarks>
        </member>
        <member name="M:Server.Core.Serialization.BooMessaging.BooObjectMessage`1.#ctor">
            <summary>
            初始化<see cref="T:Server.Core.Serialization.BooMessaging.BooObjectMessage`1"/>的新实例。
            </summary>
        </member>
        <member name="M:Server.Core.Serialization.BooMessaging.BooObjectMessage`1.#ctor(`0)">
            <summary>
            初始化<see cref="T:Server.Core.Serialization.BooMessaging.BooObjectMessage`1"/>的新实例。
            </summary>
            <param name="data">回执内包含的数据。</param>
        </member>
        <member name="F:Server.Core.Serialization.BooMessaging.BooObjectMessage`1.Data">
            <summary>
            回执内包含的数据。
            </summary>
        </member>
        <member name="T:Server.Core.Serialization.BooMessaging.BooPackagePolicy">
            <summary>
            用于指定BooMessage字段在序列化/反序列化时是否被放在数据包中。
            </summary>
        </member>
        <member name="F:Server.Core.Serialization.BooMessaging.BooPackagePolicy.Default">
            <summary>
            默认。由字段类型决定。
            </summary>
        </member>
        <member name="F:Server.Core.Serialization.BooMessaging.BooPackagePolicy.Package">
            <summary>
            字段将被放在一个数据包中。
            </summary>
        </member>
        <member name="F:Server.Core.Serialization.BooMessaging.BooPackagePolicy.Plain">
            <summary>
            字段将不会被放在数据包中。
            </summary>
        </member>
        <member name="T:Server.Core.Serialization.BooMessaging.BooParamAttribute">
            <summary>
            标记指定的成员在基于BooMessage通信的WebAPI中映射到URL参数。
            </summary>
        </member>
        <member name="M:Server.Core.Serialization.BooMessaging.BooParamAttribute.#ctor(System.String)">
            <summary>
            初始化类型的新实例，并指定当前成员对应的URL参数的名称。
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Server.Core.Serialization.BooMessaging.BooParamAttribute.Name">
            <summary>
            获取当前成员对应的URL参数的名称。
            </summary>
        </member>
        <member name="T:Server.Core.Serialization.BooMessaging.BooReader">
            <summary>
            用于读取BooMessage。读取过程是只读的（read-only）并且仅向前（forward-only）。
            </summary>
        </member>
        <member name="M:Server.Core.Serialization.BooMessaging.BooReader.#ctor(System.Byte[])">
            <summary>
            使用指定的BooMessage数据包初始化<see cref="T:Server.Core.Serialization.BooMessaging.BooReader"/>的新实例。
            </summary>
            <param name="data">BooMessage数据包。</param>
        </member>
        <member name="M:Server.Core.Serialization.BooMessaging.BooReader.ReadNumber">
            <summary>
            从当前位置向前读取4个字节，并将其转换为一个32位整数。
            该数用于表示一个数据包或一个字段的数据部分的长度（字节）。
            </summary>
            <returns>32位整数。</returns>
        </member>
        <member name="M:Server.Core.Serialization.BooMessaging.BooReader.TryReadNum(System.Int32@)">
            <summary>
            尝试从当前位置向前读取4个字节，并将其转换为一个32位整数。
            </summary>
            <param name="value">读取到的值。</param>
            <returns>若读取到值，返回true；否则返回false。</returns>
        </member>
        <member name="M:Server.Core.Serialization.BooMessaging.BooReader.EnterPackage">
            <summary>
            进入一个数据包并返回该数据包的大小。
            若当前位置已处于数据包的末尾，返回<c>-1</c>。
            </summary>
            <returns>数据包的大小。若当前位置已处于数据包的末尾，返回<c>-1</c>。</returns>
        </member>
        <member name="M:Server.Core.Serialization.BooMessaging.BooReader.ExitPackage">
            <summary>
            退出一个数据包。
            </summary>
        </member>
        <member name="M:Server.Core.Serialization.BooMessaging.BooReader.ReadBinary">
            <summary>
            从当前位置向前读取一个字段的原始数据。
            若当前位置已处于数据包的末尾，返回<c>null</c>。
            </summary>
            <returns>字段的值。若当前位置已处于数据包的末尾，返回<c>null</c>。</returns>
        </member>
        <member name="M:Server.Core.Serialization.BooMessaging.BooReader.ReadField">
            <summary>
            从当前位置向前读取一个字段的值，并以字符串形式返回。
            若当前位置已处于数据包的末尾，返回<c>null</c>。
            </summary>
            <returns>字段的值。若当前位置已处于数据包的末尾，返回<c>null</c>。</returns>
        </member>
        <member name="M:Server.Core.Serialization.BooMessaging.BooReader.PackageEnded">
            <summary>
            判定当前所在的数据包层级中是否还有可读取的数据。
            </summary>
            <returns>true若还有数据；否则为false。</returns>
        </member>
        <member name="M:Server.Core.Serialization.BooMessaging.Contracts.BooByteArrayContract.DoWrite(Server.Core.Serialization.BooMessaging.BooWriter,System.Object)">
            <summary>
            重写此方法以控制数据写入过程。
            </summary>
            <param name="writer"><see cref="T:Server.Core.Serialization.BooMessaging.BooWriter"/>的实例。</param>
            <param name="obj">写入的数据。</param>
        </member>
        <member name="M:Server.Core.Serialization.BooMessaging.Contracts.BooByteArrayContract.DoRead(Server.Core.Serialization.BooMessaging.BooReader)">
            <summary>
            重写此方法以控制数据读取过程。
            </summary>
            <param name="reader"><see cref="T:Server.Core.Serialization.BooMessaging.BooReader"/>的实例。</param>
            <returns>读取到的数据。</returns>
        </member>
        <member name="P:Server.Core.Serialization.BooMessaging.Contracts.BooByteArrayContract.IsPackage">
            <summary>
            true若当前契约用于映射一个BooMessage数据包；false则表示当前契约映射一个字段。
            </summary>
        </member>
        <member name="T:Server.Core.Serialization.BooMessaging.Contracts.BooObjectMemberInfo">
            <summary>
            Contains the data for the <see cref="T:Server.Core.Serialization.BooMessaging.BooConvert"/> to serialize the value
            of a property or field from a CLR object.
            </summary>
        </member>
        <member name="M:Server.Core.Serialization.BooMessaging.Contracts.BooObjectMemberInfo.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="P:Server.Core.Serialization.BooMessaging.Contracts.BooObjectMemberInfo.Contract">
            <summary>
            Gets or sets the <see cref="T:Server.Core.Serialization.BooMessaging.BooContract"/> used to serialize this property/field.
            </summary>
        </member>
        <member name="P:Server.Core.Serialization.BooMessaging.Contracts.BooObjectMemberInfo.Type">
            <summary>
            Gets or sets the property type or field type of the member.
            </summary>
        </member>
        <member name="P:Server.Core.Serialization.BooMessaging.Contracts.BooObjectMemberInfo.ParamName">
            <summary>
            Returns the param name if the member infomation is named; otherwise, returns null.
            </summary>
        </member>
        <member name="P:Server.Core.Serialization.BooMessaging.Contracts.BooObjectMemberInfo.Order">
            <summary>
            Gets the number which specifies the order for this <see cref="T:Server.Core.Serialization.BooMessaging.Contracts.BooObjectMemberInfo"/> in the colleciton.
            </summary>
        </member>
        <member name="P:Server.Core.Serialization.BooMessaging.Contracts.BooObjectMemberInfo.DefaultValue">
            <summary>
            Gets or sets the default value for the member.
            </summary>
        </member>
        <member name="P:Server.Core.Serialization.BooMessaging.Contracts.BooObjectMemberInfo.IsPackage">
            <summary>
            Indicates if the member is a boo-package.
            </summary>
        </member>
        <member name="P:Server.Core.Serialization.BooMessaging.Contracts.BooObjectMemberInfo.IsProperty">
            <summary>
            Indicates if the class member is a property.
            <c>true</c> if the member is a property; otherwise is a field.
            </summary>
        </member>
        <member name="P:Server.Core.Serialization.BooMessaging.Contracts.BooObjectMemberInfo.MemberInfo">
            <summary>
            Gets the <see cref="P:Server.Core.Serialization.BooMessaging.Contracts.BooObjectMemberInfo.MemberInfo"/> of this property/field.
            If <see cref="P:Server.Core.Serialization.BooMessaging.Contracts.BooObjectMemberInfo.IsProperty"/> is true, <see cref="P:Server.Core.Serialization.BooMessaging.Contracts.BooObjectMemberInfo.MemberInfo"/> is 
            an instance of <see cref="T:System.Reflection.PropertyInfo"/>; 
            otherwise an instance of <see cref="T:System.Reflection.FieldInfo"/>.
            </summary>
        </member>
        <member name="P:Server.Core.Serialization.BooMessaging.Contracts.BooObjectMemberInfo.ValueGetter">
            <summary>
            Gets or sets the method for getting the value of the property or field.
            <c>null</c> if the getter is not available.
            </summary>
        </member>
        <member name="P:Server.Core.Serialization.BooMessaging.Contracts.BooObjectMemberInfo.ValueSetter">
            <summary>
            Gets or sets the method for setting the value of the property or field.
            <c>null</c> if the setter is not available.
            </summary>
        </member>
        <member name="T:Server.Core.Serialization.BooMessaging.Contracts.BooCollectionContract">
            <summary>
            定义了BooMessage字段到集合类型间的转换契约。
            </summary>
        </member>
        <member name="F:Server.Core.Serialization.BooMessaging.Contracts.BooCollectionContract.CollectionTypeDefinition">
            <summary>
            <see cref="T:Server.Core.Serialization.BooMessaging.Contracts.BooCollectionContract"/>所支持的集合接口。若集合类型未实现此接口，则不被支持。
            </summary>
        </member>
        <member name="M:Server.Core.Serialization.BooMessaging.Contracts.BooCollectionContract.#ctor(System.Type)">
            <summary>
            初始化<see cref="T:Server.Core.Serialization.BooMessaging.Contracts.BooCollectionContract"/>的新实例。
            </summary>
            <param name="type">此契约关联的类型。</param>
        </member>
        <member name="M:Server.Core.Serialization.BooMessaging.Contracts.BooCollectionContract.DoWrite(Server.Core.Serialization.BooMessaging.BooWriter,System.Object)">
            <summary>
            重写此方法以控制数据写入过程。
            </summary>
            <param name="writer"><see cref="T:Server.Core.Serialization.BooMessaging.BooWriter"/>的实例。</param>
            <param name="obj">写入的数据。</param>
        </member>
        <member name="M:Server.Core.Serialization.BooMessaging.Contracts.BooCollectionContract.DoRead(Server.Core.Serialization.BooMessaging.BooReader)">
            <summary>
            重写此方法以控制数据读取过程。
            </summary>
            <param name="reader"><see cref="T:Server.Core.Serialization.BooMessaging.BooReader"/>的实例。</param>
            <returns>读取到的数据。</returns>
        </member>
        <member name="P:Server.Core.Serialization.BooMessaging.Contracts.BooCollectionContract.ElementContract">
            <summary>
            获取或设置集合中的元素的类型。
            </summary>
        </member>
        <member name="P:Server.Core.Serialization.BooMessaging.Contracts.BooCollectionContract.IsPackage">
            <summary>
            true若当前契约用于映射一个BooMessage数据包；false则表示当前契约映射一个字段。
            </summary>
        </member>
        <member name="T:Server.Core.Serialization.BooMessaging.Contracts.BooObjectContract">
            <summary>
            定义了BooMessage字段到CLR复杂类型间的转换契约。
            </summary>
        </member>
        <member name="M:Server.Core.Serialization.BooMessaging.Contracts.BooObjectContract.#ctor(System.Type)">
            <summary>
            初始化<see cref="T:Server.Core.Serialization.BooMessaging.Contracts.BooObjectContract"/>的新实例。
            </summary>
            <param name="type">此契约关联的类型。</param>
        </member>
        <member name="M:Server.Core.Serialization.BooMessaging.Contracts.BooObjectContract.AppendMember(Server.Core.Serialization.BooMessaging.Contracts.BooObjectMemberInfo)">
            <summary>
            获取当前契约所关联的类型中的BooMessage字段成员的集合。
            </summary>
        </member>
        <member name="M:Server.Core.Serialization.BooMessaging.Contracts.BooObjectContract.DoWrite(Server.Core.Serialization.BooMessaging.BooWriter,System.Object)">
            <summary>
            重写此方法以控制数据写入过程。
            </summary>
            <param name="writer"><see cref="T:Server.Core.Serialization.BooMessaging.BooWriter"/>的实例。</param>
            <param name="obj">写入的数据。</param>
        </member>
        <member name="M:Server.Core.Serialization.BooMessaging.Contracts.BooObjectContract.DoRead(Server.Core.Serialization.BooMessaging.BooReader)">
            <summary>
            重写此方法以控制数据读取过程。
            </summary>
            <param name="reader"><see cref="T:Server.Core.Serialization.BooMessaging.BooReader"/>的实例。</param>
            <returns>读取到的数据。</returns>
        </member>
        <member name="P:Server.Core.Serialization.BooMessaging.Contracts.BooObjectContract.IsPackage">
            <summary>
            true若当前契约用于映射一个BooMessage数据包；false则表示当前契约映射一个字段。
            </summary>
        </member>
        <member name="T:Server.Core.Serialization.BooMessaging.Contracts.BooHttpParamContract">
            <summary>
            定义了BooMessage字段URL参数间的转换契约。
            </summary>
        </member>
        <member name="M:Server.Core.Serialization.BooMessaging.Contracts.BooHttpParamContract.#ctor(System.Type,System.String)">
            <summary>
            初始化<see cref="T:Server.Core.Serialization.BooMessaging.Contracts.BooHttpParamContract"/>的新实例。
            </summary>
            <param name="type">此契约关联的类型。</param>
            <param name="paramName">此契约所绑定的HTTP参数名称。</param>
        </member>
        <member name="M:Server.Core.Serialization.BooMessaging.Contracts.BooHttpParamContract.DoWrite(Server.Core.Serialization.BooMessaging.BooWriter,System.Object)">
            <summary>
            重写此方法以控制数据写入过程。
            </summary>
            <param name="writer"><see cref="T:Server.Core.Serialization.BooMessaging.BooWriter"/>的实例。</param>
            <param name="obj">写入的数据。</param>
        </member>
        <member name="M:Server.Core.Serialization.BooMessaging.Contracts.BooHttpParamContract.DoRead(Server.Core.Serialization.BooMessaging.BooReader)">
            <summary>
            重写此方法以控制数据读取过程。
            </summary>
            <param name="reader"><see cref="T:Server.Core.Serialization.BooMessaging.BooReader"/>的实例。</param>
            <returns>读取到的数据。</returns>
        </member>
        <member name="P:Server.Core.Serialization.BooMessaging.Contracts.BooHttpParamContract.IsPackage">
            <summary>
            true若当前契约用于映射一个BooMessage数据包；false则表示当前契约映射一个字段。
            </summary>
        </member>
        <member name="T:Server.Core.Serialization.BooMessaging.Contracts.BooScalarContract">
            <summary>
            定义了BooMessage字段到CLR简单类型间的转换契约。
            </summary>
        </member>
        <member name="M:Server.Core.Serialization.BooMessaging.Contracts.BooScalarContract.#ctor(System.Type)">
            <summary>
            初始化<see cref="T:Server.Core.Serialization.BooMessaging.Contracts.BooScalarContract"/>的新实例。
            </summary>
            <param name="type">此契约关联的类型。</param>
        </member>
        <member name="M:Server.Core.Serialization.BooMessaging.Contracts.BooScalarContract.DoWrite(Server.Core.Serialization.BooMessaging.BooWriter,System.Object)">
            <summary>
            重写此方法以控制数据写入过程。
            </summary>
            <param name="writer"><see cref="T:Server.Core.Serialization.BooMessaging.BooWriter"/>的实例。</param>
            <param name="obj">写入的数据。</param>
        </member>
        <member name="M:Server.Core.Serialization.BooMessaging.Contracts.BooScalarContract.DoRead(Server.Core.Serialization.BooMessaging.BooReader)">
            <summary>
            重写此方法以控制数据读取过程。
            </summary>
            <param name="reader"><see cref="T:Server.Core.Serialization.BooMessaging.BooReader"/>的实例。</param>
            <returns>读取到的数据。</returns>
        </member>
        <member name="P:Server.Core.Serialization.BooMessaging.Contracts.BooScalarContract.IsPackage">
            <summary>
            true若当前契约用于映射一个BooMessage数据包；false则表示当前契约映射一个字段。
            </summary>
        </member>
        <member name="T:Server.Core.Serialization.Formatting">
            <summary>
            Specifies the format used by the <see cref="T:Server.Core.Serialization.IndentedTextWriter"/>。
            </summary>
        </member>
        <member name="F:Server.Core.Serialization.Formatting.None">
            <summary>
            No special format.
            </summary>
        </member>
        <member name="F:Server.Core.Serialization.Formatting.Multiple">
            <summary>
            Allows multiple line format without indentation.
            </summary>
        </member>
        <member name="F:Server.Core.Serialization.Formatting.Indented">
            <summary>
            Multiple line with indentation according to
            the <see cref="P:Server.Core.Serialization.IndentedTextWriter.IndentLevel"/> property.
            </summary>
        </member>
        <member name="T:Server.Core.Serialization.IndentedTextWriter">
            <summary>
            Provides a text writer that can indent new lines.
            </summary>
        </member>
        <member name="F:Server.Core.Serialization.IndentedTextWriter.MaxIndentLevel">
            <summary>
            The max indent level allowed in the <see cref="T:Server.Core.Serialization.IndentedTextWriter"/>.
            </summary>
        </member>
        <member name="F:Server.Core.Serialization.IndentedTextWriter.DefaultIndentMark">
            <summary>
            The default string for indentations.
            </summary>
        </member>
        <member name="M:Server.Core.Serialization.IndentedTextWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Server.Core.Serialization.IndentedTextWriter"/> 
            using the specified text writer and default indent mark.
            </summary>
            <param name="textWriter">The <see cref="T:System.IO.TextWriter"/> for output.</param>
        </member>
        <member name="M:Server.Core.Serialization.IndentedTextWriter.#ctor(System.IO.TextWriter,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Server.Core.Serialization.IndentedTextWriter"/> 
            using the specified text writer and indent mark.
            </summary>
            <param name="textWriter">The <see cref="T:System.IO.TextWriter"/> for output.</param>
            <param name="indentMark">The indent mark used for indentations.</param>
        </member>
        <member name="M:Server.Core.Serialization.IndentedTextWriter.IndentIncrease">
            <summary>
            Increases the indent level by 1.
            The indent level will not change if already reached the <see cref="F:Server.Core.Serialization.IndentedTextWriter.MaxIndentLevel"/>.
            </summary>
        </member>
        <member name="M:Server.Core.Serialization.IndentedTextWriter.IndentDecrease">
            <summary>
            Decreases the indent level by 1.
            The indent level will not change if it is zero.
            </summary>
        </member>
        <member name="P:Server.Core.Serialization.IndentedTextWriter.IndentMark">
            <summary>
            Gets the string used for indentations in the <see cref="T:Server.Core.Serialization.IndentedTextWriter"/>。
            </summary>
        </member>
        <member name="P:Server.Core.Serialization.IndentedTextWriter.IndentLevel">
            <summary>
            Gets the indent level.
            </summary>
        </member>
        <member name="T:Server.Core.Serialization.Json.Contracts.ArrayContract">
            <summary>
            The contract for collections.
            </summary>
        </member>
        <member name="T:Server.Core.Serialization.Json.JsonContract">
            <summary>
            A contract that specifies how to serialize/deserialize JSONs.
            This is an abstract class.
            </summary>
        </member>
        <member name="M:Server.Core.Serialization.Json.JsonContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of <see cref="T:Server.Core.Serialization.Json.JsonContract"/>
            with the given underlying type.
            </summary>
            <param name="type">The underlying type.</param>
        </member>
        <member name="M:Server.Core.Serialization.Json.JsonContract.Write(Server.Core.Serialization.Json.JsonWriter,Server.Core.Serialization.Json.JsonSerializingState,Server.Core.Serialization.Json.IJsonContractResolver,System.Object)">
            <summary>
            Writes the JSON represents the given object to the <see cref="T:Server.Core.Serialization.Json.JsonWriter"/>.
            </summary>
            <param name="writer">
            The instance of <see cref="T:Server.Core.Serialization.Json.JsonWriter"/> the JSON will be written to.
            </param>
            <param name="state">
            A instance of <see cref="T:Server.Core.Serialization.Json.JsonSerializingState"/> that may contains some 
            options for serializing.
            </param>
            <param name="contractResolver">
            A <see cref="T:Server.Core.Serialization.Json.IJsonContractResolver"/> which is used to resolve
            <see cref="T:Server.Core.Serialization.Json.JsonContract"/>s during the serialization.
            </param>
            <param name="obj">
            The object for generating the JSON. 
            </param>
        </member>
        <member name="M:Server.Core.Serialization.Json.JsonContract.Read(Server.Core.Serialization.Json.JsonReader,Server.Core.Serialization.Json.JsonDeserializingState)">
            <summary>
            Read the JSON represents a intance of the <see cref="P:Server.Core.Serialization.Json.JsonContract.UnderlyingType"/> from
            the <see cref="T:Server.Core.Serialization.Json.JsonReader"/>.
            </summary>
            <param name="reader">
            The instance of <see cref="T:Server.Core.Serialization.Json.JsonReader"/> the JSON will be read from.
            </param>
            <param name="state">
            A instance of <see cref="T:Server.Core.Serialization.Json.JsonDeserializingState"/> that may contains some 
            options for deserializing.
            </param>
            <returns>An intance of the <see cref="P:Server.Core.Serialization.Json.JsonContract.UnderlyingType"/>.</returns>
        </member>
        <member name="M:Server.Core.Serialization.Json.JsonContract.DoWrite(Server.Core.Serialization.Json.JsonWriter,Server.Core.Serialization.Json.JsonSerializingState,Server.Core.Serialization.Json.IJsonContractResolver,System.Object)">
            <summary>
            Performs the writing.
            This method will be called by the <see cref="M:Server.Core.Serialization.Json.JsonContract.Write(Server.Core.Serialization.Json.JsonWriter,Server.Core.Serialization.Json.JsonSerializingState,Server.Core.Serialization.Json.IJsonContractResolver,System.Object)"/> method.
            </summary>
            <param name="writer">
            The instance of <see cref="T:Server.Core.Serialization.Json.JsonWriter"/> the JSON will be written to.
            </param>
            <param name="state">
            A instance of <see cref="T:Server.Core.Serialization.Json.JsonSerializingState"/> that may contains some 
            options for serializing.
            </param>
            <param name="contractResolver">
            A <see cref="T:Server.Core.Serialization.Json.IJsonContractResolver"/> which is used to resolve
            <see cref="T:Server.Core.Serialization.Json.JsonContract"/>s during the serialization.
            </param>
            <param name="obj">
            The object for generating the JSON. 
            </param>
        </member>
        <member name="M:Server.Core.Serialization.Json.JsonContract.DoRead(Server.Core.Serialization.Json.JsonReader,Server.Core.Serialization.Json.JsonDeserializingState)">
            <summary>
            Performs the reading.
            This method will be called by the <see cref="M:Server.Core.Serialization.Json.JsonContract.Read(Server.Core.Serialization.Json.JsonReader,Server.Core.Serialization.Json.JsonDeserializingState)"/> method.
            </summary>
            <param name="reader">
            The instance of <see cref="T:Server.Core.Serialization.Json.JsonReader"/> the JSON will be read from.
            </param>
            <param name="state">
            A instance of <see cref="T:Server.Core.Serialization.Json.JsonDeserializingState"/> that may contains some 
            options for deserializing.
            </param>
            <returns>An intance of the <see cref="P:Server.Core.Serialization.Json.JsonContract.UnderlyingType"/>.</returns>
        </member>
        <member name="M:Server.Core.Serialization.Json.JsonContract.SkipPropertyValue(Server.Core.Serialization.Json.JsonReader)">
            <summary>
            Skip the property value at the current position on the reader.
            The method can only be called after a <see cref="F:Server.Core.Serialization.Json.JsonToken.PropertyName"/> being read.
            </summary>
            <param name="reader">The instance of <see cref="T:Server.Core.Serialization.Json.JsonReader"/>.</param>
        </member>
        <member name="P:Server.Core.Serialization.Json.JsonContract.UnderlyingType">
            <summary>
            Gets the underlying type of the current <see cref="T:Server.Core.Serialization.Json.JsonContract"/>.
            </summary>
        </member>
        <member name="M:Server.Core.Serialization.Json.Contracts.ArrayContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of <see cref="T:Server.Core.Serialization.Json.Contracts.ArrayContract"/>
            with the type of the colletion.
            </summary>
            <param name="type">The type of the colletion.</param>
        </member>
        <member name="P:Server.Core.Serialization.Json.Contracts.ArrayContract.ElementContract">
            <summary>
            Gets or sets the <see cref="T:Server.Core.Serialization.Json.JsonContract"/> used by the type of elements in the array.
            If it is set to null, the contract will be resolved while elements are being written
            to the JSON.
            If <see cref="P:Server.Core.Serialization.Json.Contracts.ArrayContract.ElementContract"/> is not set up, a non-empty JSON array cannot be 
            deserialized and the <see cref="M:Server.Core.Serialization.Json.JsonContract.Read(Server.Core.Serialization.Json.JsonReader,Server.Core.Serialization.Json.JsonDeserializingState)"/> method will throw an exception.
            </summary>
        </member>
        <member name="T:Server.Core.Serialization.Json.Contracts.BooleanContract">
            <summary>
            The contract for booleans.
            </summary>
        </member>
        <member name="T:Server.Core.Serialization.Json.Contracts.ContractMemberCollection">
            <summary>
            A key-value map which takes the property names as the keys and instances of
            the <see cref="T:Server.Core.Serialization.Json.Contracts.ContractMemberInfo"/> as the values.
            </summary>
        </member>
        <member name="T:Server.Core.Serialization.Json.Contracts.ContractMemberInfo">
            <summary>
            Contains the data for the <see cref="T:Server.Core.Serialization.Json.JsonSerializer"/> to serialize or access the value
            of a property or field from a CLR object.
            </summary>
        </member>
        <member name="P:Server.Core.Serialization.Json.Contracts.ContractMemberInfo.Contract">
            <summary>
            Gets or sets the <see cref="T:Server.Core.Serialization.Json.JsonContract"/> used to serialize this property/field.
            </summary>
        </member>
        <member name="P:Server.Core.Serialization.Json.Contracts.ContractMemberInfo.Name">
            <summary>
            Gets the name of the property/field.
            </summary>
        </member>
        <member name="P:Server.Core.Serialization.Json.Contracts.ContractMemberInfo.Type">
            <summary>
            Gets the property type or field type of the member.
            </summary>
        </member>
        <member name="P:Server.Core.Serialization.Json.Contracts.ContractMemberInfo.JsonPropertyName">
            <summary>
            Gets or sets the property name in JSON of this property/field.
            </summary>
        </member>
        <member name="P:Server.Core.Serialization.Json.Contracts.ContractMemberInfo.IsProperty">
            <summary>
            Indicates if the class member is a property.
            <c>true</c> if the member is a property; otherwise is a field.
            </summary>
        </member>
        <member name="P:Server.Core.Serialization.Json.Contracts.ContractMemberInfo.MemberInfo">
            <summary>
            Gets the <see cref="P:Server.Core.Serialization.Json.Contracts.ContractMemberInfo.MemberInfo"/> of this property/field.
            If <see cref="P:Server.Core.Serialization.Json.Contracts.ContractMemberInfo.IsProperty"/> is true, <see cref="P:Server.Core.Serialization.Json.Contracts.ContractMemberInfo.MemberInfo"/> is 
            an instance of <see cref="T:System.Reflection.PropertyInfo"/>; 
            otherwise an instance of <see cref="T:System.Reflection.FieldInfo"/>.
            </summary>
        </member>
        <member name="P:Server.Core.Serialization.Json.Contracts.ContractMemberInfo.ValueGetter">
            <summary>
            Gets or sets the method for getting the value of the property or field.
            <c>null</c> if the getter is not available.
            </summary>
        </member>
        <member name="P:Server.Core.Serialization.Json.Contracts.ContractMemberInfo.ValueSetter">
            <summary>
            Gets or sets the method for setting the value of the property or field.
            <c>null</c> if the setter is not available.
            </summary>
        </member>
        <member name="T:Server.Core.Serialization.Json.Contracts.CustomFormatDateTimeContract">
            <summary>
            An extention of <see cref="T:Server.Core.Serialization.Json.Contracts.DateTimeContract"/> that allows to specify
            the format for serializing the date.
            </summary>
        </member>
        <member name="T:Server.Core.Serialization.Json.Contracts.DateTimeContract">
            <summary>
            The contract for <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="M:Server.Core.Serialization.Json.Contracts.DateTimeContract.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Server.Core.Serialization.Json.Contracts.DateTimeContract"/>.
            </summary>
        </member>
        <member name="M:Server.Core.Serialization.Json.Contracts.DateTimeContract.TryParseDateTime(System.String,System.DateTime@)">
            <summary>
            Converts the specified string to <see cref="T:System.DateTime"/> and returns a value 
            that indicates whether the conversion succeeded.
            </summary>
            <param name="value">The string represents a <see cref="T:System.DateTime"/>.</param>
            <param name="dateTime">The result.</param>
            <returns>
            true if the string was converted successfully; otherwise false.
            </returns>
        </member>
        <member name="M:Server.Core.Serialization.Json.Contracts.DateTimeContract.ToStringValue(System.DateTime)">
            <summary>
            Converts the specified <see cref="T:System.DateTime"/> to it's corresponding string representation.
            </summary>
            <param name="dateTime">The <see cref="T:System.DateTime"/>.</param>
            <returns>The string value represents the <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="P:Server.Core.Serialization.Json.Contracts.CustomFormatDateTimeContract.Format">
            <summary>
            Gets or sets a value which is used to format the date and time.
            The format string will be passed to the <see cref="M:System.DateTime.ToString"/>
            method during the serializing.
            </summary>
        </member>
        <member name="T:Server.Core.Serialization.Json.Contracts.DictionaryContract">
            <summary>
            The contract for dictonaries.
            It maps the key-value pairs in the dictionary to JSON properties.
            </summary>
        </member>
        <member name="F:Server.Core.Serialization.Json.Contracts.DictionaryContract.GenericDictionaryTypeDefinition">
            <summary>
            The type definition for generic dictionries.
            </summary>
        </member>
        <member name="F:Server.Core.Serialization.Json.Contracts.DictionaryContract.DictionaryTypeDefinition">
            <summary>
            The type definition for non-generic dictionries.
            </summary>
        </member>
        <member name="M:Server.Core.Serialization.Json.Contracts.DictionaryContract.#ctor(System.Type)">
            <summary>
            Initializes an new instance of <see cref="T:Server.Core.Serialization.Json.Contracts.DictionaryContract"/>
            with the given underlying type.
            </summary>
            <param name="type">The underlying type.</param>
        </member>
        <member name="P:Server.Core.Serialization.Json.Contracts.DictionaryContract.ValueContract">
            <summary>
            Gets or sets the <see cref="T:Server.Core.Serialization.Json.JsonContract"/> for the values in the dictionary.
            If the property is null, the <see cref="M:Server.Core.Serialization.Json.JsonContract.Read(Server.Core.Serialization.Json.JsonReader,Server.Core.Serialization.Json.JsonDeserializingState)"/> method would throw an exception.
            </summary>
        </member>
        <member name="P:Server.Core.Serialization.Json.Contracts.DictionaryContract.KeyConverter">
            <summary>
            Gets or sets the <see cref="T:System.ComponentModel.TypeConverter"/> for the keys in the dictionary.
            The converter is used to convert the key objects to/from strings in the
            JSON property names.
            If the property is null, the <see cref="T:Server.Core.Serialization.Json.Contracts.DictionaryContract"/> will try to use 
            the default converter.
            </summary>
        </member>
        <member name="T:Server.Core.Serialization.Json.Contracts.EnumContract">
            <summary>
            The contract for enumerations.
            </summary>
        </member>
        <member name="M:Server.Core.Serialization.Json.Contracts.EnumContract.#ctor(System.Type)">
            <summary>
            Initialize a new instance of <see cref="T:Server.Core.Serialization.Json.Contracts.EnumContract"/>.
            </summary>
            <param name="type">The type of the enum.</param>
        </member>
        <member name="P:Server.Core.Serialization.Json.Contracts.EnumContract.UseEnumName">
            <summary>
            Gets or sets a value, which specify whether to serializing a Enum by using it's name.
            If it is set to true, a Enum will be serialized to a JSON string with it's name;
            otherwise, will be serialized to a number with the index.
            The default value is false.
            </summary>
        </member>
        <member name="T:Server.Core.Serialization.Json.Contracts.NullableTypeContract">
            <summary>
            The contract for <see cref="T:System.Nullable`1"/>.
            </summary>
        </member>
        <member name="M:Server.Core.Serialization.Json.Contracts.NullableTypeContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of <see cref="T:Server.Core.Serialization.Json.Contracts.NullableTypeContract"/>
            with the given underlying type.
            </summary>
            <param name="type">The underlying type.</param>
        </member>
        <member name="P:Server.Core.Serialization.Json.Contracts.NullableTypeContract.UnderlyingTypeContract">
            <summary>
            Gets or sets the <see cref="T:Server.Core.Serialization.Json.JsonContract"/> for 
            the underlying type of <see cref="T:System.Nullable`1"/>.
            </summary>
        </member>
        <member name="T:Server.Core.Serialization.Json.Contracts.NumberContract">
            <summary>
            The contract for numbers.
            </summary>
        </member>
        <member name="T:Server.Core.Serialization.Json.Contracts.ObjectContract">
            <summary>
            The <see cref="T:Server.Core.Serialization.Json.JsonContract"/> for objects or stucts.
            The contract maps propertys in JSON from/to propertys/fields of CLR objects.
            </summary>
        </member>
        <member name="M:Server.Core.Serialization.Json.Contracts.ObjectContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of <see cref="T:Server.Core.Serialization.Json.Contracts.ObjectContract"/>
            with the given underlying type.
            </summary>
            <param name="type">The underlying type.</param>
        </member>
        <member name="M:Server.Core.Serialization.Json.Contracts.ObjectContract.#ctor(System.Type,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Initializes a new instance of <see cref="T:Server.Core.Serialization.Json.Contracts.ObjectContract"/>
            with the given underlying type.
            </summary>
            <param name="type">The underlying type.</param>
            <param name="memberNameComparer"></param>
        </member>
        <member name="P:Server.Core.Serialization.Json.Contracts.ObjectContract.Members">
            <summary>
            Gets the colleciton of <see cref="T:Server.Core.Serialization.Json.Contracts.ContractMemberInfo"/> which describes
            how to serialize the properties or fields of the underlying type.
            </summary>
        </member>
        <member name="T:Server.Core.Serialization.Json.Contracts.StringContract">
            <summary>
            The contract for strings.
            </summary>
        </member>
        <member name="T:Server.Core.Serialization.Json.IJsonContractResolver">
            <summary>
            Represents a resolves that resolves <see cref="T:Server.Core.Serialization.Json.JsonContract"/>s for types.
            </summary>
        </member>
        <member name="M:Server.Core.Serialization.Json.IJsonContractResolver.ResolveContract(System.Object)">
            <summary>
            Resolves the <see cref="T:Server.Core.Serialization.Json.JsonContract"/> for the given object.
            </summary>
            <param name="obj">The object to resolve.</param>
            <returns>The instance of <see cref="T:Server.Core.Serialization.Json.JsonContract"/> for the type.</returns>
        </member>
        <member name="M:Server.Core.Serialization.Json.IJsonContractResolver.ResolveContract(System.Type)">
            <summary>
            Resolves the <see cref="T:Server.Core.Serialization.Json.JsonContract"/> for the given type.
            </summary>
            <param name="type">The type to resolve.</param>
            <returns>The instance of <see cref="T:Server.Core.Serialization.Json.JsonContract"/> for the type.</returns>
        </member>
        <member name="T:Server.Core.Serialization.Json.JsonContractException">
            <summary>
            Represents the errors thrown by the implementations of <see cref="T:Server.Core.Serialization.Json.JsonContract"/>.
            </summary>
        </member>
        <member name="M:Server.Core.Serialization.Json.JsonContractException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Server.Core.Serialization.Json.JsonContractException"/> class
            with a specified error message.
            </summary>
            <param name="message">The message that describe the error.</param>
        </member>
        <member name="M:Server.Core.Serialization.Json.JsonContractException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Server.Core.Serialization.Json.JsonContractException"/> class 
            with a specified error message and a reference to the inner exception 
            that is the cause of this exception.
            </summary>
            <param name="message">The message that describe the error.</param>
            <param name="innerException">The exception that is the cause of this exception.</param>
        </member>
        <member name="T:Server.Core.Serialization.Json.JsonContractResolver">
            <summary>
            The default implementation of <see cref="T:Server.Core.Serialization.Json.IJsonContractResolver"/>.
            </summary>
        </member>
        <member name="F:Server.Core.Serialization.Json.JsonContractResolver.SyncRoot">
            <summary>
            An object that can be used to synchronize access the cache of JSON contracts.
            </summary>
        </member>
        <member name="M:Server.Core.Serialization.Json.JsonContractResolver.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Server.Core.Serialization.Json.JsonContractResolver"/>.
            </summary>
        </member>
        <member name="M:Server.Core.Serialization.Json.JsonContractResolver.#ctor(System.Collections.Generic.IDictionary{System.Type,Server.Core.Serialization.Json.JsonContract})">
            <summary>
            Initializes a new instance of <see cref="T:Server.Core.Serialization.Json.JsonContractResolver"/>
            with a dictionary which contains some ready-made <see cref="T:Server.Core.Serialization.Json.JsonContract"/>s.
            </summary>
            <param name="contracts">
            The dictionary which contains some ready-made <see cref="T:Server.Core.Serialization.Json.JsonContract"/>s.
            </param>
        </member>
        <member name="M:Server.Core.Serialization.Json.JsonContractResolver.ResolveContract(System.Object)">
            <summary>
            Resolves the <see cref="T:Server.Core.Serialization.Json.JsonContract"/> for the given object.
            </summary>
            <param name="obj">The object to resolve.</param>
            <returns>The instance of <see cref="T:Server.Core.Serialization.Json.JsonContract"/> for the type.</returns>
        </member>
        <member name="M:Server.Core.Serialization.Json.JsonContractResolver.ResolveContract(System.Type)">
            <summary>
            Resolves the <see cref="T:Server.Core.Serialization.Json.JsonContract"/> for the given type.
            </summary>
            <param name="type">The type to resolve.</param>
            <returns>The instance of <see cref="T:Server.Core.Serialization.Json.JsonContract"/> for the type.</returns>
        </member>
        <member name="M:Server.Core.Serialization.Json.JsonContractResolver.DoResolve(System.Type)">
            <summary>
            Performs the contract resolving.
            Override this method to customize the resolving.
            </summary>
            <param name="type">The type to resolve.</param>
            <returns>The instance of <see cref="T:Server.Core.Serialization.Json.JsonContract"/> for the type.</returns>
        </member>
        <member name="P:Server.Core.Serialization.Json.JsonContractResolver.CaseSensitive">
            <summary>
            Indicates if the mappings between JSON property names and CLR type members (fields/properties)
            are case-sensitive. The default value is <c>true</c>.
            </summary>
        </member>
        <member name="T:Server.Core.Serialization.Json.JsonConvert">
            <summary>
            Provides methods for converting between CLR types and JSON types.
            </summary>
        </member>
        <member name="M:Server.Core.Serialization.Json.JsonConvert.ToString(System.Object)">
            <summary>
            Converts an object to its JSON string representation.
            </summary>
            <param name="obj">The object.</param>
            <returns>The JSON string representation of the object.</returns>
        </member>
        <member name="M:Server.Core.Serialization.Json.JsonConvert.ToJsonDateTimeValue(System.DateTime,System.Boolean)">
            <summary>
            Convert a value of <see cref="T:System.DateTime"/> to a string representation 
            of a datetime in a JSON. 
            </summary>
            <param name="dateTime">
            The datetime value.
            If the kind of the datetime is not <see cref="F:System.DateTimeKind.Utc"/>,
            the result would contains a timezone offset.
            </param>
            <param name="wrappedInSlashes">
            Indicates whether to wrap the datetime value in a pair of slashes.
            If <c>true</c>, the datetime value will be in this format:'/Date(1xxxxxxxxxxxx+yyyy)/';
            otherwise, no prefix and surfix:'Date(1xxxxxxxxxxxx+yyyy)'.
            </param>
            <returns>A string represents a datetime value in a JSON.</returns>
        </member>
        <member name="M:Server.Core.Serialization.Json.JsonConvert.ClrTicksToJavascriptTicks(System.Int64)">
            <summary>
            Convert a number of ticks in the CLR to a number of ticks in Javascript.
            </summary>
            <param name="clrTicks">The number of ticks in the CLR.</param>
            <returns>The number of ticks in Javascript.</returns>
        </member>
        <member name="M:Server.Core.Serialization.Json.JsonConvert.JavascriptTicksToClrTicks(System.Int64)">
            <summary>
            Convert a number of ticks in Javascript to a number of ticks in the CLR.
            </summary>
            <param name="javascriptTicks">The number of ticks in Javascript.</param>
            <returns>The number of ticks in the CLR.</returns>
        </member>
        <member name="M:Server.Core.Serialization.Json.JsonConvert.TryParseJsonDateTimeValue(System.String,System.DateTime@)">
            <summary>
            Convert the string representation of a Javascript datetime value 
            to a <see cref="T:System.DateTime"/>.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">The string.</param>
            <param name="dateTime">
            The datetime result.
            The kind of datetime is <see cref="F:System.DateTimeKind.Local"/>.
            This is a output parameter.
            </param>
            <returns><c>true</c> if the convertion succeeded; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Server.Core.Serialization.Json.JsonConvert.TryGetDateDataIndexes(System.String,System.Int32@,System.Int32@)">
            \Date(1xxxxxxxxxxxx+yyyy)\
        </member>
        <member name="T:Server.Core.Serialization.Json.JsonDeserializingState">
            <summary>
            Keeps the state for deserializing.
            </summary>
        </member>
        <member name="T:Server.Core.Serialization.Json.JsonFormatException">
            <summary>
            The exception was thrown when the JSON format is not illegal.
            </summary>
        </member>
        <member name="M:Server.Core.Serialization.Json.JsonFormatException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Server.Core.Serialization.Json.JsonFormatException"/> with 
            with the given message that describes the error.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Server.Core.Serialization.Json.JsonFormatException.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Server.Core.Serialization.Json.JsonFormatException"/> with 
            with the given message that describes the error and specify the 
            position of the error in the JSON.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="lineNumber">
            The line number where the format error was found in the JSON.
            </param>
            <param name="columnNumber">
            The column number where the format error was found in the JSON.
            </param>
        </member>
        <member name="M:Server.Core.Serialization.Json.JsonFormatException.#ctor(System.String,Server.Core.Serialization.Json.JsonToken,Server.Core.Serialization.Json.JsonToken,Server.Core.Serialization.Json.JsonToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Server.Core.Serialization.Json.JsonFormatException"/> with 
            with the given message that describes the error  and the 
            <see cref="T:Server.Core.Serialization.Json.JsonToken"/>s of the current state.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="currentToken">
            The <see cref="T:Server.Core.Serialization.Json.JsonToken"/> which was being read or written while 
            the exception was thrown.
            </param>
            <param name="lastToken">
            The lastest <see cref="T:Server.Core.Serialization.Json.JsonToken"/> before the <paramref name="currentToken"/>.
            </param>
            <param name="containerToken">
            The <see cref="T:Server.Core.Serialization.Json.JsonToken"/> represents the JSON container in which 
            the <see cref="P:Server.Core.Serialization.Json.JsonFormatException.CurrentToken"/> was being read or written.
            </param>
        </member>
        <member name="M:Server.Core.Serialization.Json.JsonFormatException.#ctor(System.String,System.Int32,System.Int32,Server.Core.Serialization.Json.JsonToken,Server.Core.Serialization.Json.JsonToken,Server.Core.Serialization.Json.JsonToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Server.Core.Serialization.Json.JsonFormatException"/> with 
            with the given message that describes the error, the position of the error
            in the JSON, and the <see cref="T:Server.Core.Serialization.Json.JsonToken"/>s of the current state.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="lineNumber">
            The line number where the format error was found in the JSON.
            </param>
            <param name="columnNumber">
            The column number where the format error was found in the JSON.
            </param>
            <param name="currentToken">
            The <see cref="T:Server.Core.Serialization.Json.JsonToken"/> which was being read or written while 
            the exception was thrown.
            </param>
            <param name="lastToken">
            The lastest <see cref="T:Server.Core.Serialization.Json.JsonToken"/> before the <paramref name="currentToken"/>.
            </param>
            <param name="containerToken">
            The <see cref="T:Server.Core.Serialization.Json.JsonToken"/> represents the JSON container in which 
            the <see cref="P:Server.Core.Serialization.Json.JsonFormatException.CurrentToken"/> was being read or written.
            </param>
        </member>
        <member name="P:Server.Core.Serialization.Json.JsonFormatException.LineNumber">
            <summary>
            Gets the line number where the format error was found in the JSON.
            Returns -1 if not specfied.
            </summary>
        </member>
        <member name="P:Server.Core.Serialization.Json.JsonFormatException.ColumnNumber">
            <summary>
            Gets the column number where the format error was found in the JSON.
            Returns -1 if not specfied.
            </summary>
        </member>
        <member name="P:Server.Core.Serialization.Json.JsonFormatException.CurrentToken">
            <summary>
            Gets or sets the <see cref="T:Server.Core.Serialization.Json.JsonToken"/> which was being read or written
            while the exception was thrown.
            Returns <see cref="F:Server.Core.Serialization.Json.JsonToken.None"/> if not specified.
            </summary>
        </member>
        <member name="P:Server.Core.Serialization.Json.JsonFormatException.LastToken">
            <summary>
            Gets or sets the lastest <see cref="T:Server.Core.Serialization.Json.JsonToken"/> before the <see cref="P:Server.Core.Serialization.Json.JsonFormatException.CurrentToken"/>.
            Returns <see cref="F:Server.Core.Serialization.Json.JsonToken.None"/> if not specified.
            </summary>
        </member>
        <member name="P:Server.Core.Serialization.Json.JsonFormatException.ContainerToken">
            <summary>
            Gets or sets the <see cref="T:Server.Core.Serialization.Json.JsonToken"/> represents the JSON container
            in which the <see cref="P:Server.Core.Serialization.Json.JsonFormatException.CurrentToken"/> was being read or written.
            Returns <see cref="F:Server.Core.Serialization.Json.JsonToken.None"/> if not specified.
            </summary>
        </member>
        <member name="T:Server.Core.Serialization.Json.JsonIgnoreAttribute">
            <summary>
            Instructs the <see cref="T:Server.Core.Serialization.Json.JsonSerializer"/> not to write out 
            the value of a public field or property.
            </summary>
        </member>
        <member name="T:Server.Core.Serialization.Json.JsonPropertyAttribute">
            <summary>
            Instructs the <see cref="T:Server.Core.Serialization.Json.JsonSerializer"/> to always serialize the member with the specified name.
            </summary>
        </member>
        <member name="M:Server.Core.Serialization.Json.JsonPropertyAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Server.Core.Serialization.Json.JsonPropertyAttribute"/> class.
            </summary>
        </member>
        <member name="M:Server.Core.Serialization.Json.JsonPropertyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Server.Core.Serialization.Json.JsonPropertyAttribute"/> class 
            with the specified name.
            </summary>
            <param name="propertyName">Name of the property/field.</param>
        </member>
        <member name="P:Server.Core.Serialization.Json.JsonPropertyAttribute.PropertyName">
            <summary>
            Gets or sets the name of the class member.
            </summary>
            <value>The name of the class member.</value>
        </member>
        <member name="T:Server.Core.Serialization.Json.JsonReader">
            <summary>
            A reader for reading a JSON from a <see cref="T:System.IO.TextReader"/>, 
            the reading action is forward-only.
            While reading a Json, the <see cref="T:Server.Core.Serialization.Json.JsonReader"/> will validate the format,
            and throws <see cref="T:Server.Core.Serialization.Json.JsonFormatException"/> if the format is not correct.
            </summary>
        </member>
        <member name="M:Server.Core.Serialization.Json.JsonReader.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a instance of <see cref="T:Server.Core.Serialization.Json.JsonReader"/> 
            and specified the internal instance of <see cref="T:System.IO.TextReader"/>.
            </summary>
            <param name="textReader">
            The instance of <see cref="T:System.IO.TextReader"/> whith the JSON text is read from.
            </param>
        </member>
        <member name="M:Server.Core.Serialization.Json.JsonReader.PeekNextToken">
            <summary>
            Try to determind the next <see cref="T:Server.Core.Serialization.Json.JsonToken"/> in the Json
            without changing current <see cref="T:Server.Core.Serialization.Json.JsonToken"/> and value.
            </summary>
            <returns>
            The next <see cref="T:Server.Core.Serialization.Json.JsonToken"/> in the JSON.
            Returns <see cref="F:Server.Core.Serialization.Json.JsonToken.None"/> if the reader already reached the end.
            </returns>
        </member>
        <member name="M:Server.Core.Serialization.Json.JsonReader.Read">
            <summary>
            Reads next token from the JSON.
            </summary>
            <returns>
            <c>true</c> if a token was read; 
            otherwise <c>false</c>, it means the <see cref="T:Server.Core.Serialization.Json.JsonReader"/> reached the end of the JSON.
            </returns>
        </member>
        <member name="P:Server.Core.Serialization.Json.JsonReader.LineNumber">
            <summary>
            Gets the line number of current position 
            the <see cref="T:Server.Core.Serialization.Json.JsonReader"/> reached in the JSON.
            </summary>
        </member>
        <member name="P:Server.Core.Serialization.Json.JsonReader.ColumnNumber">
            <summary>
            Gets the column number of current position 
            the <see cref="T:Server.Core.Serialization.Json.JsonReader"/> reached in the JSON.
            </summary>
        </member>
        <member name="P:Server.Core.Serialization.Json.JsonReader.Token">
            <summary>
            Gets the <see cref="T:Server.Core.Serialization.Json.JsonToken"/> finally read.
            The the <see cref="T:Server.Core.Serialization.Json.JsonReader"/> has not started the read or has reached the end of the Json,
            <see cref="F:Server.Core.Serialization.Json.JsonToken.None"/> would be returned.
            </summary>
        </member>
        <member name="P:Server.Core.Serialization.Json.JsonReader.Containter">
            <summary>
            Gets the <see cref="T:Server.Core.Serialization.Json.JsonToken"/> that indicates which JSON container the current position is in.
            </summary>
        </member>
        <member name="P:Server.Core.Serialization.Json.JsonReader.Value">
            <summary>
            Gets the value finally read.
            </summary>
            <remarks>
            It's a <see cref="T:System.Boolean"/> if the value of the <see cref="P:Server.Core.Serialization.Json.JsonReader.Token"/> property is <see cref="F:Server.Core.Serialization.Json.JsonToken.BooleanValue"/>:
            and a <see cref="T:System.String"/> for <see cref="F:Server.Core.Serialization.Json.JsonToken.StringValue"/>;
            a <see cref="T:System.Double"/> for <see cref="F:Server.Core.Serialization.Json.JsonToken.NumberValue"/>;
            <c>NULL</c> for <see cref="F:Server.Core.Serialization.Json.JsonToken.NullValue"/> and <see cref="F:Server.Core.Serialization.Json.JsonToken.UndefinedValue"/>.
            
            If the <see cref="P:Server.Core.Serialization.Json.JsonReader.Token"/> property is <see cref="F:Server.Core.Serialization.Json.JsonToken.PropertyName"/>,
            the value is the propery name (a string).
             
            In other case, the value has no meaning.
            </remarks>
        </member>
        <member name="P:Server.Core.Serialization.Json.JsonReader.AutoCloseInternalReader">
            <summary>
            Gets or sets a value that indicates whether to close the internal 
            <see cref="T:System.IO.TextReader"/> when the <see cref="M:Server.Core.Serialization.Json.JsonReader.Dispose"/> method is called.
            The default value is <c>true</c>.
            </summary>
        </member>
        <member name="T:Server.Core.Serialization.Json.JsonSerializer">
            <summary>
            Serializes and deserializes objects into and from the JSON format.
            </summary>
        </member>
        <member name="M:Server.Core.Serialization.Json.JsonSerializer.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Server.Core.Serialization.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:Server.Core.Serialization.Json.JsonSerializer.#ctor(Server.Core.Serialization.Json.IJsonContractResolver)">
            <summary>
            Initializes a new instance of <see cref="T:Server.Core.Serialization.Json.JsonSerializer"/>
            with the given implemntation of <see cref="T:Server.Core.Serialization.Json.IJsonContractResolver"/>.
            </summary>
            <param name="contractResolver">
            The implemntation of <see cref="T:Server.Core.Serialization.Json.IJsonContractResolver"/> which is used for
            resolving <see cref="T:Server.Core.Serialization.Json.JsonContract"/>s for objects.
            </param>
        </member>
        <member name="M:Server.Core.Serialization.Json.JsonSerializer.Serialize(System.Object)">
            <summary>
            Serializes the given object to a JSON.
            </summary>
            <param name="obj">The object to be serialized.</param>
            <returns>The JSON string.</returns>
        </member>
        <member name="M:Server.Core.Serialization.Json.JsonSerializer.Serialize(System.Object,Server.Core.Serialization.Formatting)">
            <summary>
            Serializes the given object to a JSON with given <see cref="T:Server.Core.Serialization.Formatting"/>.
            </summary>
            <param name="obj">The object to be serialized.</param>
            <param name="formatting">The value of <see cref="T:Server.Core.Serialization.Formatting"/>.</param>
            <returns>The JSON string.</returns>
        </member>
        <member name="M:Server.Core.Serialization.Json.JsonSerializer.Serialize(System.Object,Server.Core.Serialization.Json.JsonWriter)">
            <summary>
            Serialized the given object to a JSON 
            and writes the JSON to the specified <see cref="T:Server.Core.Serialization.Json.JsonWriter"/>.
            </summary>
            <param name="obj">The object to be serialized.</param>
            <param name="jsonWriter">
            The instance of <see cref="T:Server.Core.Serialization.Json.JsonWriter"/> which the JSON will be written to.
            It will not be disposed automatically after the method call.
            </param>
        </member>
        <member name="M:Server.Core.Serialization.Json.JsonSerializer.Serialize(System.Object,System.IO.TextWriter)">
            <summary>
            Serialized the given object to a JSON 
            and writes the JSON to the specified <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="obj">The object to be serialized.</param>
            <param name="textWriter">
            The instance of <see cref="T:System.IO.TextWriter"/> which the JSON will be written to.
            It will not be disposed automatically after the method call.
            </param>
        </member>
        <member name="M:Server.Core.Serialization.Json.JsonSerializer.FastSerialize(System.Object)">
            <summary>
            Serializes the given object to a JSON.
            This is a faster version than <see cref="M:Server.Core.Serialization.Json.JsonSerializer.Serialize(System.Object)"/>. It does not include
            the validation of JSON format and the check of cycle reference.
            </summary>
            <param name="obj">The object to be serialized.</param>
            <returns>The JSON string.</returns>
        </member>
        <member name="M:Server.Core.Serialization.Json.JsonSerializer.Deserialize``1(System.String)">
            <summary>
            Deserializes a string which represents a JSON to a CLR object.
            </summary>
            <typeparam name="T">The type of the CLR object.</typeparam>
            <param name="json">The JSON.</param>
            <returns>The object deserialized from the JSON.</returns>
        </member>
        <member name="M:Server.Core.Serialization.Json.JsonSerializer.Deserialize``1(System.String,``0)">
            <summary>
            Deserializes a string which represents a JSON to a CLR object,
            and specifies a template object which is used to be an anonymous object.
            </summary>
            <typeparam name="T">The type of the CLR object.</typeparam>
            <param name="json">The JSON.</param>
            <param name="template">The template object for the deserialization.</param>
            <returns>The object deserialized from the JSON.</returns>
        </member>
        <member name="M:Server.Core.Serialization.Json.JsonSerializer.Deserialize(System.String,System.Type)">
            <summary>
            Deserializes a string which represents a JSON to a CLR object.
            </summary>
            <param name="json">The JSON.</param>
            <param name="type">The type of the CLR object.</param>
            <returns>The object deserialized from the JSON.</returns>
        </member>
        <member name="M:Server.Core.Serialization.Json.JsonSerializer.Deserialize(System.IO.TextReader,System.Type)">
            <summary>
            Deserializes a JSON read from a <see cref="T:System.IO.TextReader"/> to a CLR object.
            </summary>
            <param name="textReader">The <see cref="T:System.IO.TextReader"/> from which to read the JSON.</param>
            <param name="type">The type of the CLR object.</param>
            <returns>The object deserialized from the JSON.</returns>
        </member>
        <member name="P:Server.Core.Serialization.Json.JsonSerializer.Default">
            <summary>
            Gets the default instance of <see cref="T:Server.Core.Serialization.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="P:Server.Core.Serialization.Json.JsonSerializer.ContractResolver">
            <summary>
            Gets the <see cref="T:Server.Core.Serialization.Json.IJsonContractResolver"/> for the <see cref="T:Server.Core.Serialization.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="P:Server.Core.Serialization.Json.JsonSerializer.CheckCycleReference">
            <summary>
            Indicates whether to enable the cycle reference checking.
            The default value is false.
            </summary>
        </member>
        <member name="T:Server.Core.Serialization.Json.JsonSerializingState">
            <summary>
            Keeps the state for serializing.
            </summary>
        </member>
        <member name="P:Server.Core.Serialization.Json.JsonSerializingState.CheckCycleReference">
            <summary>
            Gets or sets a value that indicates whether to check for 
            the cycle reference during serailizing.
            </summary>
        </member>
        <member name="P:Server.Core.Serialization.Json.JsonSerializingState.SerializingObjectStack">
            <summary>
            Gets a <see cref="T:System.Collections.Stack"/> storing the object references during serializing.
            </summary>
        </member>
        <member name="T:Server.Core.Serialization.Json.JsonToken">
            <summary>
            Defines tokens in JSONs.
            </summary>
        </member>
        <member name="F:Server.Core.Serialization.Json.JsonToken.None">
            <summary>
            The token is used for <see cref="T:Server.Core.Serialization.Json.JsonWriter"/> when the methods have not been called;
            or for <see cref="T:Server.Core.Serialization.Json.JsonReader"/> when the reader is not started or has passed the end of JSON.
            </summary>
        </member>
        <member name="F:Server.Core.Serialization.Json.JsonToken.ObjectStart">
            <summary>
            The start of a JSON object ('{').
            </summary>
        </member>
        <member name="F:Server.Core.Serialization.Json.JsonToken.ObjectEnd">
            <summary>
            The end of a JSON object ('}').
            </summary>
        </member>
        <member name="F:Server.Core.Serialization.Json.JsonToken.ArrayStart">
            <summary>
            The start of a JSON array ('[').
            </summary>
        </member>
        <member name="F:Server.Core.Serialization.Json.JsonToken.ArrayEnd">
            <summary>
            The start of a JSON array (']').
            </summary>
        </member>
        <member name="F:Server.Core.Serialization.Json.JsonToken.PropertyName">
            <summary>
            A JSON object property.
            </summary>
        </member>
        <member name="F:Server.Core.Serialization.Json.JsonToken.NullValue">
            <summary>
            The token for javascript null.
            </summary>
        </member>
        <member name="F:Server.Core.Serialization.Json.JsonToken.StringValue">
            <summary>
            The token for strings.
            </summary>
        </member>
        <member name="F:Server.Core.Serialization.Json.JsonToken.NumberValue">
            <summary>
            The token for numbers.
            </summary>
        </member>
        <member name="F:Server.Core.Serialization.Json.JsonToken.BooleanValue">
            <summary>
            The token for boolean values.
            </summary>
        </member>
        <member name="F:Server.Core.Serialization.Json.JsonToken.UndefinedValue">
            <summary>
            The token for javascript 'undefined'.
            </summary>
        </member>
        <member name="F:Server.Core.Serialization.Json.JsonToken.Comma">
            <summary>
            The comma used for separating the array elements or properties.
            </summary>
        </member>
        <member name="T:Server.Core.Serialization.Json.JsonWriter">
            <summary>
            Represents a writer that provides forward-only means of generating JSON data.
            </summary>
        </member>
        <member name="F:Server.Core.Serialization.Json.JsonWriter.Writer">
            <summary>
            The internal <see cref="T:System.IO.TextWriter"/> which the JSON is written to.
            </summary>
        </member>
        <member name="M:Server.Core.Serialization.Json.JsonWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of <see cref="T:Server.Core.Serialization.Json.JsonWriter"/> with the given 
            instance of <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="writer">
            The instance of <see cref="T:System.IO.TextWriter"/> which the JSON is written to.
            </param>
        </member>
        <member name="M:Server.Core.Serialization.Json.JsonWriter.WriteObjectStart">
            <summary>
            Write a '{' which indicates a beginning of a JSON object.
            </summary>
        </member>
        <member name="M:Server.Core.Serialization.Json.JsonWriter.WriteObjectEnd">
            <summary>
            Write a '}' which indicates an end of a JSON object.
            </summary>
        </member>
        <member name="M:Server.Core.Serialization.Json.JsonWriter.WriteArrayStart">
            <summary>
            Write a '[' which indicates a beginning of a JSON array.
            </summary>
        </member>
        <member name="M:Server.Core.Serialization.Json.JsonWriter.WriteArrayEnd">
            <summary>
            Write a ']' which indicates a end of a JSON array.
            </summary>
        </member>
        <member name="M:Server.Core.Serialization.Json.JsonWriter.WritePropertyName(System.String)">
            <summary>
            Write a JSON property name like '"name":'.
            A <c>null</c> name is treated as an empty string.
            </summary>
            <param name="name">The property name.</param>
        </member>
        <member name="M:Server.Core.Serialization.Json.JsonWriter.WriteComma">
            <summary>
            Write a comma for properties or array elements.
            </summary>
        </member>
        <member name="M:Server.Core.Serialization.Json.JsonWriter.WriteUndefinedValue">
            <summary>
            Write a JSON 'undefined'.
            </summary>
        </member>
        <member name="M:Server.Core.Serialization.Json.JsonWriter.WriteNullValue">
            <summary>
            Write a JSON 'null'.
            </summary>
        </member>
        <member name="M:Server.Core.Serialization.Json.JsonWriter.WriteRawStringValue(System.String)">
            <summary>
            Write a string value which will not be escaped.
            </summary>
            <param name="value">The string value.</param>
        </member>
        <member name="M:Server.Core.Serialization.Json.JsonWriter.WriteStringValue(System.String)">
            <summary>
            Write a string value, the value will be escaped.
            </summary>
            <param name="value">The string value.</param>
        </member>
        <member name="M:Server.Core.Serialization.Json.JsonWriter.WriteBooleanValue(System.Boolean)">
            <summary>
            Write a boolean value (true/false).
            </summary>
            <param name="value">The boolean value.</param>
        </member>
        <member name="M:Server.Core.Serialization.Json.JsonWriter.WriteNumberValue(System.String)">
            <summary>
            Write a string value that represents a number.
            NULL will lead to a JSON 'null'.
            </summary>
            <param name="value">The value to be written.</param>
        </member>
        <member name="P:Server.Core.Serialization.Json.JsonWriter.AutoCloseInternalWriter">
            <summary>
            Gets or sets a value that indicates whether to close the internal 
            <see cref="T:System.IO.TextWriter"/> when the <see cref="M:Server.Core.Serialization.Json.JsonWriter.Dispose"/> method is called.
            The default value is <c>true</c>.
            </summary>
        </member>
        <member name="P:Server.Core.Serialization.Json.JsonWriter.EscapeSolidus">
            <summary>
            Indicates whether to escape the soliduses('/') in strings (to '\/').
            The default value is <c>true</c>.
            </summary>
        </member>
        <member name="P:Server.Core.Serialization.Json.JsonWriter.QuoteChar">
            <summary>
            Gets or sets the character used for a quote.
            </summary>
        </member>
        <member name="T:Server.Core.Serialization.Json.JsonWriterImproved">
            <summary>
            Represents a writer that provides non-cached and forward-only means of 
            generating JSON data.
            This writer is an improved implementation of <see cref="T:Server.Core.Serialization.Json.JsonWriter"/>,
            it can validate the JSON data being written, throws <see cref="T:Server.Core.Serialization.Json.JsonFormatException"/> 
            on invalid data, and provides the ability of formatting the JSON text automatically.
            </summary>
        </member>
        <member name="T:Server.Core.StringEx">
            <summary>
            定义了<see cref="T:System.String"/>的扩展方法。
            </summary>
        </member>
        <member name="M:Server.Core.StringEx.FormatWith(System.String,System.Object[])">
            <summary>
            对字符串进行格式化。
            </summary>
            <param name="format">格式声明。</param>
            <param name="args">格式化参数列表。</param>
            <returns>格式化后的字符串。</returns>
        </member>
        <member name="M:Server.Core.StringEx.FormatWith(System.String,System.IFormatProvider,System.Object[])">
            <summary>
            对字符串进行格式化。
            </summary>
            <param name="format">格式声明。</param>
            <param name="provider">格式化提供器。</param>
            <param name="args">格式化参数列表。</param>
            <returns>格式化后的字符串。</returns>
        </member>
        <member name="T:Server.Core.StringUtils">
            <summary>
            包含字符串处理相关的方法。
            </summary>
        </member>
        <member name="M:Server.Core.StringUtils.GetBytes(System.String)">
            <summary>
            获取指定字符串的UTF8编码的二进制序列。
            </summary>
            <param name="input">字符串输入。</param>
            <returns>指定字符串UTF8编码的二进制序列。</returns>
            <exception cref="T:System.ArgumentNullException">当输入字符串为<c>null</c>。</exception>
            <exception cref="T:System.ArgumentException">当输入字符串长度为0。</exception>
        </member>
        <member name="M:Server.Core.StringUtils.IsWhiteSpace(System.String)">
            <summary>
            判断字符串是否只包含空白字符。
            </summary>
            <param name="s">待判断的字符串。</param>
            <returns>若只包含空白字符串，返回<c>true</c>，否则为<c>false</c>。</returns>
            <exception cref="T:System.ArgumentNullException">当输入字符串为<c>null</c>。</exception>
            <remarks>注意，字符串长度为0时返回<c>false</c>。</remarks>
        </member>
        <member name="M:Server.Core.StringUtils.IsNullOrEmptyOrWhiteSpace(System.String)">
            <summary>
            判断指定的<see cref="T:System.String"/>是否为空引用或空字符串或只包含空白字符。
            </summary>
            <param name="s">待判断的字符串。</param>
            <returns>若成立返回<c>true</c>，否则返回<c>false</c>。</returns>
            <remarks>
            .net4及之后的版本提供了<see cref="M:System.String.IsNullOrWhiteSpace(System.String)"/>方法，
            若使用对应版本，请直接使用标准库中的方法。
            </remarks>
        </member>
        <member name="M:Server.Core.StringUtils.Keep(System.String,System.String)">
            <summary>
            保留指定字符串中的指定字符。
            </summary>
            <param name="input">待处理的字符串。</param>
            <param name="keep">保留的字符。</param>
            <returns>处理后的字符串，所有未给定保留的字符将被移除。</returns>
        </member>
        <member name="M:Server.Core.StringUtils.Remove(System.String,System.String)">
            <summary>
            保留指定字符串中的指定字符。
            </summary>
            <param name="input">待处理的字符串。</param>
            <param name="remove">需移除的字符。</param>
            <returns>处理后的字符串，所有未给定保留的字符将被移除。</returns>
            <remarks>
            若只需要移除字符串头部或尾部的部分字符，可
            使用<see cref="M:System.String.TrimStart(System.Char[])"/>/<see cref="M:System.String.TrimEnd(System.Char[])"/>。
            </remarks>
        </member>
        <member name="M:Server.Core.StringUtils.GetMatchedPrefixLength(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            从指定位置开始匹配两个字符串，并返回前缀部分相同的长度。
            如abcde与abcxy从索引位置0开始匹配，则相同前缀为abc，长度为3。
            </summary>
            <param name="v1">用于匹配的第一个字符串。</param>
            <param name="idxBegin1">第一个字符串的匹配开始位置。</param>
            <param name="v2">用于匹配的第二个字符串。</param>
            <param name="idxBegin2">第二个字符串的匹配开始位置。</param>
            <returns>前缀部分相同的长度。</returns>
        </member>
        <member name="M:Server.Core.StringUtils.RegexEscape(System.String)">
            <summary>
            对正则表达式内的元字符进行转义 。
            处理<see cref="M:System.Text.RegularExpressions.Regex.Escape(System.String)"/>方法对于 ] } 等字符不进行转义的问题。
            </summary>
            <param name="input">待转义的字符串。</param>
            <returns>转义后的字符串。</returns>
        </member>
        <member name="M:Server.Core.StringUtils.IsRegexMetachar(System.Char)">
            <summary>
            判断字符是否是正则表达式的元字符。
            </summary>
            <param name="ch">待判断的字符。</param>
            <returns>若字符是正则表达式的元字符，返回<c>true</c>；否则返回<c>false</c>。</returns>
        </member>
        <member name="M:Server.Core.StringUtils.IsFullWidth(System.Char)">
            <summary>
            判断字符是否是全角字符。
            NOTE 方法当前并不完整。
            </summary>
            <param name="ch">待判断的字符。</param>
            <returns>若字符是全角字符，返回<c>true</c>；否则返回<c>false</c>。</returns>
        </member>
        <member name="M:Server.Core.StringUtils.GetWidth(System.String)">
            <summary>
            获取字符的长度，将全角字符长度记为2。
            </summary>
            <param name="s">字符串。</param>
            <returns>字符串的显示宽度。</returns>
            <exception cref="T:System.ArgumentNullException">当<paramref name="s"/>为null。</exception>
        </member>
        <member name="M:Server.Core.StringUtils.PadLeft(System.String,System.Int32)">
            <summary>
            在指定字符串的左侧填充空格，直到达到指定的长度（全角字符占2的长度）。
            </summary>
            <param name="s">填充前的字符串。</param>
            <param name="totalWidth">填充后的目标长度。</param>
            <returns>填充后的字符串。</returns>
            <exception cref="T:System.ArgumentNullException">当<paramref name="s"/>为null。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">当<paramref name="totalWidth"/>非正数。</exception>
        </member>
        <member name="M:Server.Core.StringUtils.PadRight(System.String,System.Int32)">
            <summary>
            在指定字符串的右侧填充空格，直到达到指定的宽度（全角字符占2的宽度）。
            </summary>
            <param name="s">填充前的字符串。</param>
            <param name="totalWidth">填充后的目标宽度。</param>
            <returns>填充后的字符串。</returns>
            <exception cref="T:System.ArgumentNullException">当<paramref name="s"/>为null。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">当<paramref name="totalWidth"/>非正数。</exception>
        </member>
        <member name="M:Server.Core.StringUtils.Join(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            将一个字符串序列拼接为一个字符串，并使用指定的分隔符分隔序列中的不同元素。
            </summary>
            <param name="separator">分隔符，若为null，其效果等同于空字符串。</param>
            <param name="values">待拼接的字符串序列。</param>
            <returns>拼接后的字符串。</returns>
            <exception cref="T:System.ArgumentNullException">当<paramref name="values"/>为null。</exception>
            <remarks>
            .net4及之后的版本提供了<see cref="M:System.String.Join(System.String,System.Collections.Generic.IEnumerable{System.String})"/>方法，
            若使用对应版本，请直接使用标准库中的方法。
            </remarks>
        </member>
        <member name="M:Server.Core.StringUtils.Join(System.String,System.String[])">
            <summary>
            将一个字符串集合拼接为一个字符串，并使用指定的分隔符分隔序列中的不同元素。
            </summary>
            <param name="separator">分隔符，若为null，其效果等同于空字符串。</param>
            <param name="values">待拼接的字符串集合。</param>
            <returns>拼接后的字符串。</returns>
            <exception cref="T:System.ArgumentNullException">当<paramref name="values"/>为null。</exception>
            <remarks>
            .net4及之后的版本提供了<see cref="M:System.String.Join(System.String,System.String[])"/>方法，
            若使用对应版本，请直接使用标准库中的方法。
            </remarks>
        </member>
        <member name="M:Server.Core.StringUtils.Format(System.String,System.Object[])">
            <summary>
            修改版的<see cref="M:System.String.Format(System.String,System.Object[])"/>， 在字符串替换标记"{x,y:z}"中，
            对于y增加全角与半角的判断，使其结果为填充至指定宽度而不是指定的字符数量。
            </summary>
            <param name="format">格式字符串。</param>
            <param name="args">用户格式化的参数列表。</param>
            <returns>根据指定格式输出的结果。</returns>
        </member>
        <member name="M:Server.Core.StringUtils.Format(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            修改版的<see cref="M:System.String.Format(System.String,System.Object[])"/>，在字符串替换标记"{x,y:z}"中，
            对于y增加全角与半角的判断，使其结果为填充至指定宽度而不是指定的字符数量。
            允许指定特定的<see cref="T:System.IFormatProvider"/>。
            </summary>
            <param name="provider">提供特定格式的<see cref="T:System.IFormatProvider"/>实现。</param>
            <param name="format">格式字符串。</param>
            <param name="args">用户格式化的参数列表。</param>
            <returns>根据指定格式输出的结果。</returns>
        </member>
        <member name="T:Server.Core.Threading.IKeyLock`1">
            <summary>
            定义一组方法，用于获取或释放基于特定关键字的锁。
            </summary>
            <typeparam name="TKey">用于锁定的关键字的类型。</typeparam>
        </member>
        <member name="M:Server.Core.Threading.IKeyLock`1.Enter(`0)">
            <summary>
            获取指定关键字的锁，并返回一个<see cref="T:System.IDisposable"/>的实现，
            其<see cref="M:System.IDisposable.Dispose"/>方法可释放锁。
            </summary>
            <param name="key">关键字。</param>
            <returns>
            <see cref="T:System.IDisposable"/>的实现，其<see cref="M:System.IDisposable.Dispose"/>方法可释放锁，
            方法调用需在拥有该锁的线程上进行。
            </returns>
        </member>
        <member name="M:Server.Core.Threading.IKeyLock`1.TryEnter(`0)">
            <summary>
            尝试获取指定关键字的锁。
            若成功获取锁，返回一个<see cref="T:System.IDisposable"/>的实现，其<see cref="M:System.IDisposable.Dispose"/>方法可释放锁；
            否则返回null。
            </summary>
            <param name="key">关键字。</param>
            <returns>
            若成功获取锁，返回一个<see cref="T:System.IDisposable"/>的实现，其<see cref="M:System.IDisposable.Dispose"/>方法可释放锁，
            方法调用需在拥有该锁的线程上进行；未能获取锁时返回null。
            </returns>
        </member>
        <member name="M:Server.Core.Threading.IKeyLock`1.TryEnter(`0,System.Int32)">
            <summary>
            尝试在指定的时间内获取指定关键字的锁。
            若成功获取锁，返回一个<see cref="T:System.IDisposable"/>的实现，其<see cref="M:System.IDisposable.Dispose"/>方法可释放锁；
            否则返回null。
            </summary>
            <param name="key">关键字。</param>
            <param name="millisecondsTimeout">超时时间，单位为毫秒。</param>
            <returns>
            若成功获取锁，返回一个<see cref="T:System.IDisposable"/>的实现，其<see cref="M:System.IDisposable.Dispose"/>方法可释放锁，
            方法调用需在拥有该锁的线程上进行；未能获取锁时返回null。
            </returns>
        </member>
        <member name="M:Server.Core.Threading.IKeyLock`1.Exit(`0)">
            <summary>
            释放指定关键字锁对应的锁。
            </summary>
            <param name="key">关键字。</param>
        </member>
        <member name="T:Server.Core.Threading.MonitorKeyLock`1">
            <summary>
            提供一组方法，允许获取或释放基于特定关键字的锁。
            此实现能够精确锁定每个关键字，但性能较差。
            此类型允许锁递归。
            </summary>
            <typeparam name="TKey">用于锁定的关键字的类型。</typeparam>
        </member>
        <member name="M:Server.Core.Threading.MonitorKeyLock`1.#ctor">
            <summary>
            初始化类型的新实例。
            </summary>
        </member>
        <member name="M:Server.Core.Threading.MonitorKeyLock`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            初始化类型的新实例，并指定关键字的比较方式。
            </summary>
            <param name="comparer">指定关键字的比较方式。</param>
        </member>
        <member name="M:Server.Core.Threading.MonitorKeyLock`1.Enter(`0)">
            <summary>
            获取指定关键字的锁，并返回一个<see cref="T:System.IDisposable"/>的实现，
            其<see cref="M:System.IDisposable.Dispose"/>方法可释放锁。
            </summary>
            <param name="key">关键字。</param>
            <returns>
            <see cref="T:System.IDisposable"/>的实现，其<see cref="M:System.IDisposable.Dispose"/>方法可释放锁，
            方法调用需在拥有该锁的线程上进行。
            </returns>
        </member>
        <member name="M:Server.Core.Threading.MonitorKeyLock`1.TryEnter(`0)">
            <summary>
            尝试获取指定关键字的锁。
            若成功获取锁，返回一个<see cref="T:System.IDisposable"/>的实现，其<see cref="M:System.IDisposable.Dispose"/>方法可释放锁；
            否则返回null。
            </summary>
            <param name="key">关键字。</param>
            <returns>
            若成功获取锁，返回一个<see cref="T:System.IDisposable"/>的实现，其<see cref="M:System.IDisposable.Dispose"/>方法可释放锁，
            方法调用需在拥有该锁的线程上进行；未能获取锁时返回null。
            </returns>
        </member>
        <member name="M:Server.Core.Threading.MonitorKeyLock`1.TryEnter(`0,System.Int32)">
            <summary>
            尝试在指定的时间内获取指定关键字的锁。
            若成功获取锁，返回一个<see cref="T:System.IDisposable"/>的实现，其<see cref="M:System.IDisposable.Dispose"/>方法可释放锁；
            否则返回null。
            </summary>
            <param name="key">关键字。</param>
            <param name="millisecondsTimeout">超时时间，单位为毫秒。</param>
            <returns>
            若成功获取锁，返回一个<see cref="T:System.IDisposable"/>的实现，其<see cref="M:System.IDisposable.Dispose"/>方法可释放锁，
            方法调用需在拥有该锁的线程上进行；未能获取锁时返回null。
            </returns>
        </member>
        <member name="M:Server.Core.Threading.MonitorKeyLock`1.Exit(`0)">
            <summary>
            释放指定关键字锁对应的锁。
            </summary>
            <param name="key">关键字。</param>
        </member>
        <member name="T:Server.Core.Threading.LimitedCapacityThreadPoolProxy">
            <summary>
            提供一个限制工作队列大小的线程池代理。
            当队列已满时，新增的工作将被阻塞。
            </summary>
        </member>
        <member name="M:Server.Core.Threading.LimitedCapacityThreadPoolProxy.#ctor">
            <summary>
            使用默认的工作队列大小初始化<see cref="T:Server.Core.Threading.LimitedCapacityThreadPoolProxy"/>的新实例。
            </summary>
        </member>
        <member name="M:Server.Core.Threading.LimitedCapacityThreadPoolProxy.#ctor(System.Int32)">
            <summary>
            初始化<see cref="T:Server.Core.Threading.LimitedCapacityThreadPoolProxy"/>的新实例并指定工作队列的大小。
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Server.Core.Threading.LimitedCapacityThreadPoolProxy.WaitAll">
            <summary>
            等待队列中的所有工作线程执行完毕。
            </summary>
        </member>
        <member name="M:Server.Core.Threading.LimitedCapacityThreadPoolProxy.Wait(System.Int32)">
            <summary>
            指定等待时间，若在此时间内，队列中的所有工作线程都执行完毕，返回true；否则返回false。
            </summary>
            <param name="millisecondsTimeOut">指定等待时间，单位为毫秒。</param>
            <returns>若队列中的所有工作线程都执行完毕，返回true；否则返回false。</returns>
        </member>
        <member name="M:Server.Core.Threading.LimitedCapacityThreadPoolProxy.Queue(System.Threading.WaitCallback)">
            <summary>
            将执行过程加入线程池工作队列中。
            </summary>
            <param name="waitCallback">执行过程。</param>
            <returns>true若执行过程加入到线程池工作队列；否则返回false。</returns>
        </member>
        <member name="M:Server.Core.Threading.LimitedCapacityThreadPoolProxy.Queue(System.Threading.WaitCallback,System.Int32)">
            <summary>
            将执行过程加入线程池工作队列中并指定超时时间。
            </summary>
            <param name="waitCallback">执行过程。</param>
            <param name="millisecondsTimeOut">
            指定超时时间，若经过此时间后执行过程未能加入工作队列，则返回false。
            0表示不指定超时时间，此时调用线程将一直等待直到成功加入队列。
            </param>
            <returns>true若执行过程加入到线程池工作队列；否则返回false。</returns>
        </member>
        <member name="M:Server.Core.Threading.LimitedCapacityThreadPoolProxy.Queue(System.Action)">
            <summary>
            将执行过程加入线程池工作队列中。
            </summary>
            <param name="act">执行过程。</param>
            <returns>true若执行过程加入到线程池工作队列；否则返回false。</returns>
        </member>
        <member name="M:Server.Core.Threading.LimitedCapacityThreadPoolProxy.Queue(System.Action,System.Int32)">
            <summary>
            将执行过程加入线程池工作队列中并指定超时时间。
            </summary>
            <param name="act">执行过程。</param>
            <param name="millisecondsTimeOut">
            指定超时时间，若经过此时间后执行过程未能加入工作队列，则返回false。
            0表示不指定超时时间，此时调用线程将一直等待直到成功加入队列。
            </param>
            <returns>true若执行过程加入到线程池工作队列；否则返回false。</returns>
        </member>
        <member name="T:Server.Core.Threading.SpinKeyLock`1">
            <summary>
            提供一组方法，允许获取或释放基于特定关键字的锁。
            此实现具有高性能，但有一定几率发生关键字碰撞（不同的关键字使用相同的锁）。
            </summary>
            <typeparam name="TKey">用于锁定的关键字的类型。</typeparam>
        </member>
        <member name="F:Server.Core.Threading.SpinKeyLock`1.DefaultBulkSize">
            <summary>
            默认的碰撞区间大小。
            </summary>
        </member>
        <member name="M:Server.Core.Threading.SpinKeyLock`1.#ctor">
            <summary>
            使用默认的碰撞区间大小（<see cref="F:Server.Core.Threading.SpinKeyLock`1.DefaultBulkSize"/>）初始化类型的新实例。
            </summary>
        </member>
        <member name="M:Server.Core.Threading.SpinKeyLock`1.#ctor(System.Int32)">
            <summary>
            初始化类型的新实例，并指定一个数，该数值越大则发生关键字碰撞的几率越小，但占用内存越大。
            每单位需要占用8字节内存。建议该数字为一个素数。
            </summary>
            <param name="lockerSize">数值越大则发生关键字碰撞的几率越小，但占用内存越大。</param>
        </member>
        <member name="M:Server.Core.Threading.SpinKeyLock`1.Enter(`0)">
            <summary>
            获取指定关键字的锁，并返回一个<see cref="T:System.IDisposable"/>的实现，
            其<see cref="M:System.IDisposable.Dispose"/>方法可释放锁。
            </summary>
            <param name="key">关键字。</param>
            <returns>
            <see cref="T:System.IDisposable"/>的实现，其<see cref="M:System.IDisposable.Dispose"/>方法可释放锁，
            方法调用需在拥有该锁的线程上进行。
            </returns>
        </member>
        <member name="M:Server.Core.Threading.SpinKeyLock`1.TryEnter(`0)">
            <summary>
            尝试获取指定关键字的锁。
            若成功获取锁，返回一个<see cref="T:System.IDisposable"/>的实现，其<see cref="M:System.IDisposable.Dispose"/>方法可释放锁；
            否则返回null。
            </summary>
            <param name="key">关键字。</param>
            <returns>
            若成功获取锁，返回一个<see cref="T:System.IDisposable"/>的实现，其<see cref="M:System.IDisposable.Dispose"/>方法可释放锁，
            方法调用需在拥有该锁的线程上进行；未能获取锁时返回null。
            </returns>
        </member>
        <member name="M:Server.Core.Threading.SpinKeyLock`1.TryEnter(`0,System.Int32)">
            <summary>
            尝试在指定的时间内获取指定关键字的锁。
            若成功获取锁，返回一个<see cref="T:System.IDisposable"/>的实现，其<see cref="M:System.IDisposable.Dispose"/>方法可释放锁；
            否则返回null。
            </summary>
            <param name="key">关键字。</param>
            <param name="millisecondsTimeout">超时时间，单位为毫秒。</param>
            <returns>
            若成功获取锁，返回一个<see cref="T:System.IDisposable"/>的实现，其<see cref="M:System.IDisposable.Dispose"/>方法可释放锁，
            方法调用需在拥有该锁的线程上进行；未能获取锁时返回null。
            </returns>
        </member>
        <member name="M:Server.Core.Threading.SpinKeyLock`1.Exit(`0)">
            <summary>
            释放指定关键字锁对应的锁。
            </summary>
            <param name="key">关键字。</param>
        </member>
        <member name="T:Server.Core.Threading.ThreadPoolUtils">
            <summary>
            包含线程池操作有关的呃辅助方法。
            </summary>
        </member>
        <member name="M:Server.Core.Threading.ThreadPoolUtils.SetWorkerThreads(System.Int32,System.Int32)">
            <summary>
            设置线程池中的最大和最小工作线程数。
            </summary>
            <param name="minWokerThreads">
            最小工作线程数。
            若小于或等于0，且原最小线程数小于<paramref name="maxWorkderThreads"/>，则仍将维持原有的最小线程数；
            否则新最小线程数将等于<paramref name="maxWorkderThreads"/>。
            </param>
            <param name="maxWorkderThreads">
            最大工作线程数。
            若小于或等于0，且原最大线程数大于<paramref name="minWokerThreads"/>，则仍将维持原有的最大线程数；
            否则新最大线程数将等于<paramref name="minWokerThreads"/>。
            </param>
        </member>
        <member name="M:Server.Core.Threading.ThreadPoolUtils.WaitAllWorkerThreads(System.Int32)">
            <summary>
            等待线程池中的所有工作线程执行完毕，并指定等待的超时时间。
            </summary>
            <param name="millisecondesTimeOut">等待的超时时间。</param>
            <returns>true若在超时时间之内各工作线程已执行完；否则返回false。</returns>
        </member>
        <member name="T:Server.Core.WinApi">
            <summary>
            包含Windowns API入口。
            </summary>
        </member>
        <member name="T:Server.Core.WinApi.Kernel32">
            <summary>
            来自Kernel32.dll的API。
            </summary>
        </member>
        <member name="M:Server.Core.WinApi.Kernel32.GetTickCount64">
            <summary>
            返回当前操作系统启动后的毫秒数。
            由WinServer2008、WinVista及之后版本的Windows系统支持。
            </summary>
            <returns>当前操作系统启动后的毫秒数。</returns>
        </member>
        <member name="M:Server.Core.WinApi.Kernel32.GetTickCount">
            <summary>
            返回当前操作系统启动后的毫秒数。最多包含约49.8天。
            由WinServer2000、WinXP及之后版本的Windows系统支持。
            </summary>
            <returns>当前操作系统启动后的毫秒数。最多包含49.7天。</returns>
            <remarks>
            如果系统连续运行，将在约 24.9 天内从零递增至 Int32.MaxValue，
            然后跳至 Int32.MinValue（这是一个负数），再在接下来的 24.9 天内递增至零。 
            </remarks>
        </member>
        <member name="M:Server.Core.WinApi.Kernel32.QueryPerformanceCounter(System.Int64@)">
            <summary>
            获取高精度的时间计数。
            由WinServer2000及之后版本的Windows系统支持。
            </summary>
            <param name="lpPerformanceCount">用于存储时间计数的变量。</param>
            <returns>若操作成功，返回<c>true</c>；否则返回<c>false</c>。</returns>
        </member>
        <member name="M:Server.Core.WinApi.Kernel32.QueryPerformanceFrequency(System.Int64@)">
            <summary>
            获取高精度的时间计数。同一时间仅存在一个计数器。
            由WinServer2000及之后版本的Windows系统支持。
            </summary>
            <param name="lpFrequency">用于存储时间计数的变量。</param>
            <returns>若操作成功，返回<c>true</c>；否则返回<c>false</c>。</returns>
        </member>
        <member name="M:Server.Core.WinApi.Kernel32.AllocConsole">
            <summary>
            强制在当前程序内启用控制台。
            </summary>
            <returns>若操作成功，返回<c>true</c>；否则返回<c>false</c>。</returns>
        </member>
        <member name="M:Server.Core.WinApi.Kernel32.FreeConsole">
            <summary>
            释放当前程序中的控制台。
            </summary>
            <returns>若操作成功，返回<c>true</c>；否则返回<c>false</c>。</returns>
        </member>
        <member name="M:Server.Core.WinApi.Kernel32.QueryThreadCycleTime(System.IntPtr,System.UInt64@)">
            <summary>
            获取指定线程所使用的CPU时钟周期计数。
            由WinServer2008、WinVista及之后版本的Windows系统支持。
            </summary>
            <param name="hThread">线程句柄。</param>
            <param name="cycleTime">CPU时钟周期计数。这是输出参数。</param>
            <returns></returns>
        </member>
        <member name="M:Server.Core.WinApi.Kernel32.GetCurrentThread">
            <summary>
            获取当前线程的句柄。
            </summary>
            <returns>当前线程的句柄。</returns>
        </member>
        <member name="M:Server.Core.WinApi.Kernel32.GetThreadTimes(System.IntPtr,System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
            <summary>
            获取线程运行过程中占用的内核时间和用户时间。
            </summary>
            <param name="hThread">线程句柄。</param>
            <param name="lpCreationTime">线程运行的开始时间。这是一个输出参数。</param>
            <param name="lpExitTime">线程运行的结束时间。这是一个输出参数。</param>
            <param name="lpKernelTime">内核时间。这是一个输出参数。</param>
            <param name="lpUserTime">用户时间。这是一个输出参数。</param>
            <returns></returns>
        </member>
        <member name="M:Server.Core.WinApi.Kernel32.WritePrivateProfileString(System.String,System.String,System.String,System.String)">
            <summary>
            将指定的值写入INI文件的指定节中。
            若键与值都为<c>null</c>将删除整个节。
            若键不为<c>null</c>，值设置为<c>null</c>将删除该键。
            </summary>
            <param name="section">节名称。</param>
            <param name="key">键名称。</param>
            <param name="val">值。</param>
            <param name="fileName">包含完整路径的文件全名。</param>
            <returns>是否写入成功。</returns>
            <remarks>由Windows2000及之后的版本支持。</remarks>
        </member>
        <member name="M:Server.Core.WinApi.Kernel32.GetPrivateProfileString(System.String,System.String,System.String,System.Text.StringBuilder,System.Int32,System.String)">
            <summary>
            从INI文件的指定位置读取字符串值。
            </summary>
            <param name="section">节名称。</param>
            <param name="key">键名称。</param>
            <param name="def">指定未找到结果时的默认返回值。为null时返回空字符串。</param>
            <param name="retVal">返回值。</param>
            <param name="bufferSize">读取时的缓冲区大小（字节数）。</param>
            <param name="fileName">文件名。若文件名不包含具体路径，系统将在全盘搜索。</param>
            <returns>读取到的值的大小（字节数）。</returns>
            <remarks>由Windows2000及之后的版本支持。</remarks>
        </member>
        <member name="M:Server.Core.WinApi.Kernel32.GetPrivateProfileString(System.String,System.String,System.String,System.Byte[],System.Int32,System.String)">
            <summary>
            从INI文件的指定位置读取字符串值。
            </summary>
            <param name="section">节名称。</param>
            <param name="key">键名称。</param>
            <param name="def">指定未找到结果时的默认返回值。为null时返回空字符串。</param>
            <param name="retVal">返回值。</param>
            <param name="bufferSize">读取时的缓冲区大小（字节数）。</param>
            <param name="fileName">文件名。若文件名不包含具体路径，系统将在全盘搜索。</param>
            <returns>读取到的值的大小（字节数）。</returns>
            <remarks>由Windows2000及之后的版本支持。</remarks>
        </member>
        <member name="M:Server.Core.WinApi.Kernel32.GetPrivateProfileInt(System.String,System.String,System.Int32,System.String)">
            <summary>
            从INI文件的指定位置读取整数值。
            </summary>
            <param name="section">节名称。</param>
            <param name="key">键名称。</param>
            <param name="def">指定未找到结果时的默认返回值。</param>
            <param name="fileName">文件名。若文件名不包含具体路径，系统将在全盘搜索。</param>
            <returns>读取到的值。</returns>
            <remarks>由Windows2000及之后的版本支持。</remarks>
        </member>
    </members>
</doc>
